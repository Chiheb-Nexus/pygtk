2001-09-28  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (gtk_progress_bar_new_with_adjustment): mark as
	constructor

	* gtk/gtk.override (_wrap_gtk_progress_bar_new_with_adjustment):
	override constructor for ProgressBar to optionally take adjustment

2001-09-27  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (GtkTreeView.set_cursor): added new parameters.

	* gtk/pygtk-private.h: removed old PyGtkCTreeNode code, move to
	generic generated code.

	* gtk/gtkmodule.c (_PyGtk_FunctionStruct): likewise
	
	* gtk/pygtk.h: likewise.

	* gtk/gtk-types.c: likewise.
	
	* gtk/gtk.override (_wrap_gtk_tree_store_get_root_iter): moved to
	gtk_tree_model_get_iter_root.
	(_wrap_gtk_ctree_node_from_cobject): removed
	(_wrap_gtk_ctree_node_getattr): moved gtk-types.c getattr code to
	generic boxed interface and placed here.
	(_wrap_gtk_ctree_*): migrated to generic PyGBoxed for GtkCTreeNodes

2001-09-26  Matt Wilson  <msw@redhat.com>

	* gtk/gtkmodule.c (_PyGtk_FunctionStruct): removed PyGtkCTreeNode
	functions

	* codegen/argtypes.py: remove GtkCTreeNode custom registration

	* gtk/gtk.defs (GtkContainer.queue_resize): remove, use
	gtk_widget_queue_resize instead of gtk_container_queue_resize
	(GtkContainer.child_composite_name): remove, this is private
	(GtkContainer.clear_resize_widgets): likewise
	(GtkTreeViewColumn.set_cell_renderer): remove, use
	GtkTreeViewColumn.pack_start instead
	(CTreeNode): added CTreeNode boxed definition

	* gtk/gtk.override (_wrap_gtk_tree_view_column_new): changed from
	gtk_tree_view_column_set_renderer to gtk_tree_view_column_pack_start.

2001-09-25  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (get_has_resize_grip): bound
	(set_has_resize_grip): bound

2001-09-24  Matt Wilson  <msw@redhat.com>

	* gtk/gdk.override (_wrap_gdk_pixbuf_render_pixmap_and_mask):
	implemented GdkPixbuf.render_pixmap_and_mask.

	* gtk/gdk.defs (GdkPixbuf.render_pixmap_and_mask): set
	alpha_threshold default to 127

	* gtk/gtk.override (ignore): added gtk_entry_new to the big list
	of ignores.

	* gtk/gtk.defs (gtk_entry_new_with_max_length): bound
	(GtkCList.set_pixmap): default mask to NULL

2001-09-24  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (gtk_adjustment_new): added defaults to match
	previous version, changed step_increment to step_incr and
	page_increment to page_incr to match previous version.
	(gtk_table_new): added defaults to match previous version.

2001-09-22  Matthew Wilson  <msw@redhat.com>

	* gtk/gtk.defs (ctree_node_from_cobject): added binding.

	* gtk/gtk.override (_wrap_gtk_ctree_node_from_cobject): added a
	function to turn a PyCObject into a PyCListNodeObject object.
	This is a hack until GtkCTreeNode becomes a boxed type.
	
2001-09-21  Matthew Wilson  <msw@redhat.com>

	* gtk/gtk.override (_wrap_gtk_ctree_new_with_titles): use the same
	defaults as previous versions, make count and tree_column optional
	(_wrap_gtk_clist_new_with_titles): likewise

2001-09-21  Matt Wilson  <msw@redhat.com>

	* codegen/argtypes.py (BoxedArg.write_return): handle returning
	both a pointer to a boxed type and a boxed type itself
	(ArgMatcher.register_boxed): register both pointers to boxed types
	and boxed types themselves

	* gtk/gtk.defs (Style): add "black" and "white" fields.  More to
	do here later.

	* gtk/gtk.override (_wrap_gtk_radio_button_new): use
	new_from_widget, not the group->group member when creating a new
	button in a group.

2001-09-20  James Henstridge  <james@daa.com.au>

	* pango.defs (FontMetrics): uncomment this now it has a boxed type.

	* gtk/Makefile.am (EXTRA_DIST): add gdk.override to dist.

	* configure.in: update version number.

	* pygobject.h (_PyGObject_Functions.newgobj): rename from new, so
	that the header is includable in C++ programs.

2001-09-19  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (gtk_message_dialog_new): define defaults

	* gtk/gtk.override (_wrap_gtk_message_dialog_new): override this
	function so we can use "%s" as the format string and pass the
	entire last argument as a string securely.

2001-09-19  James Henstridge  <james@daa.com.au>

	* pango.defs: update for newer Pango API.

2001-09-19  James Henstridge  <james@daa.com.au>

	* pango.defs (FontDescription): remove fields from
	PangoFontDescription, as it is an opaque type now.

	* configure.in (ACLOCAL): require glib 1.3.8, pango 0.19 and gtk+
	1.3.8.

2001-09-18  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.override (_wrap_gtk_dialog_new_with_buttons): add a cast
	in pointer comparison to squelch compiler warning.

2001-09-18  Matt Wilson  <msw@redhat.com>

	* gtk/gtk.defs (gtk_dialog_new_with_buttons): note the defaults in
	the definition.

	* gtk/gtk.override (_wrap_gtk_dialog_new_with_buttons): implement
	a full-featured constructor for GtkDialog that will allow flags
	(as well as other parameters) to be passed in during object
	construction.  The form is a bit different than the C version,
	which uses varargs.  To pass a list of buttons at construction
	time, pass a tuple of text/id pairs as the 4th argument or in the
	buttons keyword.

	* gtk/gtk.defs (CTree): add selection to the fields
	(GtkCTree::insert_node): note the defaults in the definition.
	(GtkCTree::base_nodes): added base_nodes method back into GtkCTree
	
	* gtk/gtk.override (_wrap_gtk_ctree_insert_node): only require the
	first three parameters and use the defaults from previous versions
	for all the other values.
	(override-attr GtkCTree.selection): implementation for getting the
	selection of a CTree
	(_wrap_gtk_ctree_base_nodes): ported old base_nodes method to new
	binding.

	* gtk/gtk.defs (CList): add columns and selection to the fields

	* gtk/gtk.override (GtkCList.selection): implementation for
	getting the selection of a CList

2001-09-18  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_object_class_list_properties): rename to
	gobject.list_properties.

2001-09-18  Matt Wilson  <msw@redhat.com>

	* examples/pygtk-demo/demos/treemodel.py: fixed to work with new
	namespace

	* gtk/gdk.defs (pixbuf_new_from_file): don't defined
	gdk_pixbuf_new_from_file as a constructor of GdkPixbuf.  Define it
	as pixbuf_new_from_file to match pixbuf_new_from_stream.

	* gtk/gtk.defs (gtk_aspect_frame_new): add defaults to match old
	behavior
	(gtk_alignment_new): likewise
	(GtkCTree::construct): likewise
	(gtk_clist_new): likewise
	(gtk_clist_new_with_titles): likewise
	(gtk_ctree_new): likewise
	(gtk_ctree_new_with_titles): likewise
	(GtkImage::construct): use gtk_image_new to construct GtkImages -
	this allows us to use more than just pixmaps to create them.
	(gtk_image_new): new definition.

2001-09-18  James Henstridge  <james@daa.com.au>

	* pygobject.h (pyg_type_wrapper_new): export this function.

	* codegen/argtypes.py (GTypeArg.write_return): wrap GType return
	values as PyGTypeWrappers rather than ints.

	* codegen/codegen.py (write_source): pass the typecode macros to
	pygobject_register_class and pyg_register_interface rather than
	references to the get_type functions.

	* pygobject.h (_PyGObject_Functions): fix up prototypes.

	* gobjectmodule.c (check_bases): check if the base class is an
	extensionclass before poking around in class->bases.
	(pyg_type_*): don't bother storing the _get_type() function for
	lazy initialisation.  Instead, just store the GType.  Also, remove
	code for coercing them into numbers.
	(pygobject_register_class): take the type, rather that get_type
	routine as an argument.
	(pyg_register_interface): same here.
	(pyg_type_from_object): don't accept types that convert to ints as
	being equivalent to GTypes.
	(pyg_register_boxed): set the __gtype__ attribute to a
	PyGTypeWrapper.
	(pyg_type_register): set __gtype__ to a PyGTypeWrapper.
	(pyg_type_name): use pyg_type_from_name
	(pyg_type_from_name): return a PyGTypeWrapper object.
	(pyg_type_parent): update.
	(pyg_type_is_a): update.
	(pyg_type_children): update.
	(pyg_type_interfaces): update.
	(initgobject): set __gtype__ attributes to PyGTypeWrapper objects.
	(initgobject): make type constants PyGTypeWrapper objects.

2001-09-17  James Henstridge  <james@daa.com.au>

	* gtk/gdk.override: don't #define these types to G_TYPE_INVALID,
	as they are now valid.

	* gtk/gdk.defs: remove the FrameAction enum -- it is private to
	the GIF loader module.

2001-09-16  James Henstridge  <james@daa.com.au>

	* gtk/Makefile.am (pygtk_PYTHON): install keysyms.py and not GDK.py

	* gtk/__init__.py: import keysyms, rather than GDK.py

	* gtk/gtk.defs: add missing enums.

	* gtk/gdk.defs: add missing enums.

	* gtk/GDK.py: remove this file.

	* gtk/keysyms.py: put all keysyms here.

2001-09-15  James Henstridge  <james@daa.com.au>

	* gtk/libglademodule.c (initglade): fix name of init function.

	* codegen/codegen.py (write_enums): don't write out the
	add_constants fucntion if there are no enums/flags.

	* gtk/libglade.override (connect_many): fix small bug in
	connection function.

	* gtk/Makefile.am (pygtk_PYTHON): don't install the GTK.py header.
	(glademodule_la_SOURCES): rename the libglade module to gtk.glade.

	* pygtk.spec: update spec file, and add -devel sub package.

	* configure.in: use AC_HELP_STRING to format help strings, update
	version number.

	* acinclude.m4: remove the AM_PATH_PYTHON macro, as it is in
	automake 1.5.

	* Makefile.am: require automake 1.5 to build.

2001-09-15  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_enum_add_constants): allow '_' as start of
	constant name.
	(pyg_flags_add_constants): same here.

	* gtk/__init__.py (TRUE): don't import GTK.

	* gtk/gtkmodule.c (init_gtk): same here.

	* pangomodule.c (initpango): add constants to the pango module.

	* codegen/codegen.py (write_enums): new function that writes a
	function to add constants for all the enums and flags in the
	parser.
	(write_source): call write_enums().

	* gtk/gtkmodule.c (init_gtk): add test use of add_constants.

	* pygobject.h (_PyGObject_Functions): add new functions to header.

	* gobjectmodule.c (pyg_enum_add_constants): new function for
	adding constants to a module dictionary from a particular GType.
	(pyg_flags_add_constants): similar for flag types.
	(functions): add to export function vtable.

2001-09-14  James Henstridge  <james@daa.com.au>

	* pygtk-2.0.pc.in (defsdir): fix up defsdir definition.

	* Makefile.am (pkginclude_HEADERS): install ExtensionClass.h
	header (this can go when we switch over to python2.2 type/class
	stuff.

	* pygobject.h (pyg_register_boxed_custom): same change.

	* gobjectmodule.c (pyg_register_boxed_custom): rename from
	pyg_boxed_register to avoid confusion.

2001-09-14  James Henstridge  <james@daa.com.au>

	merge from short-class-names-branch

2001-09-12  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py (write_class, write_interface): set the short
	name as the class name here.

	* gobjectmodule.c (pygobject_register_class): pass ec->tp_name as
	the name for the class passed to PyExtensionClass_Export*.

	* codegen/codegen.py (write_source): pass the C name to
	pygobject_register_class again.

2001-09-11  James Henstridge  <james@daa.com.au>

	* gtk/__init__.py (create_pixmap): few fixups to get things to
	import correctly.

	* gtk/gtkmodule.c (init_gtk): there is no _pygdk_register_boxed().

	* gtk/libglade.override (init): same here.

	* gtk/gtk.override (init): same here.

	* gtk/gdk.override (init): use short class names here.

	* gtk/gtkmodule.c (init_gtk): initialise both the gtk._gtk and
	gtk.gdk modules.

	* gtk/gtk.defs: don't include gdk.defs

	* gtk/gtk.override: remove all GDK override wrappers.

	* gtk/gdk.override: new file taking the overrides for GDK
	functions.

	* codegen/codegen.py (write_source): register only the short name
	of the GObject, interface or boxed type.

2001-09-13  Johan Dahlin  <zilch.am@home.se>

	* gtk/gtk.defs (CellRendererTextPixbuf): removed.
	(gtk_cell_renderer_text_pixbuf_get_type): removed.
	(gtk_cell_renderer_text_pixbuf_new): removed.	
	(gtk_cell_renderer_text_iter_spew): removed.		
	(row_changed): Renamed.
	(row_inserted): Renamed.
	(row_has_child_toggled): Renamed.
	(row_deleted): Renamed.
	(rows_reordered): Renamed, and fixed.
	(set_fixed_width): Renamed.
	(get_fixed_width): Added.

	* gobjectmodule.c (initgobject): Adjust
	g_boxed_type_register_static to compile under latest cvs.

2001-09-10  Johan Dahlin  <zilch.am@home.se>

	* autogen.sh: add check and usage for AUTOMAKE and ACLOCAL.

2001-09-06  James Henstridge  <james@daa.com.au>

	* gtk/GTK.py: fix up enums.

	* gobjectmodule.c (pyg_closure_marshal): if return_value is NULL,
	don't set it.
	(pyg_signal_class_closure_marshal): same here.

	* gtk/gtk.defs: various updates to make it compile.

	* gtk/gtk-types.c (pygdk_atom_str): fallback to returning the repr
	of the atom if we can't resolve its name, rather than returning
	NULL.  Patch from Skip.

	* gobjectmodule.c (pyg_value_from_pyobject): look at the
	fundamental type in this function so we can use a switch statement
	that catches the fundamental types easily, reducing the number of
	type checks.
	(pyg_value_as_pyobject): similar here.  Also handle boolean types
	using patch from Skip.

	* gtk/GDK.py: add extra constants from Skip.

2001-08-23  James Henstridge  <james@daa.com.au>

	* configure.in (build_libglade): add forth argument to
	PKG_CHECK_MODULES call so that configure doesn't die a horrible
	death when it can't find libglade.

2001-08-22  James Henstridge  <james@daa.com.au>

	* gtk/libglade.override: add signal connection function overrieds.

	* pygtk-2.0.pc.in: add a pkg-config data file that contains some
	information about how to link other wrapper modules, and where
	pygtk installs its defs files.

2001-08-21  James Henstridge  <james@daa.com.au>

	* configure.in (build_libglade): add checks for libglade.

	* gtk/libglade*: add the libglade module to the build

	* configure.in: update for autoconf 2.52

	* gtk/gtk.defs: make GtkAccelGroup a GObject rather than a boxed
	type.  remove the gtk_tree_model_get_first function.

2001-07-09  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (initgobject): add a gobject.TYPE_PYOBJECT
	constant for the PyObject boxed typecode.

2001-07-08  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_signal_new): fix argument type for
	return_type.
	(initgobject): register a "PyObject" boxed type with glib..
	(pyg_value_from_pyobject): if the value holds a PY_TYPE_OBJECT,
	set the value directly.
	(pyg_value_as_pyobject): special case the PY_TYPE_OBJECT case
	again.

	* gtk/gdk.defs, gtk/gtk-extrafuncs.defs, gtk/gtk.defs: update to
	new format.

	* pango.defs: update to new format.

	* codegen/codegen.py: various fixes to make it work with the new
	defs format.

	* codegen/argtypes.py (ObjectArg.__init__): take the typecode as
	an argument, and use it to deduce the cast macro (s/_TYPE_/_/).
	(BoxedArg.__init__): take typecode as argument explicitly.
	(EnumArg.__init__): take typecode as argument explicitly.
	(FlagsArg.__init__): take typecode as argument explicitly.
	(ArgMatcher.register_enum): pass typecode argument.
	(ArgMatcher.register_flag): same here.
	(ArgMatcher.register_object): same here.
	(ArgMatcher.register_boxed): same here.

	* codegen/definitions.py (ObjectDef): update parser for new format.
	(InterfaceDef): same here.
	(EnumDef): same here.
	(BoxedDef): same here.
	(MethodDef): same here.
	(FunctionDef): same here.

	* codegen/defsparser.py (DefsParser): add define- prefix to the
	defs we look for.

	* codegen/defsconvert.py (convert): new program to convert v2 defs
	to v3 defs.  It will probably only work with files in the style
	created by the h2def.py program.

2001-07-07  James Henstridge  <james@daa.com.au>

	* codegen/h2def.py (to_upper_str): add function to convert a type
	name to upper case with underscores using the same algorithm as
	gtk+ (with an extra rule to catch cases like GObject.
	(typecode): function to create a typecode like GTK_TYPE_WIDGET
	from the type name.
	(write_obj_defs): output v3 defs.
	(write_enum_defs): output v3 defs.
	(define_func): replace 'G_CONST_RETURN ' to 'const-' for return
	value.
	(write_func): output v3 defs.

	* codegen/scmexpr.py (parse): make the parser ignore single
	quotes, which are used in the new defs format.

2001-07-03  James Henstridge  <james@daa.com.au>

	* gtk/gtk.override (_wrap_gtk_list_store_new): fix up function
	call.
	(_wrap_gtk_tree_store_new): fix up function call.

	* configure.in (AC_OUTPUT): add pygtk-codegen-2.0 to list of files
	to be processed.

	* codegen/codegen.py (register_types): fix typo s/parser/defsparser/

	* gtk/Makefile.am ($(srcdir)/gtk.c): register types from
	pango.defs.

	* gtk/gtk.override (init): import the PangoContext and PangoLayout
	classes from the pango module.

2001-07-02  James Henstridge  <james@daa.com.au>

	* pango.defs: add is-constructor-of arguments to some defs, and
	add fields to some object and boxed defs.

	* pango.override: add more overrides.

	* pango.defs: add more boxed type defs.

	* gtk/gtk.defs (dequeue_resize_handler): remove removed function.

	* codegen/override.py (Overrides.__parse_override): fix bug here.
	string.find returns negative value on error -- not zero.

	* codegen/argtypes.py (GTypeArg.write_param): fix up arg handler.

	* Makefile.am (pangomodule_la_SOURCES): fix up makefile rules to
	build the pango module.

	* pango.override: changes so that it builds properly.

	* configure.in: add line to check for pango and set PANGO_CFLAGS
	and PANGO_LIBS.

	* Makefile.am (pangomodule_la_SOURCES): add rules to build pango
	module.

	* pango.defs:
	* pango.override: 
	* pangomodule.c: new files for the pango wrapper module.

2001-07-01  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_signal_list_names): function to list the
	signals of an object type.  From patch by Skip Montanaro
	(pyg_object_class_list_properties): function to list the
	properties of a GObject.  Also from Skip.

	* gtk/gtk.override (_wrap_gtk_list_store_new): fix to use
	gtk_list_store_newv.
	(_wrap_gtk_tree_store_new): similar fix here.

2001-06-30  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c: remove GdkDevice stuff from this file.

	* gtk/gtk.override: add attribute getters for some GdkDevice
	attributes, and overrides for some GdkDevice methods.
	(_wrap_gdk_event_getattr): change stuff for GdkDevices, as they
	are now GObjects.

	* gtk/gdk.defs (Device): add device boxed type here.

	* gtk/gtk.override (_wrap_gtk_selection_add_targets): fix up to
	use PyGBoxed version of GdkEvent.

	* gtk/gtk-types.c: remove GdkEvent stuff from here.  Also delete
	the commented out GdkDragContext code, as the current GObject
	implementation has the same features now.

	* gtk/gtk.override (_wrap_gdk_event_getattr): implement the
	getattr method for GdkEvents.

	* gtk/gdk.defs (Event): add boxed type here.

	* gobjectmodule.c (initgobject): remove g_type_init() argument.

	* gtk/gdk.defs (Visual): make GdkVisual a boxed.

	* gtk/gtk.override (GdkDragContext.targets): override getter for
	this attribute.
	(_wrap_gtk_list_store_new): comment out most of this function as
	there is no way to construct a GtkListStore without C varargs as
	of the last GtkTree related commit.

	* gtk/gtk-types.c: remove uses of GtkSelectionData.

	* gtk/gtk.override (GtkSelectionData.data): override the data
	attribute for GtkSelectionData types.
	(_wrap_gtk_selection_data_set): override method.

	* gtk/gtk.defs (SelectionData): add GtkSelectionData boxed type
	here.

2001-06-29  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py (write_getattr): add code to allow overriding
	the getter for a single attribute.
	(write_boxed_getattr): same here.

	* codegen/override.py (Overrides): add code to handle
	"override_attr" statements in an overrides file.

	* codegen/codegen.py (write_getattr): add support for overriding
	the complete getattr method for a GObject class.
	(write_boxed_getattr): similar change here.

	* configure.in: require 1.3.7 versions of glib and gtk+.
	(AC_ARG_ENABLE): fix --disable-thread argument.  It was actually
	looking for --disable-numpy, which causes all kinds of weirdness.

	* gtk/gtk.override (_wrap_gdk_cursor_new): constructor for
	GdkCursor that handles both the standard and pixmap cases for
	cursors.

	* gtk/gtk-types.c: remove GdkCursor related stuff from this file.

	* gtk/gdk.defs (Cursor): add boxed type for cursor.
	(cursor_new): mark as constructor.
	(cursor_new_from_pixmap): mark this one as a constructor as well.

2001-06-27  James Henstridge  <james@daa.com.au>

	* codegen/argtypes.py (arg): don't register a boxed handler for
	GtkTextIter here.

	* gtk/gtk.override: add overrides for various GtkTextIter methods.

	* codegen/argtypes.py (BoxedArg.write_param): fix up variable type.

	* gtk/gtk.override (_wrap_gtk_text_iter_copy): implement text iter
	copy function, and ignore the gtk_text_iter_free function (it
	could cause troubles).
	(*): replace function calls using the old GtkTextIter wrapper.

	* gtk/gtk.defs: update defs for GtkTextIter.
	(TextIter): add text iter boxed type here.

	* examples/pygtk-demo/demos/toolbar.py (main): fix up toolbar
	constructor.

	* examples/pygtk-demo/demos/treemodel.py: add on_get_iter()
	method, and put tree view in a scrolled window.

	* gtk/pygtktreemodel.c (pygtk_tree_model_get_iter): add missing
	function to GtkTreeModel implementation.

	* codegen/argtypes.py (arg): remove registrations for `custom'
	boxed types for objects converted to PyGBoxed.

	* gtk/gtk.override: use PyGBoxed calls fro GtkTreeIters.

	* gtk/gtk-types.c: remove GtkTreeIter stuff from here.

	* gtk/gtk.defs (TreeIter): add boxed type here.

2001-06-26  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c: remove traces of GdkColor from this file.

	* gtk/gtk.override: convert occurences of PyGdkColor_* with
	correct PyGBoxed calls.

	* gtk/gdk.defs (Color): add GdkColor boxed type here.

2001-06-25  James Henstridge  <james@daa.com.au>

	* gtk/gtk.override (_wrap_gtk_binding_entry_add_signal): new
	function, based on implementation from Skip.  Some small cleanups
	applied.

	* gtk/gtkobject-support.c: remove dead code for GtkArg handling,
	etc.  (also tidied up references to it in other files).

2001-06-24  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c: removed all traces of GdkFont.

	* gtk/gdk.defs (Font): add boxed type for font.

	* gtk/gtk-types.c: removed all traces of GdkVisual.

	* gtk/gdk.defs (Visual): add boxed type for visual.

	* gtk/gtk-types.c: remove all traces of GtkAccelGroup from this
	file -- GtkAccelGroup is now generated code.

	* gtk/gtk.defs (AccelGroup): add boxed type here.

2001-06-23  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py: generate wrappers for boxed types as well.

	* codegen/defsparser.py (DefsParser.boxed): handle (boxed ...)
	lines.

	* codegen/definitions.py (BoxedDef): add a class for holding a
	Boxed definition.

	* gobjectmodule.c (pyg_signal_new): more fixups to use
	pyg_type_from_object.

	* gtk/gtk.override (_wrap_gtk_accel_group_new): don't use
	PyGtkAccelGroup_New (not sure why I am fixing this -- will change
	soon anyway).
	(_wrap_gtk_tree_store_set_value): use pyg_type_from_object here.
	(_wrap_gtk_list_store_set_value): same here.

	* codegen/argtypes.py (CustomBoxedArg): rename from BoxedArg.
	(BoxedArg): new code for standardised PyGBoxed handling.
	(ArgMatcher.register_custom_boxed): rename from register_boxed
	(ArgMatcher.register_boxed): new function for PyGBoxed types.
	(arg): use ArgMatcher.register_boxed to register GtkAccelGroup.

	* pygobject.h (pyg_boxed_check): change macro to check against the
	typecode, rather than python wrapper type.

2001-06-22  James Henstridge  <james@daa.com.au>

	* codegen/argtypes.py (GTypeArg.write_param): new arg type for
	GType and GtkType args that uses pyg_type_from_object.

	* gobjectmodule.c (pyg_type_from_object): new function to get a
	type code from various types of python objects (currently, integer
	like objects, strings and other objects that have a __gtype__
	attribute).
	(pygobject__init__): use pyg_type_from_object to get the object
	type.
	(pyg_signal_new): same here.

2001-06-21  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_boxed_getattro): allow getattr to work on
	PyGBoxed types (while not overloading tp_getattr).  We fall back
	to tp_getattr if provided by the boxed type.
	(pyg_register_boxed): make sure tp_getattro is set correctly.

	* gtk/gtk-types.c (_pygtk_register_boxed_types): convert
	GtkAccelGroup to a PyGBoxed type.

	* gtk/gtkobject-support.c (pygtk_dict_as_container_args): comment
	out, as container args have been switched to properties now.

2001-06-19  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_value_from_pyobject): handle PyGBoxed
	types.
	(pyg_value_as_pyobject): pass out PyGBoxed types if no custom
	handler is found, rather than straight CObjects.  Will need to do
	something about cases where we want mutable values (ie. don't copy
	the boxed type).

	* configure.in: require glib/gtk+ 1.3.6

2001-06-13  James Henstridge  <james@daa.com.au>

	* gtk/gtk.defs (Dialog): add fields that were missing (pointed out
	by Skip).

	* gtk/gtk.override: various updates to overrides file.

2001-06-12  James Henstridge  <james@daa.com.au>

	* gtk/gtk.override (_wrap_gtk_tree_view_get_path_at_pos): fix bug
	when no keyword arguments are passed in.  Bug found by Skip
	Montanaro.

	* examples/pygtk-demo/pygtk-demo.py (create_list): correct signal
	name.

	* gtk/gtk.defs: update for changes made to gtk.

2001-06-09  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py (write_interface): remove the constructor
	from interfaces.  It is now provided by GInterface.
	(write_source): use pyg_register_interface to register interfaces.

	* gobjectmodule.c (PyGInterface_Type): add a GInterface class that
	is the base of all interfaces.  It prevents subclassing of
	interface objects, etc.

2001-06-08  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_register_boxed): function to register a new
	boxed type ExtensionClass.
	(pyg_boxed_new): new function to create wrapper instances for a
	particular boxed type (given its typecode).

2001-06-07  James Henstridge  <james@daa.com.au>

	* pygobject.h (pyg_boxed_get): add prototypes for a PyGBoxed type
	that will be used for all boxed types in pygtk (well, I can hope
	:)

	* gobjectmodule.c (pyg_register_interface): new function to
	register interfaces with.  Makes sure I don't accidentally give
	the interface a parent class :).  Also adds a __gtype__ class
	attribute similar to GObject classes.  May also make interfaces
	subclasses of GInterface at some point.

2001-05-29  James Henstridge  <james@daa.com.au>

	* codegen/Makefile.am: install the code generator

	* gtk/Makefile.am: install the pygtk.h header

	* Makefile.am: install the pygobject.h header

	* gtk/gdk.defs, gtk/gtk.defs, gtk/gtk-types.c: changes to make
	things compile.

2001-05-28  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py (write_source): add code to reorder object
	definitions if necessary.  To catch ordering problems in .defs
	file.

2001-05-27  James Henstridge  <james@daa.com.au>

	* codegen/codegen.py (write_source): interfaces don't have
	parents.

	* codegen/definitions.py (InterfaceDef.write_defs): don't look for
	(parent ...) sections in interface definitions.

	* gtk/gtk.defs (Editable): interfaces don't have parents.

2001-05-07  James Henstridge  <james@daa.com.au>

	* examples/gobject/signal.py: register new types.

2001-05-06  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pygobject__init__): make the __init__ function
	choose what GType to pass to g_object_new based on the __gtype__
	attribute.
	(pygobject_methods): make __gobject_init__ an alias for
	GObject.__init__.
	(pyg_type_register): new function for registering new GTypes.
	(pyg_type_register): register the type as "module+class" rather
	than "module.class", as the second form is considered bad (would
	like to use the second form though.

	* configure.in: require 1.3.5 versions of glib and gtk+. 

2001-05-05  James Henstridge  <james@daa.com.au>

	* codegen/docgen.py (DocbookDocWriter.output_toc): Produce kind of
	nice docbook documentation.  Example output available at
	http://www.gnome.org/~james/pygtk-docs/.

2001-05-03  James Henstridge  <james@daa.com.au>

	* codegen/docgen.py (DocWriter): handle output of constructor and
	method docs.  Use overrides file so as not to output info about
	methods we don't actually wrap.

	* codegen/Makefile.am (noinst_PYTHON): update file list.

	* codegen/__init__.py (__all__): update module list.

	* codegen/mergedefs.py: same here.

	* codegen/docgen.py (DocWriter.__init__): same here.

	* codegen/codegen.py: import defsparser instead.

	* codegen/defsparser.py: rename from parser.py.

2001-05-01  James Henstridge  <james@daa.com.au>

	* autogen.sh: fix up autogen script to call autoheader

	* gtk/gtk.defs: remove colorsel palette manipulation functions.

2001-05-01  Matthew Wilson  <msw@redhat.com>

	* acinclude.m4 (AM_PATH_PYTHON_JH): only run the AC_PATH_PROGS
	check if we don't have a PYTHON environment variable set

	* autogen.sh: run autoheader

	* acinclude.m4 (AM_PATH_PYTHON_JH): s/AC_PATH_PROG/AC_PATH_PROGS/
	so we check for more than one python interpreter.

2001-04-28  James Henstridge  <james@daa.com.au>

	* Makefile.am, pygtk/Makefile.am: limit the symbols exported by
	the various modules to just their module init function.

	* gtk/Makefile.am (_gtkmodule_la_LDFLAGS): only export the
	init_gtk symbol.

	* examples/pygtk-demo/demos/toolbar.py (main): remove buttons that
	called set_space_size method.

	* gtk/__init__.py: remove __all__ definition.  It causes problems
	with python 2.1.

	* gtk/gtk.override: updated GtkColorSelection method overrides
	(ignore): remove gtk_entry_new from ignore list, as other entry
	constructor is gone.

	* gtk/gtk.defs: updates to make it work with current gtk+

2001-04-21  James Henstridge  <james@daa.com.au>

	* codegen/docgen.py, codegen/docextract.py: start of automatic
	documentation generator.

2001-04-08  James Henstridge  <james@daa.com.au>

	* gtk/gtk.override: same here.

	* gtk/gtk-types.c (_pygtk_register_boxed_types): more fixups

	* gtk/gtkobject-support.c: lots of similar fixups.

	* codegen/argtypes.py (_enum_name): gdk type codes now seem to be
	named GDK_TYPE_... and not GTK_TYPE_GDK_...

2001-04-07  James Henstridge  <james@daa.com.au>

	* gtk/gtk.defs: lots of defs file updates.

2001-04-06  James Henstridge  <james@daa.com.au>

	* codegen/h2def.py: add --onlyobjdefs flag to script.

2001-03-30  James Henstridge  <james@daa.com.au>

	* examples/pygtk-demo/demos/toolbar.py (main): toolbar demo.

	* examples/pygtk-demo/demos/buttonbox.py (main): add button box
	demo.

	* examples/pygtk-demo: moved rewritten testgtk demo here, and make
	changes to account for renamings in gtk.

	* gobjectmodule.c (pygobject_set_property): initialise the GValue
	to { 0, }, so set_property actually works.
	(pygobject_get_property): same here.

	* gtk/gtk.defs: updated enum/flag defs.

	* gtk/gdk.defs: updated enum/flag defs.

	* examples/gobject/signal.py (D.do_my_signal): add small example
	of overriding class closure for a signal introduced from python
	code.

	* codegen/h2def.py: add --onlyenums flag to only output enum defs.

2001-03-27  James Henstridge  <james@daa.com.au>

	* examples/gobject/signal.py: simple example program that adds a
	signal to a class, connects a handler to an instance of that
	class, and finally emits that signal.  Messages are printed by
	both the signal handler and class method closure.

	* gobjectmodule.c (pyg_signal_class_closure_marshal): convert
	dashes in signal name to underscores.  Why does g_siganl_name use
	dashes?
	(pyg_signal_class_closure_marshal): fix off by one error when
	setting up the python argument tuple.  The first element was
	getting left uninitialised.  Signals introduced in python now
	work.

	* gtk/gtk.defs (GtkFileSelection.get_filename): return value is
	const.

	* gtk/gtk.override (_wrap_gtk_list_store_set_value): change name.
	(_wrap_gtk_tree_store_insert): change name.

	* gtk/gtk.defs (GtkListStore.set_value): change from set_cell to
	set_value.
	(GtkListStore.set_value): same here.

	* gobjectmodule.c (pyg_signal_class_closure_get): new function to
	get the closure used as the `class closure' for signals.  We only
	need one, as we can get all the information we need from the
	invocation hint.
	(pyg_signal_new): new function to create new signals.  Doesn't
	work right yet.

2001-03-26  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pygobject__class_init__): add some comments
	about creating new GTypes here.

	* gobjectmodule.c: add type info functions to module.

2001-03-24  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c (pygtk_text_iter_is_end): s/is_last/is_end/

	* gobjectmodule.c (pyg_closure_new):
	s/add_fnotify/add_finalize_notifier/

	* gtk/gdk.defs, gtk/gtk.defs, gtk/gtk.override: various changes to
	make it compile again.

2001-03-18  James Henstridge  <james@daa.com.au>

	* gtk/pygtktreemodel.c (pygtk_tree_model_class_init): signals are
	now created in the gtktreemodel.c, so we don't need to.

	* gtk/gtk.defs (Adjustment): make parent GtkObject, as GtkData is
	gone.
	(GtkText): remove from binding.

	* codegen/codegen.py (write_source): pass in the get_type function
	when registering classes.
	(gettypetmpl): remove template.
	(write_class): remove get_type method generator.  Handled by __gtype__ 

	* gobjectmodule.c (initgobject): add argument to g_type_init call.
	(pyg_value_from_pyobject): use G_VALUE_HOLDS_* rather than
	G_IS_VALUE_*.
	(pyg_value_as_pyobject): same here.
	(pygobject_register_class): add an argument that takes the
	get_type function for the GObject.  This is used to add a
	__gtype__ attribute to the class (the get_type function is not
	actually called until __gtype__ is accessed).

2001-02-03  James Henstridge  <james@daa.com.au>

	* gtk/pygtktreemodel.c (*): s/tree_node/user_data/

	* gtk/gtk-types.c (pygtk_text_iter_forward_to_line_end): rename
	function.
	(pygtk_tree_iter_compare): fix compare function.
	(pygtk_tree_iter_hash): fix hash function.

2000-12-16  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c (pygtk_text_iter_forward_to_delimiters): rename
	function.

2000-12-14  James Henstridge  <james@daa.com.au>

	* examples/testgtk/demos/menu.py (main): destroy window on
	button's clicked signal rather than destroy signal.

	* gtk/gtk.defs: remove gtk_object_default_construct and
	gtk_object_constructed.

	* gobjectmodule.c: change over to new notification functions.

	* gtk/gtk-types.c: rename functions.

	* gobjectmodule.c (pygobject_get_property):
	(pygobject_set_property): change function names to match changes
	in glib.
	(...connect|emit): use g_signal_parse_name instead of
	g_signal_lookup, so we can parse the detail out of the signal name
	string.

2000-12-07  James Henstridge  <james@daa.com.au>

	* examples/testgtk/demos/treemodel.py (MyTreeModel.on_get_path):
	fix small typo.

2000-12-06  James Henstridge  <james@daa.com.au>

	* gtk/pygtktreemodel.c: fix PyObject_CallMethod calls to add
	parentheses around argument type list.
	(pygtk_tree_model_get_flags): decref py_ret -- not Py_None
	(pygtk_tree_model_get_n_columns): same here.
	(pygtk_tree_model_get_column_type): same here.
	(*): conditionally print out debugging messages.

	* examples/testgtk/demos/treemodel.py: simple test of
	PyGtkTreeModel.

	* gtk/pygtktreemodel.c: set iter->tree_node to NULL when returning
	FALSE, as GTK sometimes ignores the return value :(

	* codegen/codegen.py (interfacetypetmpl): don't set the interface
	type as having an instance dictionary.
	(write_interface): actually use interfacetypetmpl when writing out
	the interface type def.

	* codegen/argtypes.py (_conv_special_cases): add a special case
	for the underscore version of PyGtkTreeModel.

	* gtk/gtk.override: include pygtktreemodel.h

	* gtk/__init__.py: don't error out if we can't import ltihooks.

	* gtk/gtk-extrafuncs.defs: include defs for PyGtkTreeModel type.

	* gtk/Makefile.am (_gtkmodule_la_SOURCES): compile PyGtkTreeModel
	into pygtk.

	* gtk/pygtktreemodel.c: fix errors.

	* gtk/pygtktreemodel.[ch]: check in initial leaky implementation
	of the GtkTreeModel for use from python.  Can't test it right now
	because gtk head is broken.

2000-11-29  James Henstridge  <james@daa.com.au>

	* configure.in (enable_thread): update checks for glib/gtk+ to
	require at least 1.3.2.

	* codegen/h2def.py (write_enum_defs): Havoc's enum handling patch.

	* TODO: add todo item about creating real GObject subclasses, and
	add some info on the GInterface stuff.

	* examples/testgtk/testgtk.py (load_module): fix bug where
	mod.__file__ is the .pyc file rather than the .py file.

	* gtk/gtk.defs: change parent type for some classes to GtkDialog
	to match changes in gtk+.

	* gtk/Makefile.am (pysitedir, pyexecdir): fix up directory names.
	It wasn't installing these files in a gtk/ subdirectory :(

2000-11-16  James Henstridge  <james@daa.com.au>

	* gtk/gtk.defs: make changes to make GtkEditable into an
	interface.

	* examples/testgtk/demos/__init__.py (demos): create the list of
	example modules on the fly, rather than having them hard coded
	into a list.

2000-11-11  James Henstridge  <james@daa.com.au>

	* examples/testgtk/testgtk.py: start of a revamped testgtk
	example, similar to the new one in gtk.

	* gtk/gtk-types.c (PyGdkEvent_New): guard against a NULL axes
	member in the GdkEvent structure.

	* gtk/gtk.override (_wrap_gtk_tree_view_get_path_at_pos):
	implementation of this function.

	* codegen/argtypes.py (GtkTreePathArg): add an arg matcher for
	GtkTreePath objects, that represents them as tuples of integers.

	* gtk/gtk-types.c (_pygtk_register_boxed_types): add marshalers
	for GtkTreeIter and GtkTreePath so they can be used from signal
	handlers now.

	* gtk/gtk.override, gtk/gtk.defs: make name change for
	GtkTreeStore constructor.

2000-11-10  James Henstridge  <james@daa.com.au>

	* gtk/gtk.override: ignore the gtk_tree_view_new function, so
	gtk_tree_view_new_with_model gets chosen as the constructor.
	(_wrap_gtk_tree_store_...): fix up the iterator creation methods
	so that they can take NULL arguments.
	(_wrap_gtk_tree_view_column_new): new implementation of this
	constructor.  Map keyword arguments to column attributes.

	* gtk/gtk.defs (gtk_tree_view_new_with_model, GtkTreeView.set_model):
	Allow NULL to be passed in as the model argument.

	* gtk/gtk.override: add gtk_tree_model_get_{iter,path,value}
	functions.
	(_wrap_gtk_list_store_*): add constructor and set_cell
	implementations, and impls of the insertion functions that return
	the new GtkTreeIter, rather than treating it as an out argument.
	(_wrap_gtk_list_store_set_cell): allow string versions of type
	codes for convenience.
	(_wrap_gtk_list_store_insert): directly access column_headers
	structure member as the get_column_type method doesn't exist.
	(_wrap_gtk_tree_store_*): constructor, set_cell and tree iter
	creation methods added.  Ignore [gs]et{,v}.

2000-11-09  James Henstridge  <james@daa.com.au>

	* gtk/gtk.defs (ListStore, TreeStore): these implement the
	GtkTreeModel interface.
	(TreeModel): add interface definition here.

	* codegen/codegen.py (register_types): register interfaces into
	the argument type matcher.
	(write_source): write out interface source.  Register interface
	class types before object types, as they may be used by objects.
	(write_source): set multiple base classes if an object implements
	an interface.
	(write_interface): function to write out the code for an
	interface.  It is really a simplified version of write_class.

	* codegen/parser.py (DefsParser.interface): handle interface
	clauses.

	* codegen/definitions.py (InterfaceDef): add a class for interface
	definitions.
	(ObjectDef): add support for an implements keyword.

	* codegen/codegen.py (write_source): change code generator to pass
	bases in as a tuple rather than a single PyExtensionClass
	structure.

	* pygobject.h: change prototype.

	* gobjectmodule.c (pygobject_register_class): allow for registerin
	a type with multiple base classes.

2000-11-08  James Henstridge  <james@daa.com.au>

	* codegen/argtypes.py (_conv_special_cases): add a special case
	for converting GObject -> G_OBJECT.

	* gobjectmodule.c (pygobject_connect*): g_signal_connect_closure
	renaming.

	* codegen/argtypes.py (arg): add GtkTreeIter support.

	* gtk/gtk-types.c, gtk/pygtk.h, gtk/pygtk-private.h: add a
	skeleton for the GtkTreeIter wrapper.

2000-11-04  James Henstridge  <james@daa.com.au>

	* TODO: todo file with a few items needed for the gtk 2.0 based
	pygtk.

	* gtk/gtk.defs: add new GtkTree widget definitions.
	(GtkTreeViewColumn.get_justification): comment out as it doesn't
	exist.

2000-11-02  James Henstridge  <james@daa.com.au>

	* gtk/gtk-types.c (_pygtk_register_boxed_types): small changes to
	handle GtkTextIter objects as arguments to signals, now that Havoc
	made the appropriate changes in gtk.

2000-10-30  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pyg_closure_marshal): reorder parameters to
	make it work with latest glib.
	(pygobject_connect*): pass 0 for the new detail parameter.  Don't
	know what it is for.
	(pygobject_emit): pass 0 for detail parameter.
	(pygobject_stop_emission): pass 0 for detail parameter.

	* gtk/gtkmodule.c (init_gtk): init as module gtk._gtk.  Using just
	_gtk doesn't seem to work with python 2.0

2000-10-29  James Henstridge  <james@james.daa.com.au>

	* examples/ide/gtkcons.py: small changes to make example run.

	* gtk/gtk-types.c: add GtkTextIter.forward_search implementation.

	* gtk/gtk.override: more override functions.

	* gtk/gtkobject-support.c: remove some of the unused functions from
	this file.

2000-10-28  James Henstridge  <james@james.daa.com.au>

	* gtk/gtk.override: override the functions used to initialise
	GtkTextIter objects so that they return the iterator rather than
	setting up an static GtkTextIter structure.

	* gtk/gtk.defs (TextMark): add missing GtkTextMark object.  Don't
	know why h2defs missed it.
	("gtk-extrafuncs.defs"): include gtk-extrafuncs.defs.

	* codegen/argtypes.py: add GdkDevice and GtkTextIter to list of
	recognised boxed types.

	* gtk/gtk-types.c: add skeleton implementation of GtkTextIter.

	* gtk/pygtk.h, gtk/pygtk-private.h: add prototypes for GtkTextIter
	wrapper.

	* gtk/gtk.override: ref and sink GtkObjects which have their
	constructors listed in the overrides file.  This should get rid of
	the last few warnings on exit related to reference counting.

	* codegen/codegen.py: use the keyword module to check for method
	and argument names that conflict with the python keywords.  By
	using this module, we shouldn't have problems with new keywords in
	future versions of python.

2000-10-27  James Henstridge  <james@james.daa.com.au>

	* gobjectmodule.c (pygobject_emit): support for emiting signals on
	GObjects from python.
	
	* codegen/codegen.py (write_constructor): sink GtkObjects.  This
	prevents us losing our reference to the object if it is sunk.

	* codegen/argtypes.py (ArgMatcher.object_is_a): function to check
	if one object type is another type.

	* codegen/codegen.py (register_types): pass the parent type when
	registering a new GObject type.

	* gtk/gtk-types.c (_pygtk_register_boxed_types): register
	marshalers for the various boxed types, so that they work as
	expected inside the signal handlers.

	* gobjectmodule.c (pygobject_repr): small change to match style of
	other repr functions in python.

	* gtk/gtkmodule.c (init_gtk): only call g_thread_init() if pygtk
	threading support is enabled.

	* configure.in (enable_thread): add configure checks so that
	threading support can be disabled even if python was compiled with
	it.  It defaults to off for now because GSignal has some mutex
	deadlocks at the moment.

2000-10-26  James Henstridge  <james@daa.com.au>

	* gtk/gtkmodule.c (init_gtk): remove gtk_signal_set_funcs call.

	* gobjectmodule.c (pyg_value_from_pyobject): default to using
	CObject for unknown boxed values and pointer values.
	(pyg_value_as_pyobject): same here.
	(pygobject_connect*): Add signal connection functions.

	* gobjectmodule.c (pyg_boxed_register): new function for
	registering functions to marshal boxed GValues to/from their
	python wrappers.
	(pyg_value_from_pyobject): add boxed support.
	(pyg_value_as_pyobject): add boxed support.
	(pyg_closure_new): new function to create a python GClosure.
	(pyg_closure_destroy): cleanup function for a PyGClosure.
	(pyg_closure_marshal): marshaler for PyGClosure.
	(pyg_value_as_pyobject): add const to GValue argument.

	* pygobject.h: export a pyg_boxed_register function to register
	new boxed types for use with pyg_value_from_pyobject and
	pyg_value_as_pyobject.

2000-10-25  James Henstridge  <james@daa.com.au>

	* gtk/gtkmodule.c (init_gtk): set the default python character
	encoding to UTF-8.

	* gtk/gtk.defs: more setting constructors and default arguments.

	* gtk/gtk.defs: more updates.

	* gobjectmodule.c (pygobject_getattro): return NULL on error.
	This fixes the segfault :)

	* gtk/gtk.defs (Bin): add a field just to test pygobject_getattro.
	It isn't working quite properly at the moment though :(

	* gobjectmodule.c (check_bases): class->bases is a tuple -- not a
	list.
	(check_bases): check if class->bases != NULL before using it :(

	* gtk/gtk.defs: comment out new tree widget stuff at hp and owen's
	suggestion.

	* gtk/__init__.py: import gobject here as well to prevent weirdness.

	* gtk/gtk.defs: more updates, adding (is-constructor-of ...) and
	(default "...") clauses.

	* gtk/gtk.override (_wrap_gtk_button_new): handle the accel_group
	argument, and try to create a stock button if possible.

	* gtk/gtk.defs, gtk/gdk.defs: various small fixes.

	* gtk/gtk.override: fix lots of overrides to work with gtk 2.0

2000-10-24  James Henstridge  <james@daa.com.au>

	* gtk/gdk.defs: remove unneeded gdk_input_* functions.

	* gtk/gtk.override: small updates.

	* gtk/gtk.defs: update with defs from all of gtk.

	* codegen/h2def.py (find_enum_defs): small fix to enums parsing.

	* gtk/gtk-types.c: add support for GdkDevice and convert function
	names to lowercase.

	* gtk/gtkmodule.c: add GdkDevice stuff to PyGtk_API.

	* gtk/pygtk.h, gtk/pygtk-private.h: add GdkDevice to list of boxed
	types.

2000-10-23  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c: don't set the getattr method on objects if it
	isn't already set.  Also, install a getattro handler that will
	perform the usual method/attribute lookup and then call the
	getattr method for all base classes to allow specifying of class
	specific attributes

2000-07-03  James Henstridge  <james@daa.com.au>

	* gtk/gtkmodule.c (init_gtk): actually initialise the gobject stuff
	for gtk._gtk.

	* pygobject.h (pygobject_check): call the correct ExtensionClass
	check macro.
	(init_pygobject): small fixup here.

	* codegen/codegen.py (noconstructor): handle the null constructor
	better.
	(consttmpl): use pygobject_register_wrapper.
	(getattrtmpl): make the getattr function raise an exception on
	unhandled attributes.  I will use a tp_getattro function to bind
	all the getattr functions of base classes together.

	* gtk/gtk-types.c (_pygtk_register_boxed_types): commented out the
	object implementations for types that have been converted to
	GObjects.

	* gtk/gtkobject-support.c: commented out some of this code to get
	it to compile again.  Also converted some functions over to GObject.

	* codegen/argtypes.py (EnumArg,FlagsArg): use the version from gobject.

	* gtk/gtkmodule.c: update 

	* gtk/gtk.override: fix up the overrides for the new gdk.defs stuff.
	(GTK_TYPE_GDK_*): add some dummy defines to make things compile until
	the gdk-pixbuf enums are added to 

	* codegen/argtypes.py (ObjectArg.write_param): use PyGObject
	rather than PyGtk_Object.

	* pygobject.h (pygobject_check): add check function.  Just a wrapper
	around ExtensionClassSubclassInstance.

	* codegen/codegen.py: updated to use PyGObject rather than
	PyGtk_Object.

	* gtk/gtk.defs: removed most of the stuff here so I can test out
	the gdk stuff.

	* gtk/gdk.defs: updated to gdk-1.3.  A lot of stuff in here.

	* codegen/h2def.py (verbose): remove the special case for GtkObject.
	(find_obj_defs): amend regexes so that GObject is considered a valid
	object name.

2000-06-29  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c: use pygobject.h.
	(pygobject_[gs]et_param): free the GValue afterwards so as not to
	leak memory.

	* pygobject.h: header for modules that want to use GObject.

2000-06-28  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c: add get_data / set_data methods.
	Add get_param / set_param methods.
	(pygobject__init__): simple init function for GObjects.  Doesn't
	handle params yet.
	(pygobject_register_wrapper): don't ref the GObject -- it isn't like
	GtkObjects where we ref/sink them.
	(pygobject_queue_param_changed): add queue_param_changed method.

2000-06-27  James Henstridge  <james@daa.com.au>

	* gobjectmodule.c (pygobject_dealloc): start of gobject wrapper.

2000-06-19  Frederic Gobry  <frederic.gobry@epfl.ch>

	* gdkimlibmodule.c: do an actual call to create_from_array instead
	of create_from_data, and fixed broken test on alpha channel

2000-04-15  James Henstridge  <james@daa.com.au>

	* gtkmodule.c: move gtk_set_locale here, and set LC_NUMERIC back to
	"C" after call.  Python's numeric locale should be fixed on C.

2000-04-07  James Henstridge  <james@daa.com.au>

	* NEWS: added news items.

	* pygtk.spec, configure.in: updated version number.

	* configure.in (enable_numpy): added --disable-numpy argument that
	disables numeric python support even if numpy is found.

	* gtkmodule.c (PyGdkWindow_{Pointer,Keyboard}{Grab,Ungrab}): new
	GdkWindow methods.

	* gtk.py (rc_reparse_all): fix spelling mistake.
	(GtkTreeItem.__getattr__): fix bug reported by Aaron Digulla.

	* generate/gtklists.defs (gtk_clist_get_selectable): fix bug in
	return type.

2000-04-06  James Henstridge  <james@daa.com.au>

	* (lots of files): switch over to using libtool and automake-1.4a.

2000-03-13  James Henstridge  <james@daa.com.au>

	* pyglade/__init__.py: remove python-1.4 ni stuff, and put in a
	warning message that you should think of switching over to libglade.

	* pygtk.spec: incremented version number.  Code gtk+ dependency into
	spec file.  Made auxillary packages depend on the pygtk package of
	the same version.

	* configure.in: incremented version number.  Incremented minimum
	required GTK+ so that when threading is compiled in we don't get
	problems caused by using old buggy versions of GTK+.

	* gtkmodule.c (PyGdkWindow_PropertyChange): fixed the 32 bit data
	part of the case statement correctly this time :)

2000-03-08  James Henstridge  <james@daa.com.au>

	* gtkmodule.c (PyGdkWindow_PropertyChange): fixed up problem in
	property_change method that could cause a crash if data of
	size 16 or 32 was set.
	(PyGtkStyleHelper_SetItem): added missing return that could cause
	a fallthrough to the g_assert_not_reached() call when setting a
	bg_pixmap element on a GtkStyle.

2000-03-03  James Henstridge  <james@daa.com.au>

	The following is from Paul Clifford <paul@plasma.demon.co.uk>

	* libglade.py (GladeXML.signal_autoconnect): pass all the extra
	arguments to autoconnect.

	* libglademodule.c (connect_many): don't exit if the handler is
	a tuple instead of a function.

	The following fixes are from John Ehresman <jpe@archaeopteryx.com>
	
	* gtk.py (GtkWidget.set_scroll_adjustments): return the value to
	user.

	* gtkmodule.c (GtkArg_AsPyObject): check if GtkObject is not NULL.
	(_wrap_gtk_clist_get_pixmap, _gtk_clist_get_pixtext): check that
	returned pixmap is not NULL.
	(_wrap_gtk_ctree_node_get_pixmap, _gtk_ctree_node_get_pixtext): check
	that returned pixmap is not NULL.

	* gtk.py (GtkToolbar): wrap callbacks when inserting a toolbar item.
	(GtkNotebook.set_menu_label_text): fixed typo
	(GtkTreeItem.__getattr__): wrap subtree attribute.

2000-03-01  Frederic Gobry  <gobry@lith.di.epfl.ch>

	* gtkmodule.c (PyGtkSelectionData_GetAttr): added .length field,
	so that it is possible to check for invalid selection during
	copy/paste.
	
2000-02-23  Frederic Gobry  <gobry@lith.di.epfl.ch>
	
	* gtkmodule (GtkRet_FromPyObject): added missing break in switch.

2000-02-21  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkTable.resize): added missing function.  Patch from
	wrobell <wrobell@posexperts.com.pl>.

	* generate/gtkcontainers.defs (gtk_table_resize): added missing
	function.

2000-02-20  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkCList.get_[hv]adjustment): apply fix from Martin
	Preishuber.

2000-02-16  James Henstridge  <james@daa.com.au>

	* configure.in, pygtk.spec: updated version to 0.6.4

2000-01-27 Elliot Lee <sopwith@redhat.com>
	* gtk.py: s/sel/self/ in GtkSpinButton.get_adjustment()

2000-01-26  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkObject.__hash__): use C level GtkObject for hash
	function.
	(GtkAccelGroup.__cmp__): use C level object for comparisons.
	(GtkAccelGroup.__hash__): use C level object for hashing.

	* gtkmodule.c: added hash functions for many object types.

2000-01-25  Kelly Lynn Martin  <kelly@poverty.bloomington.in.us>

	* gtk.py (gdk_beep): new wrapper
	* gtkmodule.c (_wrap_gdk_beep): new implementation

2000-01-21  Matt Wilson  <msw@redhat.com>

	* generate/generate.py: add a hack to allow a null-ok flag on the
	return type.  This lets us create wrappers which return None if
	the C function returns NULL.

	* generate/gtklists.defs (gtk_ctree_node_nth): return None when
	gtk_ctree_node_nth returns NULL.

2000-01-20  Matt Wilson  <msw@redhat.com>

	* gtkmodule.c (PyGtk_New): disable object sinking for now, until
	we rework the .def file and generation routines to know which
	functions are creators.

2000-01-20  Matt Wilson  <msw@redhat.com>

	* gtk.py (GtkCList.row_move): s/soure_row/source_row/g typo

2000-01-17  Matt Wilson  <msw@redhat.com>

	* gtkmodule.c: following changes from ChiDeok Hwang
	<cdhwang@sr.hei.co.kr>

	* gtkmodule.c (_wrap_gtk_adjustment_set_all): parse the 6 optional
	arguments.

	* gtkmodule.c (_wrap_gtk_widget_draw,
	_wrap_gtk_widget_size_allocate, _wrap_gtk_widget_intersect,
	_wrap_gdk_color_alloc): fix PyArg_ParseTuple format strings to use
	shorts instead of ints where necessary.

	* gtkmodule.c (_wrap_gtk_toolbar_insert_item): check to make sure
	callback isn't Py_None before Py_INCREF()

	* gtkmodule.c (_wrap_gtk_toolbar_insert_item,
	_wrap_gtk_toolbar_append_item, _wrap_gtk_toolbar_prepend_item):
	fix broken ParseTuple specification strings.

	* gtkmodule.c (_wrap_gtk_clist_get_selection): use
	GPOINTER_TO_UINT to get row.
	
2000-01-17  Matt Wilson  <msw@redhat.com>

	* libglademodule.c (connect_one, _wrap_glade_xml_signal_connect):
	don't INCREF objects passed into Py_BuildValue as they are
	INCREF'ed for you automatically.  Pass new PyObjects in with 'N'
	to consume the reference.

	* gtkmodule.c (PyGtk_New): sink the object upon creation.  We
	don't want floating GtkObjects.

	* gtkmodule.c: general cleanups, testing for success of PyObject
	creation, reference count fixes.  Several functions used
	Py_BuildValue with 'O' format strings.  This increfs the object
	passed into the tuple where.  When using Py*New in Py_BuildValue,
	use 'N' in the format string to consume the reference of the new
	object.

2000-01-05  Matt Wilson  <msw@redhat.com>

	* gdkimlibmodule.c, gtkglmodule.c, gtkmodule.c: Patch from ChiDeok
	Hwang <cdhwang@sr.hei.co.kr> to decref PyObjects retrieved by
	PySequence_GetItem.

1999-12-18  Matt Wilson  <msw@redhat.com>

	* gtkmodule.c (_wrap_gtk_clist_get_rows): removed function

	* generate/gtklists.defs (GtkCList): add field for rows

1999-12-16  Matt Wilson  <msw@redhat.com>

	* gtk.py (GtkCList.__getattr__): oops - left out the _gtk. part

1999-12-15  Matt Wilson  <msw@redhat.com>

	* gtk.py (GdkColor): added a function to create a GdkColor
	object.  You should use this if you don't want to allocate a color
	before passing it into functions that don't need an allocated
	color.

	* gtkmodule.c (_wrap_gdk_color_new, PyGdkColor_GetAttr): add a
	functions to create and modify a GdkColor object.

1999-12-15  Matt Wilson  <msw@redhat.com>

	* gtk.py (GtkCList.__getattr__): added 'rows' attribute.

	* gtkmodule.c (_wrap_gtk_clist_get_rows): added wrapper to get
	number of rows in a clist

	* gtkmodule.c (PyGtkStyle_New): If the GtkStyle passed in is NULL,
	return a None object.  This is a bit of a hack, but without it
	you'll fail NULL assertions when you attach to the style_set
	signal.

	* generate/gtkmisc.defs (gtk_pixmap_new): mask is null-ok.

	* generate/gtklists.defs (gtk_clist_set_pixmap): likewise.

	* pygtk.h (PyGdkBitmap_Check): define PyGdkBitmap_Check to be the
	same as PyGdkWindow_Check.

	* gtkmodule.c: -Wall cleanups

	* libglademodule.c (init_libglade): removed unused variable

	* gdkimlibmodule.c (_wrap_gdk_imlib_init): s/static/static int/

1999-12-12  Matt Wilson  <msw@redhat.com>

	* generate/generate.py (FunctionDefsParser.define_func): added new
	string_or_null type to check for NULL when passing strings back

1999-09-30  James Henstridge  <james@daa.com.au>

	* pygtk.spec: updated spec file.
	
	* NEWS: added news items
	
	* configure.in: updated version number.

	* libglademodule.c: don't segfault when a widget name does not exist.

1999-09-28  James Henstridge  <james@daa.com.au>

	* libglade.py: enable gnome functionality if it is available.

	* gtk.py (GtkEditable.__getattr__): added accessors to GtkEditable.

	* generate/gtkedit.defs (GtkEditable): added accessors for some
	fields of the GtkEditable.

	* gtkmodule.c: added _raise, lower and input_get_pointer methods to
	the GdkWindow wrapper.

	* gtk.py (GtkAspectFrame.__init__): fixed prototype for GtkAspectFrame

1999-08-25  Matt Wilson  <msw@redhat.com>

	* gtkmodule.c (_wrap_gdk_char_width): added wrapper for gdk_char_width
	* gtk.py (gdk_char_width): added wrapper for gdk_char_width

1999-08-09  James Henstridge  <james@daa.com.au>

	* pygtk.spec: updated spec file, and added subpackages pygtk-glarea
	and pygtk-libglade.  Also incremented version number.

1999-08-08  James Henstridge  <james@daa.com.au>

	* NEWS: updated news file.

	* configure.in: increased version number to 0.6.2.

	* gdkimlibmodule.c (_wrap_gdk_imlib_image_get_array): make sure that
	the image data is not freed while the returned array is in use, so
	that we don't get into an inconsistent state.

	* gtk.py: added gdkrgb functions to this file.

	* gtkmodule.c: added the gdkrgb functions for drawing rgb and greyscale
	images.
	(gdk_draw_array): a new function that will draw a numpy array to a
	drawable with gdkrgb.  It is written so that it can handle slicing
	on the first two axes -- it does not handle non contiguous data on
	the third axis.

1999-08-04  Matt Wilson  <msw@redhat.com>

	* GdkImlib.py (create_image_from_xpm): new wrapper for creating
	imlib images from xpm data
	
	* gdkimlibmodule.c (_wrap_gdk_imlib_create_image_from_xpm): New
	wrapper

1999-08-03  James Henstridge  <james@daa.com.au>

	* description.py (GdkWindow): added descriptions of the new routines.

	* gtkmodule.c (GdkWindow.property_{get,change,delete}): new functions
	for manipulating the properties on a window.
	
	* gtk.py (_window_foreign_new, _root_window): added wrappers for
	the new functions.

	* gtkmodule.c: added xid attribute to GdkWindow's, and added functions
	gdk_window_foreign_new and gdk_get_root_win.  The second function is
	simply a wrapper that returns a GdkWindow for the root window.

1999-08-02  James Henstridge  <james@daa.com.au>

	* libglade.py: new file that wraps the _libglade module.

	* libglademodule.c: handle connecting to another object correctly.

	* gtkmodule.c: added support for passing an object for
	gtk_signal_connect_object type behaviour.
	(_wrap_gtk_signal_connect_object)
	(_wrap_gtk_signal_connect_object_after): new wrappers.

	* gtk.py (idle_add, timeout_add, quit_add): pass extra arguments to
	the callback.

	* libglademodule.c (_wrap_glade_xml_signal_connect): fixed a small
	problem with reference counting here.

	* gtkmodule.c: added support for passing arguments to timeout, quit
	and idle functions.

1999-08-01  James Henstridge  <james@daa.com.au>

	* pyglade/build.py (optionmenu_new): a small fix from David Cole.

	* configure.in: added tests to see if libglade is installed.

	* libglademodule.c: the rest of the libglade module

	* generate/libglade.defs: a .defs file for libglade.

1999-07-31  James Henstridge  <james@daa.com.au>

	* gtkmodule.c: put in Paul Fisher's enhancements to the threading
	code.  It should now work better with multiple threads calling
	GTK+ routines (remember to use threads_enter/threads_leave), and
	doesn't reintroduce the global interpreter lock problems that
	Duncan's original code worked around.

	* configure.in: added a check for the numpy header.
	
	* GdkImlib.py: added wrappers for the numpy routines.

	* gdkimlibmodule.c: added Travis Oliphant's Numeric python stuff to
	the imlib module.

1999-07-20  Matt Wilson  <msw@redhat.com>

	* gtk.py (gdk_flush): new wrapper
	* gtkmodule.c (_wrap_gdk_flush): new implementation

1999-07-19  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkAdjustment.set_all): a wrapper for the new function.

	* gtkmodule.c (_wrap_gtk_adjustment_set_all): simple wrapper for
	setting values on an adjustment.

	* gtk.py (GtkCList.get_column_width): a wrapper for this new function.

	* gtkmodule.c (_wrap_gtk_clist_get_column_width): a function to get
	the column width for a column in a clist.

	* gtk.py (_filtprops): convert GtkAccelGroup and GdkImlibImage types
	back to the C equivalents.  This makes adding GnomeCanvasImage items
	to the GnomeCanvas easier.
	(GtkCTree.node_get_selectable): added wrapper function.

1999-07-18  James Henstridge  <james@daa.com.au>

	* gtkmodule.c (_wrap_gdk_threads_enter): don't use PyGTK_BLOCK_THREADS,
	since it should only be called outside the gtk main loop.  Instead
	use Py_BEGIN_ALLOW_THREADS.

	* examples/gl/*: new examples of use of gtkgl.
	
	* gtkgl.py: renamed from GtkGL.py.
	
	* gtkglmodule.c (_wrap_gtk_gl_area_new, _wrap_gtk_gl_area_share_new):
	fixed small typo.

	* GtkGL.py: added constants.

1999-07-15  James Henstridge  <james@daa.com.au>

	* configure.in, Makefile.am: added tests for gtkglarea.
	
	* GtkGL.py: python wrapper for the GtkGLArea widget, and a few extra
	functions for use with the widget.

	* generate/gtkgl.defs, gtkglmodule.c: added wrapper for gtkglarea.

1999-07-14  James Henstridge  <james@daa.com.au>

	* gdkimlibmodule.c: modified to use the pygdkimlib.h header.

	* pygdkimlib.h: new file similar to pygtk.h, but for _gdkimlib module.

	* gdkimlibmodule.c: modified to use the pygtk.h header.

	* gtkmodule.c: modified file to use the pygtk.h header, and set
	up the _gtk._PyGtk_API object correctly.

	* pygtk.h: a new file with a similar use to the arrayobject.h in
	numeric python.  I will convert over to using this in pygtk and
	gnome-python.

1999-07-13  James Henstridge  <james@daa.com.au>

	* gtkmodule.c (_wrap_gdk_threads_enter): unblock threads when waiting
	for the GDK lock.  This allows other threads to unlock it, and should
	prevent some deadlocks.

	* gtkmodule.c (gtk_main_iteration, gtk_events_pending): removed code
	to unlock gtk thread -- Owen fixed this properly in gtk.

1999-07-12  James Henstridge  <james@daa.com.au>

	* gtk.py: fixed a few bugs reported by Ville Lauriki.

	* generate/gtkmenus.defs (gtk_item_factory_add_foreign): fix a typo.

	* gtkmodule.c: fixed problems if gdk_atom_name returns NULL.
	
	(_wrap_gtk_main_iteration, _wrap_gtk_events_pending): added
	GDK_THREADS_LEAVE() and GDK_THREADS_ENTER() calls round these
	functions.  Without this, it deadlocks if threads are enabled.

	* generate/gtklists.defs (GtkTreeItem): added wrapper for
	treeitem->subtree attribute.

	* pyglade/build.py (text_new): small fix.

1999-05-19  James Henstridge  <james@daa.com.au>

	* NEWS: added news about changes in this version.

	* configure.in, pygtk.spec: updated version number to 0.6.1.

1999-05-13  James Henstridge  <james@daa.com.au>

	* gtkmodule.c (PyGtk_item_factory_cb): forgot to wrap the function
	call in PyGTK_{,UN}BLOCK_THREADS -- this was causing seg faults
	for people with threading built into their python.
	(PyGtk_MenuPosition): similar fix.

1999-04-25  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkWidget.get_allocation): a wrapper for the new function.

	* gtkmodule.c: added a routine for getting the allocation of a widget.

1999-04-22  James Henstridge  <james@daa.com.au>

	* NEWS: added a summary of the new features.

	* pygtk.spec: upped version number.

	* configure.in: upped version number to 0.6.0.  I think thread support
	is a big enough feature to bump it up to 0.6.

1999-04-21  James Henstridge  <james@daa.com.au>

	* gtk.py (create_bitmap_from_data): added new wrapper.

	* gtkmodule.c: added gdk_bitmap_create_from_data function.  Also
	export PyGtk_BlockThreads and PyGtk_UnblockThreads through the
	_private dictionary, so they can be used from within other modules
	(gnome-python in particular).

1999-04-20  James Henstridge  <james@daa.com.au>

	* pygtk.spec: updated package version number.

	* configure.in: added a check for the python thread module.  If it
	is found, then also link _gtkmodule to the gthread library.
	Incremented minimum GTK version to 1.2.1.
	Incremented version to 0.5.13.

	* gtkmodule.c: call g_thread_init if python was built with thread
	support.  This is required to turn thread support on inside gdk/gtk.

	* gtk.py: added new functions.
	(GtkList.insert_items): this function wasn't looking at the internal
	GtkObject for the children to insert, so would fail.

	* generate/gtkbase.defs (gtk_widget_accelerators_locked): new func.

	* generate/gtkmenus.defs (gtk_item_factory_add_foreign): new func.
	(gtk_menu_get_accel_group): new func.
	(gtk_menu_reorder_child): new func.
	(gtk_menu_shell_deselect): new func.

	* gtkmodule.c (_wrap_gtk_combo_set_popdown_strings): accept any
	sequence for the second argument, rather than just lists.
	(_wrap_gtk_init): check the return value, and throw an exception
	when a connection to the X server could not be made, rather than
	exiting.

	* gtk.py: got rid of some warnings when pygtk is imported when
	DISPLAY is not set.  Not completely necessary, but it doesn't hurt.
	(GtkObject.remove_data) fixed small bug pointed out by Duncan Grisby.

1999-04-08  James Henstridge  <james@daa.com.au>

	* gtk.py (threads_enter,threads_leave): export these two new functions.

	* gtkmodule.c: applied a modified version of Duncan Grisby's threading
	patch.  The changes were mainly inlining some of the code with macros
	and making it so that the extra code was not added unless python
	was compiled with thread support.  Also added wrappers for
	gdk_thread_enter and gdk_thread_leave.

	* gtk.py (GtkList.{,un}select_item): fixed small bug reported by
	Ben Darnell.

	* gtkmodule.c: fixed some small bugs in gtk_ctree stuff.  Thanks go
	to Chi-Deok Hwang.  Also fixed the bug in gtk_clist where I copy
	and pasted from.

	* gtk.py (GtkNotebook.set_tab_label_text): Small typo.  Fix from
	Toby D. Reeves.

1999-03-13  James Henstridge  <james@daa.com.au>

	* examples/testgtk/testgtk.py: Applied some fixes from Chi-Deok Hwang
	to this example.  Mainly clean ups needed because of me not changing
	testgtk with the rest of pygtk.

1999-03-12  James Henstridge  <james@daa.com.au>

	* configure.in, pygtk.spec: increased version number to 0.5.12.
	
	* gtkmodule.c: added optional support for not catching exceptions in
	callbacks.  This way it should be a lot easier to debug a pygtk
	program with pdb.
	
	* gtkmodule.c, gtk.py: a few fixes for problems sent in by
	Chi-Deok Hwang.  This includes a fix to GtkWidget.event(),
	assignments to GtkStyle attributes throwing exceptions,
	font loading getting reference counting correct and throwing
	exceptions for bad font names and allowing None to be passed
	as a colour to GnomeCanvasItem.set() (the fix is in pygtk).

	* generate/gtklists.defs (gtk_ctree_new): I had missed this
	function in previous releases.

1999-02-24  James Henstridge  <james@daa.com.au>

	* gtk.py: made changes to match those in the defs files and _gtk.

	* description.py (GdkGC.set_dashes): describe new GdkGC method.

	* generate/gtkcontainers.defs: removed gtk_window_set{focus,default},
	since these are internal to GtkWindow.  Also added
	gtk_handle_box_set_handle_position and gtk_handle_box_set_snap_edge.

	* gtkmodule.c: added gtk_widget_get_child_requisition.
	(PyGdkGC_GetAttr): added method GdkGC.set_dashes to set the dash
	pattern for this GC.

1999-02-23  James Henstridge  <james@daa.com.au>

	* pyglade/build.py: added some code to get the option menu creation
	code working.

	* pyglade/xmlparse.py: check if xmllib is included in the standard
	python library, use it for the XML parser -- it is much more complete,
	and doesn't barf on some valid XML files like the old one does.  If
	xmllib is not found, the old parser is used.

	* README, Makefile.am, pygtk.spec: added references to the MAPPING
	file.

	* MAPPING: new file describing the mapping of GTK+ onto python as
	pygtk does it.

1999-02-22  James Henstridge  <james@daa.com.au>

	* description.py (GdkCursor): added information about this type.

	* gtk.py: commented out the __getattr__, __setattr__ and __delattr__
	methods of GtkObject.  There were too many things that broke because
	of these changes.  If I can get these to work correctly in the
	future, I will consider re-enabling it, but not till then.
	
	* examples/testgtk/testgtk.py (create_cursor_test): added a cursor
	test to the python testgtk.  It is adapted from the translation sent
	in by Osamu Tanimoto.

	* gtkmodule.c: fixed a bit of bad copy'n'paste in the GC part of the
	style wrapper code.  Thanks go to Osamu Tanimoto <tanimoto@rios.co.jp>.
	(PyGdkCursor_GetAttr): now GdkCursor objects have a type attribute
	that returns the type number for the object, and a name attribute
	that gives a string representation of that type number.

1999-02-20  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkTooltips.set_tip): made tip_private argument optional.
	(GtkObject.__[gs]etattr__, GtkObject.__delattr__): added some more
	fixes to this code so that it shouldn't throw exceptions as much
	when it shouldn't.

	* gtkmodule.c: PyGdkEvent_New wasn't interpreting GDK_BUTTON_RELEASE
	events correctly.  Also some fix ups for gtk_menu_popup.

	* generate/gtkcontainers.defs (gtk_container_set_focus_child): allow
	null child argument.

1999-02-19  James Henstridge  <james@daa.com.au>

	* gtk.py: added __getattr__ and __setattr__ methods to GtkObject so
	that you can set data on a GtkObject directly in a persistent way
	(reference counting problems prevent pygtk from always passing the
	same python object to a callback).  These functions ignore attributes
	starting with an underscore.
	Also modified all the other __getattr__ methods to call their
	parent class's __getattr__ method when they fail instead of
	raising an exception.
	
	* gtk.py: some changes to make use of the new null-ok flags.
	
	* generate/*.defs: added some null-ok tags where appropriate.
	
	* gtkmodule.c: removed gtk_frame_new, as the null-ok change in
	generate.py makes it unnecessary.  Also gtk_spin_button_new_no_adj
	has been removed because it is no longer necessary.
	
	* generate/generate.py (FunctionDefsParser.define_func): altered the
	code generation routines so that they recognise the (null-ok) tag in
	the .defs file.  This should give a lot more flexibility to the
	generator, and allow me to move some of the special case code in
	gtkmodule.c back to the .defs files.  The null-ok tag is currently
	only recognised for string, object and boxed type arguments.

	* gtkmodule.c: fixes to the gtk_window_set_geometry_hints function to
	throw an exception for bad aspect values.  Also let it understand
	integers for aspect values.
	Also fixed up gtk_menu_popup so that you could give None for a few
	more arguments.

1999-02-16  James Henstridge  <james@daa.com.au>

	* description.py: added documentation about GtkStyle changes to this
	pseudo module.

	* gtkmodule.c: added a new python type GtkStyleHelper that is used
	by python GtkStyle objects as a sequence type that alows us to write
	back to the arrays in the GtkStyle object.  I have also made it
	possible to update the font and (black|white){,_gc}.  I also added
	a GtkStyle.copy() method.  This gives the user everything they need
	to alter styles inside their applications.  I still believe that
	rc files are better, but there seem to be a lot of people who want
	this functionality.
	
	* gtkmodule.c (_wrap_gtk_window_set_geometry_hints): made changes so
	apect ratios can be set to integers.  Also made it throw an exception
	for aspect ratios of zero, since this caused my X server to crash
	a few times.

1999-02-15  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkPaned.set_position): added function.

	* generate/gtkcontainers.defs (gtk_paned_set_position): added new
	function

1999-02-14  James Henstridge  <james@daa.com.au>

	* gtk.py: added GtkWindow.set_geometry_hints to match below addition.
	
	* gtkmodule.c: added gtk_window_set_geometry_hints.

1999-02-08  James Henstridge  <james@daa.com.au>

	* description.py (GdkWindow.depth): documented presence of this
	attribute.

	* gtk.py (GtkFileSelection.complete): I had left out the argument in
	this prototype.  Fixed now.

1999-02-04  James Henstridge  <james@daa.com.au>

	* gtk.py (create_pixmap_from_xpm,create_pixmap_from_xpm_d): altered
	these functions to use the gdk_pixmap_colormap_create variants if
	the first argument is a GtkWidget or GtkStyle.  This means you
	don't have to realise the widget before creating pixmaps from it.
	(GtkCheckMenuItem.set_state, GtkToggleButton.set_state): removed
	these compatibility routines so they don't mask GtkWidget.set_state.

	* gtkmodule.c: moved gtk_item_factory_get_widget here so I can catch
	NULL returns and convert them to None returns.  Also added the
	depth attribute to GdkWindow objects.
	Also added gdk_pixmap_colormap_create_* variants.  These can be used
	if you only have a colormap reference, rather than a window.

	* GtkExtra.py: there were a couple of calls to
	GtkContainer.border_width which is deprecated.

	* examples/testgtk/testgtk.py: fixes to dnd code in this example.  I
	hadn't looked at it since Owen made the dnd changes.

	* examples/simple/tooltip2.py: fixed small bug pointed out by Markus
	Oberhumer.

	* pyglade/build.py (clist_new): fixes to make it parse after clist
	changes.

1999-02-02  James Henstridge  <james@daa.com.au>

	* generate/gtklists.defs, gtk.py: added GtkCList.focus_row.
	
	* _gdkimlibmodule.c, GdkImlib.py: added push_visual and pop_visual,
	that can be used to easily set GTK to use the imlib visual/colormap
	combination.

	* gtkmodule.c: the PyObject -> GtkArg conversion routines were not
	catching some exceptions that they generated.  This would cause
	wierd problems if you passed the wrong argument types to signal
	handlers.  This was found by Chi-Deok Hwang <cdhwang@sr.hei.co.kr>

	* examples/simple/dnd.py, examples/simple/dndpixmaps.py: and example
	of drag and drop contributed by Chi-Deok Hwang <cdhwang@sr.hei.co.kr>
	
	* gtkmodule.c: added gtk_ctree_get_selection, that returns nodes
	rather than pointers.

	* gtk.py: made changes to reflect those below.  Also added
	GtkWidget.get_colormap() (it was missing previously).

	* generate/gtkedit.defs (gtk_spin_button_update): added function.

	* generate/gtkmenus.defs (gtk_check_menu_item_set_active): function
	renaming.
	(gtk_menu_set_title): added function.

	* generate/gtkmisc.defs (gtk_toggle_button_[sg]et_active): added
	functions, and removed gtk_toggle_button_set_state.

1999-01-27  James Henstridge  <james@daa.com.au>

	* gtkmodule.c: fixed some typos in _wrap_gtk_ctree_get_row_data and
	_wrap_gtk_ctree_base_nodes.  This fix was sent to me by Jim
	Robinson <robinson@ipsg.mot.com>.

1999-01-26  James Henstridge  <james@daa.com.au>

	* gtk.py: fixed typo in GtkProgress.configure.

1999-01-22  James Henstridge  <james@daa.com.au>

	* gdkimlibmodule.c: (_wrap_gdk_imlib_create_image_from_data): function
	would raise an exception if there was a null in the data or alpha
	arguments.  Also added some sanity checks on the lengths of data
	and alpha.  This patch was submitted by Toby D. Reeves.

1999-01-21  James Henstridge  <james@daa.com.au>

	* examples/testgtk/testgtk.py (create_scrolled_windows): changed
	a call to GtkContainer.add to GtkScrolledWindow.add_with_viewport.

	* gtk.py (GtkPacker.add): Added defaults for the arguments.

1999-01-11  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkProgress.get_current_percentage): fixed function call

	* gtk.py (GtkScrolledWindow): changed so it inherits from GtkBin
	instead of GtkContainer, to match changes in GTK.

	* GDK.py (DRAG_PROTO_ROOTWIN): Added the constant.

	* gtkmodule.c: forgot to include GTK_TYPE_DOUBLE in one of the GtkArg
	processing routines.  Also fixed a problem for events with a NULL
	window.

1998-12-24  James Henstridge  <james@daa.com.au>

	* gdkimlibmodule.c(_wrap_gdk_imlib_get_rgb_height): I accidentally
	returned rgb_width instead of rgb_height.  This bug report was from
	Osamu Tanimoto <tanimoto@rios.co.jp>.

1998-12-22  James Henstridge  <james@daa.com.au>

	* GtkExtra.py: modified the signal connect bit in the MenuFactory
	code so it is a bit more sane.

1998-12-21  James Henstridge  <james@daa.com.au>

	* pygtk.spec: updated version here as well.

	* README: updated required GTK version to 1.1.9

	* configure.in: Updated version for pygtk to 0.5.9, increased
	GTK version check to 1.1.9.

1998-12-20  James Henstridge  <james@daa.com.au>

	* gtkmodule.c, generate/gtkmisc.defs: moved gtk_preview_draw_row here
	because python's string conversion routines do not like nuls in a
	string, but you quite often want them in image data.

1998-12-17  James Henstridge  <james@daa.com.au>

	* examples/*/*.py: changed calls to GtkLabel.set to GtkLabel.set_text.
	
	* gtk.py: made changes to reflect those below.

	* generate/gtkbase.defs (gtk_widget_set_app_paintable): added this
	stub.

	* generate/gtkmisc.defs (gtk_label_set_text): renamed gtk_label_set to
	this, added gtk_label_set_line_wrap.

	* generate/gtkdnd.defs: Added gtk_drag_source_unset.

	* generate/gtklists.defs: moved reordering function stubs from ctree
	to clist.

	* generate/gtkcontainers.defs: removed GtkDrawWindow.  Added
	gtk_paned_pack[12]

	* GtkExtra.py (MenuFactory.create): wasn't passing extra arguments
	onto signal connect.  Bug fix from Sam Tannous <stannous@cisco.com>

	* gtkmodule.c: Applied some fixes to the ctree code from
	A.Hartgers@phys.tue.nl

1998-12-09  James Henstridge  <james@daa.com.au>

	* gtk.py, generate/gtkmisc.defs, GTK.py: Added
	gtk_toolbar_set_space_style and the required enum.

1998-12-08  James Henstridge  <james@daa.com.au>

	* gtkmodule.c: fixed up the toolbar functions, so they also use
	gtk_signal_connect_full, and now return the added child, like
	the C functions do.

	* examples/testgtk/testgtk.py: fixed up some stuff in the main
	function and clist test.

	* gtk.py, generate/gtkcontainers.defs: added
	gtk_window_set_transient_for and gtk_window_set_default_size.

	* gtkmodule.c: Changed to use _full functions instead of _interp
	functions.  Also made gtk_signal_connect and friends use the
	gtk_signal_connect_full function rather than the default marshaller
	method.

1998-12-07  James Henstridge  <james@daa.com.au>

	* generate/gtkcontainers.defs (gtk_viewport_new): Accept NULL
	arguments for adjustments of a viewport.  This is the correct
	fix for Michael's other patch.

	* examples/*/*.py: got rid of deprecation messages.  Put scrolled
	windows round all clists.
	
	* pyglade/build.py: Fixes a bug in scrolledwindow_new pointed out
	by Michael Hudson.  Also made some changes so that it doesn't use
	any deprecated functions.

	* gtkmodule.c: fixed two typos pointed out by Michael Hudson

1998-12-05  James Henstridge  <james@daa.com.au>

	* gtkmodule.c, generate/*.defs, gtk.py: updated to latest CVS.  This
	includes the function name changes Tim Janik introduced.  I have
	added backward compatibility wrappers for the old functions in gtk.py,
	which also print out a deprecation message.

1998-12-01  James Henstridge  <james@daa.com.au>

	* gtk.py (GtkLayout): I had left a few remnants from when this class
	was in gnome.ui.  This is now fixed.

1998-11-29  James Henstridge  <james@daa.com.au>

	* description.py: Added a description of the GtkCTreeNode type.

	* gtk.py (GtkCTree): Added the GtkCTree class to this layer.
	Hopefully I haven't made any mistakes.

1998-11-28  James Henstridge  <james@daa.com.au>

	* generate/gtklists.defs: added entries for GtkCTree.

	* gtkmodule.c: Added the GtkCTreeNode type.  It exports some of the
	attributes of the GtkCTreeRow associated with the node.  Specifically,
	the parent, next sibling links, and a list of children.  This should
	be enough attributes to make the type useful.
	Also added extra functions for GtkCTree.
	
1998-11-27  James Henstridge  <james@daa.com.au>

	* generate/gtk*.defs: updated for GTK+-1.1.5.
	
	* gtkmodule.c: added the PyGtk_RegisterBoxed function, exported through
	the _private dictionary.  This allows adding extra boxed types so they
	will be recognised in signal handlers and the like.
	
	* gtk.py: this file used to be Gtkinter.py.  People should make this
	change in their programs.  Also updated for changes to the API.
	
	* Gtkinter.py: new file.  Simply does a "from gtk import *", so old
	programs will still run properly.

	* examples/*/*.py, pyglade/*.py, GdkImlib.py, GtkExtra.py: changed
	occurences of Gtkinter to gtk.

1998-11-17  James Henstridge  <james@daa.com.au>
	
	* GdkImlib.py: missed a closing parenthesis.  This caused problems.
	
	* generate/gtk.defs(gtk_rc_add_*_style): removed these functions.
	They weren't exported by Gtkinter, and their declaration has changed
	in newer GTK+'s.  Now pygtk should compile with both GTK+-1.1.3 and
	CVS GTK (tested for a 1998-11-16 checkout).
	
	* configure.in, NEWS: bumped version up to 0.5.5, and made new release.
	
	* generate/gtkmisc.defs, Gtkinter.py: added the GtkCalendar widget.

1998-11-15  James Henstridge  <james@daa.com.au>
	
	* gtkmodule.c: added GdkCursor type.
	
	* gtkmodule.c(GdkWindow.set_cursor): function to set cursor for window
	
	* generate/gtk.defs (gtk_cursor_*): new functions to create cursors
	
	* gtkmodule.c(gtk_pixmap_create_from_xpm_d): new function to create
	a GdkPixmap from a list of strings (XPM data).  This allows you to
	store pixmaps inline with your program for distribution.
	
	* gdkimlibmodule.c: export the GdkImlibImageType, and a _private
	dictionary that holds exported functions.  I should be able to
	add the GdkImlibImage dependent functions to _gnomeui now.
	
	* GDK.py, GTK.py: updated with new constants.
	
	* examples/simple/*1.py: stopped importing _gtkbase, and don't call
	_gtk.pygtk_init().
	
	* pyglade/build.py: added menu widgets to the interface building code.
	
	* pygtk.spec: new file -- an RPM spec file for this package.
	
	* NEWS: add information about this new version.

1998-11-15  James Henstridge  <james@daa.com.au>
	
	* gtkmodule.c: added GdkAtom handling.  There is now a special type for
	GdkAtoms that can be cast to string and int with str() and int()
	respectively, and it supports coercions, so it should act like an
	int in most cases.  Functions that take GdkAtom's as arguments
	actually take ints, so backward compatibility is kept, but functions
	that return GdkAtoms now return this special type.
	
	* gtkmodule.c, generate/gtkdnd.defs, Gtkinter.py: added the new DnD
	code, and support for selections.  The gtk_selection_* functions have
	been mapped to GtkWidget.selection_*, and the gtk_drag_* functions
	have been mapped to GtkWidget.drag_*
	
	* GdkImlib.py: added function create_image_from_data, so you can
	create an image from raw RGB data.  Also added the Image.get_pixmap
	method, which is like Image.make_pixmap, except it returns the
	GdkPixmap,GdkBitmap pair, instead of a GtkPixmap widget.

1998-11-14  James Henstridge  <james@daa.com.au>

	* generate/*.defs: changes to bring pygtk up to date with GTK+-1.1.3

1998-11-13  James Henstridge  <james@daa.com.au>
	
	* gtkmodule.c: added wrappers for GdkDragContext and GtkSelectionData.
	Also removed all the old DnD GdkEvent mappings, and added the
	GdkEventDND mapping.  This should be enough to get the new Dnd signals
	working.
	
	* generate/gtkbase.defs, gtkmodule.c(_wrap_gtk_widget_dnd_*): removed
	the old gtk_widget_dnd_* functions from the bindings.

1998-11-10  James Henstridge  <james@daa.com.au>
	
	* build system: Converted over to using automake.  Note thay some
	modifications have been made to the original version of automake,
	so you will need to apply my patches if you want to modify pygtk.
	
	* swigsrc/*: removed.  I am now using some code generation tools
	that take .defs files as input.
	
	* gdkimlibmodule.c: got rid of all the swig stuff, and cleaned up the
	code a bit.  This has reduced the source code size by half.

1998-11-10  James Henstridge  <james@daa.com.au>
	
	* ChangeLog: started change log.  Old Changelog file has been moved
	to NEWS
	
	* NEWS: used to be Changelog
	
