<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-atkstateset">

  <refnamediv>
    <refname>atk.StateSet</refname>
      <refpurpose>An AtkStateSet determines a component's state set.  </refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>atk.StateSet</classname></ooclass>
      <ooclass><classname><link linkend="class-gobject">gobject.GObject</link></classname></ooclass>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--is-empty">is_empty</link></methodname>
        <methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--add-state">add_state</link></methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--add-states">add_states</link></methodname>
        <methodparam><parameter role="keyword">types</parameter></methodparam>
        <methodparam><parameter role="keyword">n_types</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--clear-states">clear_states</link></methodname>
        <methodparam></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--contains-state">contains_state</link></methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--contains-states">contains_states</link></methodname>
        <methodparam><parameter role="keyword">types</parameter></methodparam>
        <methodparam><parameter role="keyword">n_types</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--remove-state">remove_state</link></methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--and-sets">and_sets</link></methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--or-sets">or_sets</link></methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis>
      <methodsynopsis language="python">
        <methodname><link linkend="method-atkstateset--xor-sets">xor_sets</link></methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis>
</classsynopsis>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

<synopsis>+-- <link linkend="class-gobject">gobject.GObject</link>
  +-- <link linkend="class-atkstateset">atk.StateSet</link>
</synopsis>

  </refsect1>

  <refsect1 id="signal-prototypes-atkstateset">
    <title>atk.StateSet Signal Prototypes</title>

    <para><link linkend="signal-prototypes-gobject">gobject.GObject Signal Prototypes</link></para>
  </refsect1>

  <refsect1>
    <title>Description</title>

<para>
An AtkStateSet determines a component's state set. It is composed of a set 
of AtkStates.
</para>



  </refsect1>

  <refsect1>
    <title>Methods</title>

    <refsect2 id="method-atkstateset--is-empty">
      <title>atk.StateSet.is_empty</title>

      <programlisting><methodsynopsis language="python">
        <methodname>is_empty</methodname>
        <methodparam></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>TRUE</literal> if <parameter>set</parameter> has no states set, otherwise <literal>FALSE</literal></simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Checks whether the state set is empty, i.e. has no states set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--add-state">
      <title>atk.StateSet.add_state</title>

      <programlisting><methodsynopsis language="python">
        <methodname>add_state</methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">type</parameter>&nbsp;:</term>
          <listitem><simpara>an <literal>AtkStateType</literal></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>TRUE</literal> if  the state for <parameter>type</parameter> is not already in <parameter>set</parameter>.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Add a new state for the specified type to the current state set if
      it is not already present.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--add-states">
      <title>atk.StateSet.add_states</title>

      <programlisting><methodsynopsis language="python">
        <methodname>add_states</methodname>
        <methodparam><parameter role="keyword">types</parameter></methodparam>
        <methodparam><parameter role="keyword">n_types</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">types</parameter>&nbsp;:</term>
          <listitem><simpara>an array of <literal>AtkStateType</literal></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">n_types</parameter>&nbsp;:</term>
          <listitem><simpara>The number of elements in the array</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Add the states for the specified types to the current state set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--clear-states">
      <title>atk.StateSet.clear_states</title>

      <programlisting><methodsynopsis language="python">
        <methodname>clear_states</methodname>
        <methodparam></methodparam>
      </methodsynopsis></programlisting>

      <para>Removes all states from the state set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--contains-state">
      <title>atk.StateSet.contains_state</title>

      <programlisting><methodsynopsis language="python">
        <methodname>contains_state</methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">type</parameter>&nbsp;:</term>
          <listitem><simpara>an <literal>AtkStateType</literal></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>TRUE</literal> if <parameter>type</parameter> is the state type is in <parameter>set</parameter>.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Checks whether the state for the specified type is in the specified set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--contains-states">
      <title>atk.StateSet.contains_states</title>

      <programlisting><methodsynopsis language="python">
        <methodname>contains_states</methodname>
        <methodparam><parameter role="keyword">types</parameter></methodparam>
        <methodparam><parameter role="keyword">n_types</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">types</parameter>&nbsp;:</term>
          <listitem><simpara>an array of <literal>AtkStateType</literal></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><parameter role="keyword">n_types</parameter>&nbsp;:</term>
          <listitem><simpara>The number of elements in the array</simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>TRUE</literal> if all the states for <parameter>type</parameter> are in <parameter>set</parameter>.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Checks whether the states for all the specified types are in the 
      specified set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--remove-state">
      <title>atk.StateSet.remove_state</title>

      <programlisting><methodsynopsis language="python">
        <methodname>remove_state</methodname>
        <methodparam><parameter role="keyword">type</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">type</parameter>&nbsp;:</term>
          <listitem><simpara>an <literal>AtkType</literal></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara><literal>TRUE</literal> if <parameter>type</parameter> was the state type is in <parameter>set</parameter>.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Removes the state for the specified type from the state set.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--and-sets">
      <title>atk.StateSet.and_sets</title>

      <programlisting><methodsynopsis language="python">
        <methodname>and_sets</methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">compare_set</parameter>&nbsp;:</term>
          <listitem><simpara>another <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara>a new <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link> which is the intersection of the two sets.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Constructs the intersection of the two sets, returning <literal>None</literal> if the
      intersection is empty.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--or-sets">
      <title>atk.StateSet.or_sets</title>

      <programlisting><methodsynopsis language="python">
        <methodname>or_sets</methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">compare_set</parameter>&nbsp;:</term>
          <listitem><simpara>another <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara>a new <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link> which is the union of the two sets,
returning <literal>None</literal> is empty.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Constructs the union of the two sets.</para>

    </refsect2>

    <refsect2 id="method-atkstateset--xor-sets">
      <title>atk.StateSet.xor_sets</title>

      <programlisting><methodsynopsis language="python">
        <methodname>xor_sets</methodname>
        <methodparam><parameter role="keyword">compare_set</parameter></methodparam>
      </methodsynopsis></programlisting>

      <variablelist>
        <varlistentry>
          <term><parameter role="keyword">compare_set</parameter>&nbsp;:</term>
          <listitem><simpara>another <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link></simpara></listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis>Returns</emphasis>&nbsp;:</term>
          <listitem><simpara>a new <link linkend="class-atkstateset"><classname>atk.StateSet</classname></link> which contains the states which are 
in exactly one of the two sets.</simpara></listitem>
        </varlistentry>
      </variablelist>

      <para>Constructs the exclusive-or of the two sets, returning <literal>None</literal> is empty.
      The set returned by this operation contains the states in exactly
      one of the two sets.</para>

    </refsect2>

  </refsect1>

</refentry>
