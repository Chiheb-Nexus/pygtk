<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="gobject-functions">
  <refnamediv>
    <refname>gobject Functions</refname>
    <refpurpose>miscellaneous functions</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <programlisting>
<methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-name">gobject.type_name</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-from-name">gobject.type_from_name</link></methodname>
	<methodparam><parameter>type_name</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-parent">gobject.type_parent</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-is-a">gobject.type_is_a</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
	<methodparam><parameter>parent_type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-children">gobject.type_children</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-interfaces">gobject.type_interfaces</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--type-register">gobject.type_register</link></methodname>
	<methodparam><parameter>class</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--signal-new">gobject.signal_new</link></methodname>
	<methodparam><parameter>signal_name</parameter></methodparam>
	<methodparam><parameter>type</parameter></methodparam>
	<methodparam><parameter>flags</parameter></methodparam>
	<methodparam><parameter>return_type</parameter></methodparam>
	<methodparam><parameter>param_types</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--signal-list-names">gobject.signal_list_names</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--list-properties">gobject.list_properties</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--new">gobject.new</link></methodname>
	<methodparam><parameter>type</parameter></methodparam>
	<methodparam><parameter>...</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--idle-add">gobject.idle_add</link></methodname>
	<methodparam><parameter>callback</parameter></methodparam>
	<methodparam><parameter>...</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--timeout-add">gobject.timeout_add</link></methodname>
	<methodparam><parameter>interval</parameter></methodparam>
	<methodparam><parameter>callback</parameter></methodparam>
	<methodparam><parameter>...</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--io-add-watch">gobject.io_add_watch</link></methodname>
	<methodparam><parameter>fd</parameter></methodparam>
	<methodparam><parameter>condition</parameter></methodparam>
	<methodparam><parameter>callback</parameter></methodparam>
	<methodparam><parameter>...</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--source-remove">gobject.source_remove</link></methodname>
	<methodparam><parameter>tag</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gobject--main-context-default">gobject.main_context_default</link></methodname>
	<methodparam></methodparam>
      </methodsynopsis></programlisting>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>These functions are part of the <literal>PyGTK</literal> gobject
module but are not directly associated with a specific class.</para>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-gobject--type-name">
      <title>gobject.type_name</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_name</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_name</function>() function returns
the unique name that is assigned to the specified
<parameter>type</parameter>. <parameter>type</parameter> can be a GObject
type, type ID or instance. This function raises a TypeError exception
if <parameter>type</parameter> isn't a <literal>PyGTK</literal> type.</para>

    </refsect2>

    <refsect2 id="function-gobject--type-from-name">
      <title>gobject.type_from_name</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_from_name</methodname>
	  <methodparam><parameter>type_name</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type_name</parameter>&nbsp;:</term>
	  <listitem><simpara>a string containing the name of a
type</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the type ID named
<parameter>type_name</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_from_name</function>() function
returns the type ID of the <literal>PyGTK</literal> type with the name
specified by <parameter>type_name</parameter>. This function raises a
RuntimeError exception if no type matches
<parameter>type_name</parameter>.</para>

    </refsect2>

    <refsect2 id="function-gobject--type-parent">
      <title>gobject.type_parent</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_parent</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the parent type ID</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_parent</function>() function returns
the direct parent type ID of the specified <parameter>type</parameter>.
<parameter>type</parameter> can be a GObject type, type ID or instance. If
<parameter>type</parameter> has no parent, i.e. is a fundamental type, the
RuntimeError exception is raised. </para>

    </refsect2>

    <refsect2 id="function-gobject--type-is-a">
      <title>gobject.type_is_a</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_is_a</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	  <methodparam><parameter>parent_type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>parent_type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>TRUE</literal> if
<parameter>parent_type</parameter> is an ancestor of
<parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_is_a</function>() function returns
<literal>TRUE</literal> if the specified <parameter>type</parameter> is a
descendant of the type specified by <parameter>parent_type</parameter>. This
function also returns <literal>TRUE</literal> if
<parameter>parent_type</parameter> is an interface and
<parameter>type</parameter> conforms to it.</para>

    </refsect2>

    <refsect2 id="function-gobject--type-children">
      <title>gobject.type_children</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_children</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a list of the child types of
<parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_children</function>() function
returns a list containing the child types of the specified
<parameter>type</parameter>.</para>

    </refsect2>

    <refsect2 id="function-gobject--type-interfaces">
      <title>gobject.type_interfaces</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_interfaces</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a list of the interface types supported by
<parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_interfaces</function>() function
returns a list of the interface types supported by
<parameter>type</parameter>. <parameter>type</parameter> can be a GObject
type, type ID or instance. This function returns a RuntimeError exception if
type is not a valid type or has no interfaces.</para>

    </refsect2>

    <refsect2 id="function-gobject--type-register">
      <title>gobject.type_register</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.type_register</methodname>
	  <methodparam><parameter>class</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>class</parameter>&nbsp;:</term>
	  <listitem><simpara>a Python class that is a descendant of <link
linkend="class-gobject"><classname>gobject.GObject</classname></link></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.type_register</function>() function
registers the specified Python <parameter>class</parameter> as a PyGTK type.
class must be a descendant of <link
linkend="class-gobject"><classname>gobject.GObject</classname></link>. The function generates a name for the new type.</para>

    </refsect2>

    <refsect2 id="function-gobject--signal-new">
      <title>gobject.signal_new</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.signal_new</methodname>
	  <methodparam><parameter>signal_name</parameter></methodparam>
	  <methodparam><parameter>type</parameter></methodparam>
	  <methodparam><parameter>flags</parameter></methodparam>
	  <methodparam><parameter>return_type</parameter></methodparam>
	  <methodparam><parameter>param_types</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>signal_name</parameter>&nbsp;:</term>
	  <listitem><simpara>a string containing the name of the
signal</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>the object type that the signal is associated
with</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>flags</parameter>&nbsp;:</term>
	  <listitem><simpara>the signal flags</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>return_type</parameter>&nbsp;:</term>
	  <listitem><simpara>the return type of the signal
handler</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>param_types</parameter>&nbsp;:</term>
	  <listitem><simpara>the parameter types passed to the signal
handler</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a unique integer signal ID</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.signal_new</function>() function registers
a signal with the specified <parameter>signal_name</parameter> for the
specified object <parameter>type</parameter>. The value of
<parameter>flags</parameter> is a combination of:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_RUN_FIRST</literal></term>
	  <listitem>
	    <simpara>Invoke the object method handler in the first emission
stage. </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_RUN_LAST</literal></term>
	  <listitem>
	    <simpara>Invoke the object method handler in the third emission
stage.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_RUN_CLEANUP</literal></term>
	  <listitem>
	    <simpara>Invoke the object method handler in the last emission
stage.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_NO_RECURSE</literal></term>
	  <listitem>
	    <simpara>Signals being emitted for an object while currently
being in emission for this very object will not be emitted recursively, but
instead cause the first emission to be restarted.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_DETAILED</literal></term>
	  <listitem>
	    <simpara>This signal supports "::detail" appendixes to the
signal name upon handler connections and emissions.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_ACTION</literal></term>
	  <listitem>
	    <simpara>Action signals are signals that may freely be emitted
on alive objects from user code via <link
linkend="method-gobject--emit"><methodname>gobject.emit()</methodname>()</link> 
and friends, without the need of being embedded into extra code that
performs pre or post emission adjustments on the object. They can also be
thought of as generically callable object methods.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.SIGNAL_NO_HOOKS</literal></term>
	  <listitem>
	    <simpara> No emissions hooks are supported for this
signal.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para><parameter>return_type</parameter> is the type of the return
value from a signal handler and may be a gobject type, type ID or instance.
The <parameter>param_types</parameter> parameter is a list of additional
types that are passed to the signal handler. Each parameter type may be
specified as a gobject type, type ID or instance. For example, to add a
signal to the gtk.Window type called "my-signal" that calls a handler with a
gtk.Button widget and an integer value and a return value  that is a
boolean, use:</para>

      <programlisting>
  gobject.signal_new("my_signal", gtk.Window, gobject.SIGNAL_RUN_LAST, gobject.TYPE_BOOLEAN, (gtk.Button, gobject.TYPE_INT))
</programlisting>

    </refsect2>

    <refsect2 id="function-gobject--signal-list-names">
      <title>gobject.signal_list_names</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.signal_list_names</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a list of the signal names supported by
<parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.signal_list_names</function>() function
returns a list of the names of the signals that are supported by the
specified GObject <parameter>type</parameter></para>

    </refsect2>

    <refsect2 id="function-gobject--list-properties">
      <title>gobject.list_properties</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.list_properties</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a list of the properties (as GParam objects)
supported by <parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.list_properties</function>() function
returns a list of the properties (as GParam objects) supported by
<parameter>type</parameter>.</para>

    </refsect2>

    <refsect2 id="function-gobject--new">
      <title>gobject.new</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.new</methodname>
	  <methodparam><parameter>type</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>type</parameter>&nbsp;:</term>
	  <listitem><simpara>a GObject type, type ID or
instance</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>zero or more property-value
pairs</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a new object if the specified
<parameter>type</parameter></simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.new</function>() function returns a new
object of the specified <parameter>type</parameter>. type must specify a
type that is a descendant of <link
linkend="class-gobject"><classname>gobject.GObject</classname></link>. A
TypeError exception is raised if <parameter>type</parameter> specifies an
abstract class or a type that is not a descendant of <link
linkend="class-gobject"><classname>gobject.GObject</classname></link>. A set
of property-value pairs may be specified to set the value of the object's
properties.</para>

    </refsect2>

    <refsect2 id="function-gobject--idle-add">
      <title>gobject.idle_add</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.idle_add</methodname>
	  <methodparam><parameter>callback</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>callback</parameter>&nbsp;:</term>
	  <listitem><simpara>a function to call when
<literal>PyGTK</literal> is idle</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>optionals arguments to be passed to
<parameter>callback</parameter></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>an integer ID</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.idle_add</function>() function adds a
function (specified by <parameter>callback</parameter>) to be called
whenever there are no higher priority events pending to the default main
loop. The function is given the default idle priority,
<literal>gobject.PRIORITY_DEFAULT_IDLE</literal>. Additional arguments to
pass to <parameter>callback</parameter> can be specified after
<parameter>callback</parameter>. The idle priority can be specified as a
keyword-value pair with the keyword "priority". If
<parameter>callback</parameter> returns <literal>FALSE</literal> it is
automatically removed from the list of event sources and will not be called
again.</para>

    </refsect2>

    <refsect2 id="function-gobject--timeout-add">
      <title>gobject.timeout_add</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.timeout_add</methodname>
	  <methodparam><parameter>interval</parameter></methodparam>
	  <methodparam><parameter>callback</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>interval</parameter>&nbsp;:</term>
	  <listitem><simpara>the time between calls to the function, in
milliseconds </simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>callback</parameter>&nbsp;:</term>
	  <listitem><simpara>the function to call</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>zero or more arguments that will be passed to
<parameter>callback</parameter></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>an integer ID of the event
source</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.timeout_add</function>() function sets a
function (specified by <parameter>callback</parameter>) to be called at
regular intervals (specified by <parameter>interval</parameter>, with the
default priority, <literal>gobject.PRIORITY_DEFAULT</literal>. Additional
arguments to pass to <parameter>callback</parameter> can be specified after
<parameter>callback</parameter>. The idle priority may be specified as a
keyword-value pair with the keyword "priority".</para>

      <para>The function is called repeatedly until it returns
<literal>FALSE</literal>, at which point the timeout is automatically
destroyed and the function will not be called again. The first call to the
function will be at the end of the first interval. Note that timeout
functions may be delayed, due to the processing of other event sources. Thus
they should not be relied on for precise timing. After each call to the
timeout function, the time of the next timeout is recalculated based on the
current time and the given interval (it does not try to 'catch up' time lost
in delays).</para>

    </refsect2>

    <refsect2 id="function-gobject--io-add-watch">
      <title>gobject.io_add_watch</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.io_add_watch</methodname>
	  <methodparam><parameter>fd</parameter></methodparam>
	  <methodparam><parameter>condition</parameter></methodparam>
	  <methodparam><parameter>callback</parameter></methodparam>
	  <methodparam><parameter>...</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>fd</parameter>&nbsp;:</term>
	  <listitem><simpara>a Python file object or an integer file
descriptor ID</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>condition</parameter>&nbsp;:</term>
	  <listitem><simpara>a condition mask</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>callback</parameter>&nbsp;:</term>
	  <listitem><simpara>a function to call</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter>...</parameter>&nbsp;:</term>
	  <listitem><simpara>additional arguments to pass to
<parameter>callback</parameter></simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>an integer ID of the event source</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.io_add_watch</function>() function
arranges for the file (specified by <parameter>fd</parameter>) to be
monitored by the main loop for the specified
<parameter>condition</parameter>. <parameter>fd</parameter> may be a Python
file object or an integer file descriptor. The value of condition is a
combination of:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>gobject.IO_IN</literal></term>
	  <listitem>
	    <simpara>There is data to read.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.IO_OUT</literal></term>
	  <listitem>
	    <simpara>Data can be written (without blocking). </simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.IO_PRI</literal></term>
	  <listitem>
	    <simpara>There is urgent data to read.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.IO_ERR</literal></term>
	  <listitem>
	    <simpara>Error condition.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gobject.IO_HUP</literal></term>
	  <listitem>
	    <simpara>Hung up (the connection has been broken, usually for
pipes and sockets).</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>Additional arguments to pass to <parameter>callback</parameter>
can be specified after <parameter>callback</parameter>. The idle priority
may be specified as a keyword-value pair with the keyword "priority". The
signature of the callback function is:</para>

      <programlisting>
  def callback(source, cb_condition, ...)
</programlisting>

      <para>where <parameter>source</parameter> is
<parameter>fd</parameter>, the file descriptor;
<parameter>cb_condition</parameter> is the condition that triggered the
signal; and, <parameter>...</parameter> are the zero or more arguments that
were passed to the <function>gobject.io_add_watch</function>()
function.</para>

      <para>If the callback function returns <literal>FALSE</literal> it
will be automatically removed from the list of event sources and will not be
called again. If it returns <literal>TRUE</literal> it will be called again
when the condition is matched.</para>

    </refsect2>

    <refsect2 id="function-gobject--source-remove">
      <title>gobject.source_remove</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.source_remove</methodname>
	  <methodparam><parameter>tag</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter>tag</parameter>&nbsp;:</term>
	  <listitem><simpara>an integer ID</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>TRUE</literal> if the event source was
removed</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.source_remove</function>() function
removes the event source specified by tag (as returned by the <link
linkend="function-gobject--idle-add"><function>gobject.idle_add</function>()</link>, 
<link
linkend="function-gobject--timeout-add"><function>gobject.timeout_add</function></link>() 
and <link
linkend="function-gobject--io-add-watch"><function>gobject.io_add_watch</function>()</link> 
functions)</para>

    </refsect2>

    <refsect2 id="function-gobject--main-context-default">
      <title>gobject.main_context_default</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gobject.main_context_default</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the default gobject.MainContext
object</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gobject.main_context_default</function>() function
returns the default gobject.MainContext object.</para>

    </refsect2>

  </refsect1>

</refentry>