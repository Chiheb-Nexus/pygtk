<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="gdk-functions">
  <refnamediv>
    <refname>gtk.gdk Functions</refname>
    <refpurpose>miscellaneous functions</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

    <programlisting><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--pointer-grab">gtk.gdk.pointer_grab</link></methodname>
	<methodparam><parameter
		       role="keyword">window</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">owner_events</parameter>
	  <initializer>FALSE</initializer></methodparam>
	<methodparam><parameter
		       role="keyword">event_mask</parameter>
	  <initializer>0</initializer></methodparam>
	<methodparam><parameter
		       role="keyword">confine_to</parameter>
	  <initializer>None</initializer></methodparam>
	<methodparam><parameter
		       role="keyword">cursor</parameter>
	  <initializer>None</initializer></methodparam>
	<methodparam><parameter
		       role="keyword">time</parameter>
	  <initializer>0L</initializer></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--pointer-ungrab">gtk.gdk.pointer_ungrab</link></methodname>
	<methodparam><parameter
		       role="keyword">time</parameter>
	  <initializer>0L</initializer></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--keyboard-grab">gtk.gdk.keyboard_grab</link></methodname>
	<methodparam><parameter
		       role="keyword">window</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">owner_events</parameter>
	  <initializer>FALSE</initializer></methodparam>
	<methodparam><parameter
		       role="keyword">time</parameter>
	  <initializer>0L</initializer></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--keyboard-ungrab">gtk.gdk.keyboard_ungrab</link></methodname>
	<methodparam><parameter
		       role="keyword">time</parameter>
	  <initializer>0L</initializer></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--pointer-is-grabbed">gtk.gdk.pointer_is_grabbed</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--screen-width">gtk.gdk.screen_width</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--screen-height">gtk.gdk.screen_height</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--screen-width-mm">gtk.gdk.screen_width_mm</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--screen-height-mm">gtk.gdk.screen_height_mm</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--flush">gtk.gdk.flush</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--beep">gtk.gdk.beep</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--set-double-click-time">gtk.gdk.set_double_click_time</link></methodname>
	<methodparam><parameter
		       role="keyword">msec</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--threads-enter">gtk.gdk.threads_enter</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--threads-leave">gtk.gdk.threads_leave</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--threads-init">gtk.gdk.threads_init</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-ditherable">gtk.gdk.rgb_ditherable</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-get-colormap">gtk.gdk.rgb_get_colormap</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-set-verbose">gtk.gdk.rgb_set_verbose</link></methodname>
	<methodparam><parameter
		       role="keyword">verbose</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-set-install">gtk.gdk.rgb_set_install</link></methodname>
	<methodparam><parameter
		       role="keyword">install</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-set-min-colors">gtk.gdk.rgb_set_min_colors</link></methodname>
	<methodparam><parameter
		       role="keyword">min_colors</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--rgb-get-visual">gtk.gdk.rgb_get_visual</link></methodname>
	<methodparam></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--selection-owner-get">gtk.gdk.selection_owner_get</link></methodname>
	<methodparam><parameter
		       role="keyword">selection</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--selection-send-notify">gtk.gdk.selection_send_notify</link></methodname>
	<methodparam><parameter
		       role="keyword">requestor</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">selection</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">target</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">property</parameter></methodparam>
	<methodparam><parameter
		       role="keyword">time</parameter></methodparam>
  </methodsynopsis><methodsynopsis language="python">
	<methodname><link
linkend="function-gdk--set-sm-client-id">gtk.gdk.set_sm_client_id</link></methodname>
	<methodparam><parameter
		       role="keyword">sm_client_id</parameter></methodparam>
  </methodsynopsis>
</programlisting>

  </refsect1>

  <refsect1>
    <title>Description</title>

    <para>These functions are part of the <literal>PyGTK</literal> gtk.gdk
module but are not directly associated with a specific class.</para>

  </refsect1>

  <refsect1>
    <title>Functions</title>

    <refsect2 id="function-gdk--pointer-grab">
      <title>gtk.gdk.pointer_grab</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.pointer_grab</methodname>
	  <methodparam><parameter
			 role="keyword">window</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">owner_events</parameter>
	    <initializer>FALSE</initializer></methodparam>
	  <methodparam><parameter
			 role="keyword">event_mask</parameter>
	    <initializer>0</initializer></methodparam>
	  <methodparam><parameter
			 role="keyword">confine_to</parameter>
	    <initializer>None</initializer></methodparam>
	  <methodparam><parameter
			 role="keyword">cursor</parameter>
	    <initializer>None</initializer></methodparam>
	  <methodparam><parameter
			 role="keyword">time</parameter>
	    <initializer>0L</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">window</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link> that
will own the grab (the grab window).</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">owner_events</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>FALSE</literal> then all pointer
events are reported with respect to <parameter>window</parameter> and are
only reported if selected by <parameter>event_mask</parameter>. If
<literal>TRUE</literal> then pointer events for this application are
reported as normal, but pointer events outside this application are reported
with respect to <parameter>window</parameter> and only if selected by
<parameter>event_mask</parameter>. In either mode, unreported events are
discarded.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">event_mask</parameter>&nbsp;:</term>
	  <listitem><simpara>specifies the event mask, that is used in
accordance with <parameter>owner_events</parameter>.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">confine_to</parameter>&nbsp;:</term>
	  <listitem><simpara>If not <literal>None</literal>, the pointer
will be confined to this <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link>
during the grab. If the pointer is outside
<parameter>confine_to</parameter>, it will automatically be moved to the
closest edge of <parameter>confine_to</parameter> and enter and leave events
will be generated as necessary.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">cursor</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gdkcursor"><classname>gtk.gdk.Cursor</classname></link> to
display while the grab is active. If this is None then the normal cursors
are used for <parameter>window</parameter> and its descendants, and the
cursor for <parameter>window</parameter> is used for all other
windows.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">time</parameter>&nbsp;:</term>
	  <listitem><simpara>the timestamp of the event that led to this
pointer grab. This usually comes from a <link
linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link>, though
)l can be used to use the current time if the time isn't
known.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a grab status value</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.pointer_grab</function>() function grabs
the pointer (usually a mouse) so that all events are passed to this
application until the pointer is ungrabbed with the <link
linkend="function-gdk--pointer-ungrab"><function>gtk.gdk.pointer_ungrab</function>()</link>, 
or the grab window becomes unviewable. This overrides any previous pointer
grab by this client. This function returns a grab status value:</para>

      <variablelist>
	<varlistentry>
	  <term><literal>gtk.gdk.GRAB_SUCCESS</literal></term>
	  <listitem>
	    <simpara>The resource was successfully grabbed.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.gdk.GRAB_ALREADY_GRABBED</literal></term>
	  <listitem>
	    <simpara>The resource is actively grabbed by another
client.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.gdk.GRAB_INVALID_TIME</literal></term>
	  <listitem>
	    <simpara>The resource was grabbed more recently than the
specified time.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.gdk.GRAB_NOT_VIEWABLE</literal></term>
	  <listitem>
	    <simpara>The grab window or the
<parameter>confine_to</parameter> window are not viewable.</simpara>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>gtk.gdk.GRAB_FROZEN</literal></term>
	  <listitem>
	    <simpara>The resource is frozen by an active grab of another
client.</simpara>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>Pointer grabs are used for operations that need complete
control over mouse events, even if the mouse leaves the application. For
example it is used for drag and drop, for dragging the handle in the <link
linkend="class-gtkhpaned"><classname>gtk.HPaned</classname></link> and <link
linkend="class-gtkvpaned"><classname>gtk.VPaned</classname></link> widgets.
Note that if the event mask of an X window has selected both button press
and button release events, then a button press event will cause an automatic
pointer grab until the button is released. X does this automatically since
most applications expect to receive button press and release events in
pairs. It is equivalent to a pointer grab on the window with
<parameter>owner_events</parameter> set to <literal>TRUE</literal>.</para>

    </refsect2>

    <refsect2 id="function-gdk--pointer-ungrab">
      <title>gtk.gdk.pointer_ungrab</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.pointer_ungrab</methodname>
	  <methodparam><parameter
			 role="keyword">time</parameter>
	    <initializer>0L</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">time</parameter>&nbsp;:</term>
	  <listitem><simpara>a timestamp from a <link
linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link> or 0L
to use the current time</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.pointer_ungrab</function>() function
ungrabs the pointer if it is grabbed by this application.</para>

    </refsect2>

    <refsect2 id="function-gdk--keyboard-grab">
      <title>gtk.gdk.keyboard_grab</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.keyboard_grab</methodname>
	  <methodparam><parameter
			 role="keyword">window</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">owner_events</parameter>
	    <initializer>FALSE</initializer></methodparam>
	  <methodparam><parameter
			 role="keyword">time</parameter>
	    <initializer>0L</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">window</parameter>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link> that
will own the grab (the grab window).</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">owner_events</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>FALSE</literal> then all keyboard
events are reported with respect to <parameter>window</parameter>. If
<literal>TRUE</literal> then keyboard events for this application are
reported as normal, but keyboard events outside this application are
reported with respect to <parameter>window</parameter>. Both key press and
key release events are always reported, independant of the event mask set by
the application.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">time</parameter>&nbsp;:</term>
	  <listitem><simpara>a timestamp from a <link
linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link> or 0L
to use the current time</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>a grab status value</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.keyboard_grab</function>() function grabs
the keyboard so that all events are passed to this application until the
keyboard is ungrabbed with the <link
linkend="function-gdk--keyboard-ungrab"><function>gtk.gdk.keyboard_ungrab</function>()</link>) 
function. This overrides any previous keyboard grab by this client.</para>

    </refsect2>

    <refsect2 id="function-gdk--keyboard-ungrab">
      <title>gtk.gdk.keyboard_ungrab</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.keyboard_ungrab</methodname>
	  <methodparam><parameter
			 role="keyword">time</parameter>
	    <initializer>0L</initializer></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">time</parameter>&nbsp;:</term>
	  <listitem><simpara>a timestamp from a <link
linkend="class-gdkevent"><classname>gtk.gdk.Event</classname></link> or 0L
to use the current time</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.keyboard_ungrab</function>() function
ungrabs the keyboard if it is grabbed by this application.</para>

    </refsect2>

    <refsect2 id="function-gdk--pointer-is-grabbed">
      <title>gtk.gdk.pointer_is_grabbed</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.pointer_is_grabbed</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>TRUE</literal> if the pointer is
currently grabbed by this application.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.pointer_is_grabbed</function>() function
returns <literal>TRUE</literal> if the pointer is currently grabbed by this
application. Note that this does not take the inmplicit pointer grab on
button presses into account.</para>

    </refsect2>

    <refsect2 id="function-gdk--screen-width">
      <title>gtk.gdk.screen_width</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.screen_width</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the width of the default screen in
pixels</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.screen_width</function>() function returns
the default width of the screen in pixels.</para>

    </refsect2>

    <refsect2 id="function-gdk--screen-height">
      <title>gtk.gdk.screen_height</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.screen_height</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the height of the default screen in
pixels</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.screen_height</function>() function
returns the height of the default screen in pixels.</para>

    </refsect2>

    <refsect2 id="function-gdk--screen-width-mm">
      <title>gtk.gdk.screen_width_mm</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.screen_width_mm</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara> the width of the default screen in
millimeters</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.screen_width_mm</function>() function
returns the width of the default screen in millimeters. Note that on many X
servers this value will not be correct.</para>

    </refsect2>

    <refsect2 id="function-gdk--screen-height-mm">
      <title>gtk.gdk.screen_height_mm</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.screen_height_mm</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the height of the default screen in
millimeters</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.screen_height_mm</function>() function
returns the height of the default screen in millimeters. Note that on many X
servers this value will not be correct.</para>

    </refsect2>

    <refsect2 id="function-gdk--flush">
      <title>gtk.gdk.flush</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.flush</methodname>
	  <methodparam><parameter
			 role="keyword"></parameter></methodparam>
	</methodsynopsis></programlisting>

      <para>The <function>gtk.gdk.flush</function>() function flushes the X
output buffer and waits until all requests have been processed by the
server. This is rarely needed by applications.</para>

    </refsect2>

    <refsect2 id="function-gdk--beep">
      <title>gtk.gdk.beep</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.beep</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>

      <para>The <function>gtk.gdk.beep</function>() function emits a short
beep.</para>

    </refsect2>

    <refsect2 id="function-gdk--set-double-click-time">
      <title>gtk.gdk.set_double_click_time</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.set_double_click_time</methodname>
	  <methodparam><parameter
			 role="keyword">msec</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">msec</parameter>&nbsp;:</term>
	  <listitem><simpara>the double click time in
milliseconds</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.set_double_click_time</function>()
function set the double click time for the default display. Applications
should NOT set this, it is a global user-configured setting.</para>

    </refsect2>

    <refsect2 id="function-gdk--threads-enter">
      <title>gtk.gdk.threads_enter</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.threads_enter</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>

      <para>The <function>gtk.gdk.threads_enter</function>() function marks
the beginning of a critical section that only one thread can operate within
at a time. The critical section is guarded by a <literal>GDK</literal>
mutual exclusion lock. Python threads are enabled while waiting for the
<literal>GDK</literal> lock. See the <link
linkend="function-gdk--threads-init"><function>gtk.gtk.threads_init</function>()</link> 
function for more information about threading.</para>

    </refsect2>

    <refsect2 id="function-gdk--threads-leave">
      <title>gtk.gdk.threads_leave</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.threads_leave</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>

      <para>The <function>gtk.gdk.threads_leave</function>() function marks
the end of a critical section started by the <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
function. See the <link
linkend="function-gdk--threads-init"><function>gtk.gtk.threads_init</function>()</link> 
function for more information about threading.</para>

    </refsect2>

    <refsect2 id="function-gdk--threads-init">
      <title>gtk.gdk.threads_init</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.threads_init</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>

      <para>The <function>gtk.gdk.threads_init</function>() function
initializes <literal>PyGTK</literal> to use the Python macros that allow
multiple threads to serialize access to the Python interpreter (using the
Python Global Interpreter Lock (GIL)). In addition, the
<function>gtk.gdk.threads_init</function>() function initializes the
<literal>GDK</literal> global lock (mutex) that serializes thread access to
the <literal>GTK</literal> and <literal>GDK</literal> libraries. Thus there
are two different global locking mechanisms at work that are initialized by
the <function>gtk.gdk.threads_init</function>() function: Python and
<literal>GDK</literal>.</para>

      <para>The <function>gtk.gdk.threads_init</function>() function must be
called before the <link
linkend="function-gtk--main"><function>gtk.main</function>()</link>
function. At this point in the application the Python GIL is held by the
main application thread. (Usually the main thread calls the
<function>gtk.gdk.threads_init</function>() function though any thread could
call it instead.) When the <link
linkend="function-gtk--main"><function>gtk.main</function>()</link> function
is called the GIL is released and other threads may use the Python
interpreter. When <literal>PyGTK</literal> signal handlers are invoked in
the main thread the GIL is reacquired so that the Python interpreter can run
the handler code.</para>

      <para>The assumptions behind <literal>PyGTK</literal> thread support
were originally:</para>

      <itemizedlist>
	<listitem>
	  <simpara>A GIL count is initialized for each thread to indicate
that it holds the GIL - the assumption being that the thread will be a
Python thread and will hold the GIL when it starts because it is running in
the Python interpreter. <literal>PyGTK</literal> adds the GIL count for each
thread to provide a recursive lock mechanism. That is, a Python thread may
attempt to gain exclusive access to the Python interpreter multiple times
without fear of deadlock.</simpara>
	</listitem>
	<listitem>
	  <simpara>The Python thread that calls the
<function>gtk.main</function>() function releases the GIL allowing other
Python threads to run.</simpara>
	</listitem>
	<listitem>
	  <simpara><literal>PyGTK</literal> does not release the GIL when
calling a <literal>GTK</literal> or <literal>GDK</literal> function. Also it
does not acquire the <literal>GDK</literal> global lock (GGL). This means
that, in effect, Python threads can use the GIL alone to serialize access to
the <literal>GTK</literal> and <literal>GDK</literal> libraries. Of course,
if there are non-Python threads calling <literal>GTK</literal> or
<literal>GDK</literal> functions the GGL must be used.</simpara>
	</listitem>
	<listitem>
	  <simpara>Signal, timeout and idle handlers written in Python that
are invoked from the <literal>GTK</literal> mainloop acquire the GIL
automatically.</simpara>
	</listitem>
      </itemizedlist>

      <para>The <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
and <link
linkend="function-gdk--threads-leave"><function>gtk.gdk.threads_leave</function>()</link> 
functions use the <literal>GDK</literal> global lock (GGL) to manage access
to the <literal>GTK</literal> and <literal>GDK</literal> libraries. The
intention is to allow only one thread to execute within the
<literal>GTK</literal> and <literal>GDK</literal> code at a time.
Theoretically any time a thread calls a <literal>PyGTK</literal> method or
function it should bracket the call with the <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
and <link
linkend="function-gdk--threads-leave"><function>gtk.gdk.threads_leave</function>()</link> 
functions. If your application only uses Python threads then this is not
necessary since only the main thread can safely call
<literal>PyGTK</literal> methods or functions. However if your application
has foreign threads that call <literal>GTK</literal> or
<literal>GDK</literal> functions you should use the <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
and <link
linkend="function-gdk--threads-leave"><function>gtk.gdk.threads_leave</function>()</link> 
functions to serialize access.</para>

      <note>
	<para>Signal handlers are automatically invoked within a
<function>gdk_threads_enter</function>() and
<function>gdk_threads_leave</function>() function pair by
<literal>GTK</literal> so the <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
and <link
linkend="function-gdk--threads-leave"><function>gtk.gdk.threads_leave</function>()</link> 
functions should not be called within a Python signal handler or the
application will deadlock. However, idle, timeout and input handlers are
executed outside the GGL so these should use the <link
linkend="function-gdk--threads-enter"><function>gtk.gdk.threads_enter</function>()</link> 
and <link
linkend="function-gdk--threads-leave"><function>gtk.gdk.threads_leave</function>()</link> 
functions if <literal>PyGTK</literal> methods or functions are
called.</para>
      </note>

      <para>In general the safest strategy is to only call
<literal>PyGTK</literal> methods and functions from the main Python thread
and use idle or timeout handlers (which run in the main thread) to invoke
<literal>PyGTK</literal> calls from other threads.</para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-ditherable">
      <title>gtk.gdk.rgb_ditherable</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_ditherable</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara><literal>TRUE</literal> if the <link
linkend="class-gdkvisual"><classname>gtk.gdk.Visual</classname></link> is
ditherable</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_ditherable</function>() function
returns <literal>TRUE</literal> if the gdkVisual is ditherable. This
function may be useful for presenting a user interface choice to the user
about which dither mode is desired; if the display is not ditherable, it may
make sense to gray out or hide the corresponding UI widget.</para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-get-colormap">
      <title>gtk.gdk.rgb_get_colormap</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_get_colormap</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the preferred <link
linkend="class-gdkcolormap"><classname>gtk.gdk.Colormap</classname></link>
for rendering image data.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_get_colormap</function>() function
returns the preferred <link
linkend="class-gdkcolormap"><classname>gtk.gdk.Colormap</classname></link>.</para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-set-verbose">
      <title>gtk.gdk.rgb_set_verbose</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_set_verbose</methodname>
	  <methodparam><parameter
			 role="keyword">verbose</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">verbose</parameter>&nbsp;:</term>
	  <listitem><simpara>If <literal>TRUE</literal> messages should be
verbose</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_set_verbose</function>() function sets
the "verbose" flag to the value specified by <parameter>verbose</parameter>.
If <parameter>verbose</parameter> is <literal>TRUE</literal> messages will
be verbose. This is generally only useful for debugging.</para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-set-install">
      <title>gtk.gdk.rgb_set_install</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_set_install</methodname>
	  <methodparam><parameter
			 role="keyword">install</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter role="keyword">install</parameter>&nbsp;:</term>
	  <listitem><simpara>if <literal>TRUE</literal> set install
mode</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_set_install</function>() function sets
the "install" mode to the value of <parameter>install</parameter>. If
<parameter>install</parameter> is <literal>TRUE</literal>, a new "private"
colormap is always installed rather than trying to find a best fit with the
colors already allocated. Ordinarily, a colormap only be installed if a
sufficient cube cannot be allocated. A private colormap has more colors,
leading to better quality display, but also leads to the dreaded "colormap
flashing" effect.</para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-set-min-colors">
      <title>gtk.gdk.rgb_set_min_colors</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_set_min_colors</methodname>
	  <methodparam><parameter
			 role="keyword">min_colors</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">min_colors</parameter>&nbsp;:</term>
	  <listitem><simpara>the minimum number of
colors.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_set_min_colors</function>() function
sets the minimum number of colors for the color cube to the value specified
by <parameter>min_colors</parameter>. Generally, the largest color cube is
allocated. If a color cube at least as large as
<parameter>min_colors</parameter> can't be allocated, a private colormap is
installed. </para>

    </refsect2>

    <refsect2 id="function-gdk--rgb-get-visual">
      <title>gtk.gdk.rgb_get_visual</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.rgb_get_visual</methodname>
	  <methodparam></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gdkvisual"><classname>gtk.gdk.Visual</classname></link> being
used</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.rgb_get_visual</function>() function
returns the <link
linkend="class-gdkvisual"><classname>gtk.gdk.Visual</classname></link> being
used to render image data on the default screen.</para>

    </refsect2>

    <refsect2 id="function-gdk--selection-owner-get">
      <title>gtk.gdk.selection_owner_get</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.selection_owner_get</methodname>
	  <methodparam><parameter
			 role="keyword">selection</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">selection</parameter>&nbsp;:</term>
	  <listitem><simpara>an atom indentifying a
selection.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><emphasis>Returns</emphasis>&nbsp;:</term>
	  <listitem><simpara>the <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link> that
owns the selection or None.</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.selection_owner_get</function>() function
returns the <link
linkend="class-gdkwindow"><classname>gtk.gdk.Window</classname></link> that
owns the selection specified by <parameter>selection</parameter> if there is
a selection owner for this window, and if it is a window known to the
current application. Note that the return value may be owned by a different
process if a foreign window was previously created for that window, but a
new foreign window will never be created by this call.</para>

    </refsect2>

    <refsect2 id="function-gdk--selection-send-notify">
      <title>gtk.gdk.selection_send_notify</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.selection_send_notify</methodname>
	  <methodparam><parameter
			 role="keyword">requestor</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">selection</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">target</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">property</parameter></methodparam>
	  <methodparam><parameter
			 role="keyword">time</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">requestor</parameter>&nbsp;:</term>
	  <listitem><simpara>the integer ID of the window to deliver the
response to.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter
role="keyword">selection</parameter>&nbsp;:</term>
	  <listitem><simpara>an atom representing the selection that was
requested.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">target</parameter>&nbsp;:</term>
	  <listitem><simpara>an atom representing the target that was
selected. </simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">property</parameter>&nbsp;:</term>
	  <listitem><simpara>an atom representing the property in which the
selection owner stored the data.</simpara></listitem>
	</varlistentry>
	<varlistentry>
	  <term><parameter role="keyword">time</parameter>&nbsp;:</term>
	  <listitem><simpara>a timestamp</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.selection_send_notify</function>()
function sends a response to a SelectionRequest event.</para>

    </refsect2>

    <refsect2 id="function-gdk--set-sm-client-id">
      <title>gtk.gdk.set_sm_client_id</title>

      <programlisting><methodsynopsis language="python">
	  <methodname>gtk.gdk.set_sm_client_id</methodname>
	  <methodparam><parameter
			 role="keyword">sm_client_id</parameter></methodparam>
	</methodsynopsis></programlisting>
      <variablelist>
	<varlistentry>
	  <term><parameter
role="keyword">sm_client_id</parameter>&nbsp;:</term>
	  <listitem><simpara>the client id string assigned by the session
manager when the connection was opened</simpara></listitem>
	</varlistentry>
      </variablelist>

      <para>The <function>gtk.gdk.set_sm_client_id</function>() function
sets the <literal>SM_CLIENT_ID</literal> property on the application's
leader window so that the window manager can save the application's state
using the X11R6 ICCCM session management protocol. See the X Session
Management Library documentation for more information on session management
and the Inter-Client Communication Conventions Manual (ICCCM) for
information on the <literal>WM_CLIENT_LEADER</literal> property. (Both
documents are part of the X Window System distribution.)</para>

    </refsect2>

  </refsect1>

</refentry>
