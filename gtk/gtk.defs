;; -*- scheme -*-

(include "gdk.defs")
(include "gtk-extrafuncs.defs")

; object definitions ...

(object IconFactory
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkIconFactory)
)

(interface Editable
  (in-module Gtk)
  (c-name GtkEditable)
)

(object Object
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkObject)
)

(object ItemFactory
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkItemFactory)
)

(object IMContext
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkIMContext)
)

(object IMMulticontext
  (in-module Gtk)
  (parent IMContext (Gtk))
  (c-name GtkIMMulticontext)
)

(object CellRenderer
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkCellRenderer)
)

(object CellRendererToggle
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererToggle)
)

(object CellRendererText
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererText)
)

(object CellRendererTextPixbuf
  (in-module Gtk)
  (parent CellRendererText (Gtk))
  (c-name GtkCellRendererTextPixbuf)
)

(object CellRendererPixbuf
  (in-module Gtk)
  (parent CellRenderer (Gtk))
  (c-name GtkCellRendererPixbuf)
)

(object Adjustment
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkAdjustment)
  (field (type-and-name gfloat value))
  (field (type-and-name gfloat lower))
  (field (type-and-name gfloat upper))
  (field (type-and-name gfloat step_increment))
  (field (type-and-name gfloat page_increment))
  (field (type-and-name gfloat page_size))
)

(object RcStyle
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkRcStyle)
)

(object Settings
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkSettings)
)

(object SizeGroup
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkSizeGroup)
)

(object Style
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkStyle)
)

(object TextBuffer
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTextBuffer)
  (field (type-and-name GtkTextTagTable* tag_table))
)

(object TextChildAnchor
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTextChildAnchor)
)

(object TextMark
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTextMark)
)

(object TextTag
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTextTag)
)

(object TextTagTable
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTextTagTable)
)

(object Tooltips
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkTooltips)
)

(interface TreeModel
  (in-module Gtk)
  (c-name GtkTreeModel)
)

(interface TreeDragSource
  (in-module Gtk)
  (c-name GtkTreeDragSource)
)

(interface TreeDragDest
  (in-module Gtk)
  (c-name GtkTreeDragDest)
)

(interface TreeSortable
  (in-module Gtk)
  (c-name GtkTreeSortable)
)

(object ListStore
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkListStore)
  (implements GtkTreeModel)
  (implements GtkTreeDragSource)
  (implements GtkTreeDragDest)
  (implements GtkTreeSortable)
)

(object TreeModelSort
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTreeModelSort)
  (implements GtkTreeModel)
)

(object TreeSelection
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkTreeSelection)
)

(object TreeStore
  (in-module Gtk)
  (parent Object (G))
  (c-name GtkTreeStore)
  (implements GtkTreeModel)
  (implements GtkTreeDragSource)
  (implements GtkTreeDragDest)
  (implements GtkTreeSortable)
)

(object TreeViewColumn
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkTreeViewColumn)
)

(object Widget
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkWidget)
  (field (type-and-name GtkStyle* style))
  (field (type-and-name GdkWindow* window))
  (field (type-and-name GtkWidget* parent))
)

(object Separator
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkSeparator)
)

(object VSeparator
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkVSeparator)
)

(object HSeparator
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkHSeparator)
)

(object Ruler
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRuler)
)

(object VRuler
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkVRuler)
)

(object HRuler
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkHRuler)
)

(object Range
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRange)
)

(object Scrollbar
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScrollbar)
)

(object VScrollbar
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkVScrollbar)
)

(object HScrollbar
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkHScrollbar)
)

(object Scale
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScale)
)

(object VScale
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkVScale)
)

(object HScale
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkHScale)
)

(object Progress
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkProgress)
)

(object ProgressBar
  (in-module Gtk)
  (parent Progress (Gtk))
  (c-name GtkProgressBar)
)

(object Preview
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkPreview)
)

(object OldEditable
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkOldEditable)
  (implements GtkEditable)
)

(object Misc
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkMisc)
)

(object Pixmap
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkPixmap)
)

(object Arrow
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkArrow)
)

(object Image
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkImage)
)

(object Label
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkLabel)
)

(object AccelLabel
  (in-module Gtk)
  (parent Label (Gtk))
  (c-name GtkAccelLabel)
)

(object Invisible
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkInvisible)
)

(object Entry
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkEntry)
  (implements GtkEditable)
)

(object SpinButton
  (in-module Gtk)
  (parent Entry (Gtk))
  (c-name GtkSpinButton)
)

(object DrawingArea
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkDrawingArea)
)

(object Curve
  (in-module Gtk)
  (parent DrawingArea (Gtk))
  (c-name GtkCurve)
)

(object Container
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkContainer)
)

(object TreeView
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTreeView)
)

(object Toolbar
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkToolbar)
)

(object TextView
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTextView)
)

(object Table
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTable)
)

(object Socket
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkSocket)
)

(object Paned
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkPaned)
)

(object VPaned
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkVPaned)
)

(object HPaned
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkHPaned)
)

(object Notebook
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkNotebook)
  (field (type-and-name GtkPositionType tab_pos))
)

(object MenuShell
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkMenuShell)
)

(object Menu
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenu)
)

(object MenuBar
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenuBar)
)

(object List
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkList)
)

(object Layout
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkLayout)
)

(object Fixed
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkFixed)
)

(object Bin
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBin)
  (field (type-and-name GtkWidget* child))
)

(object Viewport
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkViewport)
)

(object ScrolledWindow
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkScrolledWindow)
)

(object Item
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkItem)
)

(object MenuItem
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkMenuItem)
)

(object TearoffMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkTearoffMenuItem)
)

(object SeparatorMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkSeparatorMenuItem)
)

(object CheckMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkCheckMenuItem)
  (field (type-and-name gboolean active))
)

(object RadioMenuItem
  (in-module Gtk)
  (parent CheckMenuItem (Gtk))
  (c-name GtkRadioMenuItem)
)

(object ImageMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkImageMenuItem)
)

(object ListItem
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkListItem)
)

(object HandleBox
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkHandleBox)
)

(object Frame
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkFrame)
)

(object AspectFrame
  (in-module Gtk)
  (parent Frame (Gtk))
  (c-name GtkAspectFrame)
)

(object EventBox
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkEventBox)
)

(object Alignment
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkAlignment)
)

(object Button
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkButton)
)

(object ToggleButton
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkToggleButton)
  (field (type-and-name gboolean draw_indicator))
)

(object CheckButton
  (in-module Gtk)
  (parent ToggleButton (Gtk))
  (c-name GtkCheckButton)
)

(object RadioButton
  (in-module Gtk)
  (parent CheckButton (Gtk))
  (c-name GtkRadioButton)
)

(object OptionMenu
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkOptionMenu)
)

(object Box
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBox)
)

(object VBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkVBox)
)

(object ColorSelection
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkColorSelection)
)

(object FontSelection
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkFontSelection)
)

(object GammaCurve
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkGammaCurve)
  (field (type-and-name GtkWidget* table))
  (field (type-and-name GtkWidget* curve))
  (field (type-and-name gfloat gamma))
  (field (type-and-name GtkWidget* gamma_dialog))
  (field (type-and-name GtkWidget* gamma_text))
)

(object HBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkHBox)
)

(object Statusbar
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkStatusbar)
)

(object Combo
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkCombo)
  (field (type-and-name GtkWidget* entry))
  (field (type-and-name GtkWidget* list))
)

(object ButtonBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkButtonBox)
)

(object VButtonBox
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkVButtonBox)
)

(object HButtonBox
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkHButtonBox)
)

(object CList
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkCList)
  (field (type-and-name gint focus_row))
  (field (type-and-name gint rows))
)

(object CTree
  (in-module Gtk)
  (parent CList (Gtk))
  (c-name GtkCTree)
)

(object Calendar
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkCalendar)
)

(object Window
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkWindow)
)

(object Plug
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkPlug)
)

(object Dialog
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkDialog)
  (field (type-and-name GtkWidget* vbox))
  (field (type-and-name GtkWidget* action_area))
)

(object MessageDialog
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkMessageDialog)
)

(object InputDialog
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkInputDialog)
)

(object FontSelectionDialog
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkFontSelectionDialog)
  (field (type-and-name GtkWidget* fontsel))
  (field (type-and-name GtkWidget* main_vbox))
  (field (type-and-name GtkWidget* action_area))
  (field (type-and-name GtkWidget* ok_button))
  (field (type-and-name GtkWidget* apply_button))
  (field (type-and-name GtkWidget* cancel_button))
)

(object FileSelection
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkFileSelection)
)

(object ColorSelectionDialog
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkColorSelectionDialog)
)


;; Boxed types ...

(boxed AccelGroup
  (in-module Gtk)
  (c-name GtkAccelGroup)
  (copy-func gtk_accel_group_ref)
  (release-func gtk_accel_group_unref)
)

(boxed TreeIter
  (in-module Gtk)
  (c-name GtkTreeIter)
  (copy-func gtk_tree_iter_copy)
  (release-func gtk_tree_iter_free)
)


;; Enumerations and flags ...

(flags AccelFlags
  (in-module Gtk)
  (c-name GtkAccelFlags)
  (value (name visible) (c-name GTK_ACCEL_VISIBLE))
  (value (name signal-visible) (c-name GTK_ACCEL_SIGNAL_VISIBLE))
  (value (name locked) (c-name GTK_ACCEL_LOCKED))
  (value (name mask) (c-name GTK_ACCEL_MASK))
)

(flags CalendarDisplayOptions
  (in-module Gtk)
  (c-name GtkCalendarDisplayOptions)
  (value (name show-heading) (c-name GTK_CALENDAR_SHOW_HEADING))
  (value (name show-day-names) (c-name GTK_CALENDAR_SHOW_DAY_NAMES))
  (value (name no-month-change) (c-name GTK_CALENDAR_NO_MONTH_CHANGE))
  (value (name show-week-numbers) (c-name GTK_CALENDAR_SHOW_WEEK_NUMBERS))
  (value (name week-start-monday) (c-name GTK_CALENDAR_WEEK_START_MONDAY))
)

(flags CellRendererState
  (in-module Gtk)
  (c-name GtkCellRendererState)
  (value (name selected) (c-name GTK_CELL_RENDERER_SELECTED))
  (value (name prelit) (c-name GTK_CELL_RENDERER_PRELIT))
  (value (name insensitive) (c-name GTK_CELL_RENDERER_INSENSITIVE))
  (value (name sorted) (c-name GTK_CELL_RENDERER_SORTED))
)

(enum CellType
  (in-module Gtk)
  (c-name GtkCellType)
  (value (name empty) (c-name GTK_CELL_EMPTY))
  (value (name text) (c-name GTK_CELL_TEXT))
  (value (name pixmap) (c-name GTK_CELL_PIXMAP))
  (value (name pixtext) (c-name GTK_CELL_PIXTEXT))
  (value (name widget) (c-name GTK_CELL_WIDGET))
)

(enum CListDragPos
  (in-module Gtk)
  (c-name GtkCListDragPos)
  (value (name none) (c-name GTK_CLIST_DRAG_NONE))
  (value (name before) (c-name GTK_CLIST_DRAG_BEFORE))
  (value (name into) (c-name GTK_CLIST_DRAG_INTO))
  (value (name after) (c-name GTK_CLIST_DRAG_AFTER))
)

(flags ButtonAction
  (in-module Gtk)
  (c-name GtkButtonAction)
  (value (name ignored) (c-name GTK_BUTTON_IGNORED))
  (value (name selects) (c-name GTK_BUTTON_SELECTS))
  (value (name drags) (c-name GTK_BUTTON_DRAGS))
  (value (name expands) (c-name GTK_BUTTON_EXPANDS))
)

(enum CTreePos
  (in-module Gtk)
  (c-name GtkCTreePos)
  (value (name before) (c-name GTK_CTREE_POS_BEFORE))
  (value (name as-child) (c-name GTK_CTREE_POS_AS_CHILD))
  (value (name after) (c-name GTK_CTREE_POS_AFTER))
)

(enum CTreeLineStyle
  (in-module Gtk)
  (c-name GtkCTreeLineStyle)
  (value (name none) (c-name GTK_CTREE_LINES_NONE))
  (value (name solid) (c-name GTK_CTREE_LINES_SOLID))
  (value (name dotted) (c-name GTK_CTREE_LINES_DOTTED))
  (value (name tabbed) (c-name GTK_CTREE_LINES_TABBED))
)

(enum CTreeExpanderStyle
  (in-module Gtk)
  (c-name GtkCTreeExpanderStyle)
  (value (name none) (c-name GTK_CTREE_EXPANDER_NONE))
  (value (name square) (c-name GTK_CTREE_EXPANDER_SQUARE))
  (value (name triangle) (c-name GTK_CTREE_EXPANDER_TRIANGLE))
  (value (name circular) (c-name GTK_CTREE_EXPANDER_CIRCULAR))
)

(enum CTreeExpansionType
  (in-module Gtk)
  (c-name GtkCTreeExpansionType)
  (value (name expand) (c-name GTK_CTREE_EXPANSION_EXPAND))
  (value (name expand-recursive) (c-name GTK_CTREE_EXPANSION_EXPAND_RECURSIVE))
  (value (name collapse) (c-name GTK_CTREE_EXPANSION_COLLAPSE))
  (value (name collapse-recursive) (c-name GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE))
  (value (name toggle) (c-name GTK_CTREE_EXPANSION_TOGGLE))
  (value (name toggle-recursive) (c-name GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE))
)

(flags DebugFlag
  (in-module Gtk)
  (c-name GtkDebugFlag)
  (value (name misc) (c-name GTK_DEBUG_MISC))
  (value (name dnd) (c-name GTK_DEBUG_DND))
  (value (name plugsocket) (c-name GTK_DEBUG_PLUGSOCKET))
  (value (name text) (c-name GTK_DEBUG_TEXT))
  (value (name tree) (c-name GTK_DEBUG_TREE))
  (value (name updates) (c-name GTK_DEBUG_UPDATES))
)

(enum DialogFlags
  (in-module Gtk)
  (c-name GtkDialogFlags)
  (value (name modal) (c-name GTK_DIALOG_MODAL))
  (value (name destroy-with-parent) (c-name GTK_DIALOG_DESTROY_WITH_PARENT))
  (value (name no-separator) (c-name GTK_DIALOG_NO_SEPARATOR))
)

(enum ResponseType
  (in-module Gtk)
  (c-name GtkResponseType)
  (value (name none) (c-name GTK_RESPONSE_NONE))
  (value (name reject) (c-name GTK_RESPONSE_REJECT))
  (value (name accept) (c-name GTK_RESPONSE_ACCEPT))
  (value (name delete-event) (c-name GTK_RESPONSE_DELETE_EVENT))
  (value (name ok) (c-name GTK_RESPONSE_OK))
  (value (name cancel) (c-name GTK_RESPONSE_CANCEL))
  (value (name close) (c-name GTK_RESPONSE_CLOSE))
  (value (name yes) (c-name GTK_RESPONSE_YES))
  (value (name no) (c-name GTK_RESPONSE_NO))
  (value (name apply) (c-name GTK_RESPONSE_APPLY))
  (value (name help) (c-name GTK_RESPONSE_HELP))
)

(flags DestDefaults
  (in-module Gtk)
  (c-name GtkDestDefaults)
  (value (name motion) (c-name GTK_DEST_DEFAULT_MOTION))
  (value (name highlight) (c-name GTK_DEST_DEFAULT_HIGHLIGHT))
  (value (name drop) (c-name GTK_DEST_DEFAULT_DROP))
  (value (name all) (c-name GTK_DEST_DEFAULT_ALL))
)

(flags TargetFlags
  (in-module Gtk)
  (c-name GtkTargetFlags)
  (value (name app) (c-name GTK_TARGET_SAME_APP))
  (value (name widget) (c-name GTK_TARGET_SAME_WIDGET))
)

(enum ArrowType
  (in-module Gtk)
  (c-name GtkArrowType)
  (value (name up) (c-name GTK_ARROW_UP))
  (value (name down) (c-name GTK_ARROW_DOWN))
  (value (name left) (c-name GTK_ARROW_LEFT))
  (value (name right) (c-name GTK_ARROW_RIGHT))
)

(flags AttachOptions
  (in-module Gtk)
  (c-name GtkAttachOptions)
  (value (name expand) (c-name GTK_EXPAND))
  (value (name shrink) (c-name GTK_SHRINK))
  (value (name fill) (c-name GTK_FILL))
)

(enum ButtonBoxStyle
  (in-module Gtk)
  (c-name GtkButtonBoxStyle)
  (value (name default-style) (c-name GTK_BUTTONBOX_DEFAULT_STYLE))
  (value (name spread) (c-name GTK_BUTTONBOX_SPREAD))
  (value (name edge) (c-name GTK_BUTTONBOX_EDGE))
  (value (name start) (c-name GTK_BUTTONBOX_START))
  (value (name end) (c-name GTK_BUTTONBOX_END))
)

(enum CurveType
  (in-module Gtk)
  (c-name GtkCurveType)
  (value (name linear) (c-name GTK_CURVE_TYPE_LINEAR))
  (value (name spline) (c-name GTK_CURVE_TYPE_SPLINE))
  (value (name free) (c-name GTK_CURVE_TYPE_FREE))
)

(enum DeleteType
  (in-module Gtk)
  (c-name GtkDeleteType)
  (value (name chars) (c-name GTK_DELETE_CHARS))
  (value (name word-ends) (c-name GTK_DELETE_WORD_ENDS))
  (value (name words) (c-name GTK_DELETE_WORDS))
  (value (name display-lines) (c-name GTK_DELETE_DISPLAY_LINES))
  (value (name display-line-ends) (c-name GTK_DELETE_DISPLAY_LINE_ENDS))
  (value (name paragraph-ends) (c-name GTK_DELETE_PARAGRAPH_ENDS))
  (value (name paragraphs) (c-name GTK_DELETE_PARAGRAPHS))
  (value (name whitespace) (c-name GTK_DELETE_WHITESPACE))
)

(enum DirectionType
  (in-module Gtk)
  (c-name GtkDirectionType)
  (value (name tab-forward) (c-name GTK_DIR_TAB_FORWARD))
  (value (name tab-backward) (c-name GTK_DIR_TAB_BACKWARD))
  (value (name up) (c-name GTK_DIR_UP))
  (value (name down) (c-name GTK_DIR_DOWN))
  (value (name left) (c-name GTK_DIR_LEFT))
  (value (name right) (c-name GTK_DIR_RIGHT))
)

(enum IconSize
  (in-module Gtk)
  (c-name GtkIconSize)
  (value (name invalid) (c-name GTK_ICON_SIZE_INVALID))
  (value (name menu) (c-name GTK_ICON_SIZE_MENU))
  (value (name small-toolbar) (c-name GTK_ICON_SIZE_SMALL_TOOLBAR))
  (value (name large-toolbar) (c-name GTK_ICON_SIZE_LARGE_TOOLBAR))
  (value (name button) (c-name GTK_ICON_SIZE_BUTTON))
  (value (name dialog) (c-name GTK_ICON_SIZE_DIALOG))
)

(enum TextDirection
  (in-module Gtk)
  (c-name GtkTextDirection)
  (value (name none) (c-name GTK_TEXT_DIR_NONE))
  (value (name ltr) (c-name GTK_TEXT_DIR_LTR))
  (value (name rtl) (c-name GTK_TEXT_DIR_RTL))
)

(enum Justification
  (in-module Gtk)
  (c-name GtkJustification)
  (value (name left) (c-name GTK_JUSTIFY_LEFT))
  (value (name right) (c-name GTK_JUSTIFY_RIGHT))
  (value (name center) (c-name GTK_JUSTIFY_CENTER))
  (value (name fill) (c-name GTK_JUSTIFY_FILL))
)

(enum MatchType
  (in-module Gtk)
  (c-name GtkMatchType)
  (value (name all) (c-name GTK_MATCH_ALL))
  (value (name all-tail) (c-name GTK_MATCH_ALL_TAIL))
  (value (name head) (c-name GTK_MATCH_HEAD))
  (value (name tail) (c-name GTK_MATCH_TAIL))
  (value (name exact) (c-name GTK_MATCH_EXACT))
  (value (name last) (c-name GTK_MATCH_LAST))
)

(enum MenuDirectionType
  (in-module Gtk)
  (c-name GtkMenuDirectionType)
  (value (name parent) (c-name GTK_MENU_DIR_PARENT))
  (value (name child) (c-name GTK_MENU_DIR_CHILD))
  (value (name next) (c-name GTK_MENU_DIR_NEXT))
  (value (name prev) (c-name GTK_MENU_DIR_PREV))
)

(enum MenuFactoryType
  (in-module Gtk)
  (c-name GtkMenuFactoryType)
  (value (name menu) (c-name GTK_MENU_FACTORY_MENU))
  (value (name menu-bar) (c-name GTK_MENU_FACTORY_MENU_BAR))
  (value (name option-menu) (c-name GTK_MENU_FACTORY_OPTION_MENU))
)

(enum MetricType
  (in-module Gtk)
  (c-name GtkMetricType)
  (value (name pixels) (c-name GTK_PIXELS))
  (value (name inches) (c-name GTK_INCHES))
  (value (name centimeters) (c-name GTK_CENTIMETERS))
)

(enum MovementStep
  (in-module Gtk)
  (c-name GtkMovementStep)
  (value (name logical-positions) (c-name GTK_MOVEMENT_LOGICAL_POSITIONS))
  (value (name visual-positions) (c-name GTK_MOVEMENT_VISUAL_POSITIONS))
  (value (name words) (c-name GTK_MOVEMENT_WORDS))
  (value (name display-lines) (c-name GTK_MOVEMENT_DISPLAY_LINES))
  (value (name display-line-ends) (c-name GTK_MOVEMENT_DISPLAY_LINE_ENDS))
  (value (name paragraphs) (c-name GTK_MOVEMENT_PARAGRAPHS))
  (value (name paragraph-ends) (c-name GTK_MOVEMENT_PARAGRAPH_ENDS))
  (value (name pages) (c-name GTK_MOVEMENT_PAGES))
  (value (name buffer-ends) (c-name GTK_MOVEMENT_BUFFER_ENDS))
)

(enum Orientation
  (in-module Gtk)
  (c-name GtkOrientation)
  (value (name horizontal) (c-name GTK_ORIENTATION_HORIZONTAL))
  (value (name vertical) (c-name GTK_ORIENTATION_VERTICAL))
)

(enum CornerType
  (in-module Gtk)
  (c-name GtkCornerType)
  (value (name top-left) (c-name GTK_CORNER_TOP_LEFT))
  (value (name bottom-left) (c-name GTK_CORNER_BOTTOM_LEFT))
  (value (name top-right) (c-name GTK_CORNER_TOP_RIGHT))
  (value (name bottom-right) (c-name GTK_CORNER_BOTTOM_RIGHT))
)

(enum PackType
  (in-module Gtk)
  (c-name GtkPackType)
  (value (name start) (c-name GTK_PACK_START))
  (value (name end) (c-name GTK_PACK_END))
)

(enum PathPriorityType
  (in-module Gtk)
  (c-name GtkPathPriorityType)
  (value (name lowest) (c-name GTK_PATH_PRIO_LOWEST))
  (value (name gtk) (c-name GTK_PATH_PRIO_GTK))
  (value (name application) (c-name GTK_PATH_PRIO_APPLICATION))
  (value (name rc) (c-name GTK_PATH_PRIO_RC))
  (value (name highest) (c-name GTK_PATH_PRIO_HIGHEST))
  (value (name mask) (c-name GTK_PATH_PRIO_MASK))
)

(enum PathType
  (in-module Gtk)
  (c-name GtkPathType)
  (value (name widget) (c-name GTK_PATH_WIDGET))
  (value (name widget-class) (c-name GTK_PATH_WIDGET_CLASS))
  (value (name class) (c-name GTK_PATH_CLASS))
)

(enum PolicyType
  (in-module Gtk)
  (c-name GtkPolicyType)
  (value (name always) (c-name GTK_POLICY_ALWAYS))
  (value (name automatic) (c-name GTK_POLICY_AUTOMATIC))
  (value (name never) (c-name GTK_POLICY_NEVER))
)

(enum PositionType
  (in-module Gtk)
  (c-name GtkPositionType)
  (value (name left) (c-name GTK_POS_LEFT))
  (value (name right) (c-name GTK_POS_RIGHT))
  (value (name top) (c-name GTK_POS_TOP))
  (value (name bottom) (c-name GTK_POS_BOTTOM))
)

(enum PreviewType
  (in-module Gtk)
  (c-name GtkPreviewType)
  (value (name color) (c-name GTK_PREVIEW_COLOR))
  (value (name grayscale) (c-name GTK_PREVIEW_GRAYSCALE))
)

(enum ReliefStyle
  (in-module Gtk)
  (c-name GtkReliefStyle)
  (value (name normal) (c-name GTK_RELIEF_NORMAL))
  (value (name half) (c-name GTK_RELIEF_HALF))
  (value (name none) (c-name GTK_RELIEF_NONE))
)

(enum ResizeMode
  (in-module Gtk)
  (c-name GtkResizeMode)
  (value (name parent) (c-name GTK_RESIZE_PARENT))
  (value (name queue) (c-name GTK_RESIZE_QUEUE))
  (value (name immediate) (c-name GTK_RESIZE_IMMEDIATE))
)

(enum SignalRunType
  (in-module Gtk)
  (c-name GtkSignalRunType)
  (value (name first) (c-name GTK_RUN_FIRST))
  (value (name last) (c-name GTK_RUN_LAST))
  (value (name both) (c-name GTK_RUN_BOTH))
  (value (name no-recurse) (c-name GTK_RUN_NO_RECURSE))
  (value (name action) (c-name GTK_RUN_ACTION))
  (value (name no-hooks) (c-name GTK_RUN_NO_HOOKS))
)

(enum ScrollType
  (in-module Gtk)
  (c-name GtkScrollType)
  (value (name none) (c-name GTK_SCROLL_NONE))
  (value (name step-backward) (c-name GTK_SCROLL_STEP_BACKWARD))
  (value (name step-forward) (c-name GTK_SCROLL_STEP_FORWARD))
  (value (name page-backward) (c-name GTK_SCROLL_PAGE_BACKWARD))
  (value (name page-forward) (c-name GTK_SCROLL_PAGE_FORWARD))
  (value (name jump) (c-name GTK_SCROLL_JUMP))
  (value (name step-up) (c-name GTK_SCROLL_STEP_UP))
  (value (name step-down) (c-name GTK_SCROLL_STEP_DOWN))
  (value (name page-up) (c-name GTK_SCROLL_PAGE_UP))
  (value (name page-down) (c-name GTK_SCROLL_PAGE_DOWN))
  (value (name step-left) (c-name GTK_SCROLL_STEP_LEFT))
  (value (name step-right) (c-name GTK_SCROLL_STEP_RIGHT))
  (value (name page-left) (c-name GTK_SCROLL_PAGE_LEFT))
  (value (name page-right) (c-name GTK_SCROLL_PAGE_RIGHT))
)

(enum SelectionMode
  (in-module Gtk)
  (c-name GtkSelectionMode)
  (value (name single) (c-name GTK_SELECTION_SINGLE))
  (value (name browse) (c-name GTK_SELECTION_BROWSE))
  (value (name multiple) (c-name GTK_SELECTION_MULTIPLE))
  (value (name extended) (c-name GTK_SELECTION_EXTENDED))
)

(enum ShadowType
  (in-module Gtk)
  (c-name GtkShadowType)
  (value (name none) (c-name GTK_SHADOW_NONE))
  (value (name in) (c-name GTK_SHADOW_IN))
  (value (name out) (c-name GTK_SHADOW_OUT))
  (value (name etched-in) (c-name GTK_SHADOW_ETCHED_IN))
  (value (name etched-out) (c-name GTK_SHADOW_ETCHED_OUT))
)

(enum StateType
  (in-module Gtk)
  (c-name GtkStateType)
  (value (name normal) (c-name GTK_STATE_NORMAL))
  (value (name active) (c-name GTK_STATE_ACTIVE))
  (value (name prelight) (c-name GTK_STATE_PRELIGHT))
  (value (name selected) (c-name GTK_STATE_SELECTED))
  (value (name insensitive) (c-name GTK_STATE_INSENSITIVE))
)

(enum SubmenuDirection
  (in-module Gtk)
  (c-name GtkSubmenuDirection)
  (value (name left) (c-name GTK_DIRECTION_LEFT))
  (value (name right) (c-name GTK_DIRECTION_RIGHT))
)

(enum SubmenuPlacement
  (in-module Gtk)
  (c-name GtkSubmenuPlacement)
  (value (name top-bottom) (c-name GTK_TOP_BOTTOM))
  (value (name left-right) (c-name GTK_LEFT_RIGHT))
)

(enum ToolbarStyle
  (in-module Gtk)
  (c-name GtkToolbarStyle)
  (value (name icons) (c-name GTK_TOOLBAR_ICONS))
  (value (name text) (c-name GTK_TOOLBAR_TEXT))
  (value (name both) (c-name GTK_TOOLBAR_BOTH))
  (value (name both-horiz) (c-name GTK_TOOLBAR_BOTH_HORIZ))
)

(enum TroughType
  (in-module Gtk)
  (c-name GtkTroughType)
  (value (name none) (c-name GTK_TROUGH_NONE))
  (value (name start) (c-name GTK_TROUGH_START))
  (value (name end) (c-name GTK_TROUGH_END))
  (value (name jump) (c-name GTK_TROUGH_JUMP))
)

(enum UpdateType
  (in-module Gtk)
  (c-name GtkUpdateType)
  (value (name continuous) (c-name GTK_UPDATE_CONTINUOUS))
  (value (name discontinuous) (c-name GTK_UPDATE_DISCONTINUOUS))
  (value (name delayed) (c-name GTK_UPDATE_DELAYED))
)

(enum Visibility
  (in-module Gtk)
  (c-name GtkVisibility)
  (value (name none) (c-name GTK_VISIBILITY_NONE))
  (value (name partial) (c-name GTK_VISIBILITY_PARTIAL))
  (value (name full) (c-name GTK_VISIBILITY_FULL))
)

(enum WindowPosition
  (in-module Gtk)
  (c-name GtkWindowPosition)
  (value (name none) (c-name GTK_WIN_POS_NONE))
  (value (name center) (c-name GTK_WIN_POS_CENTER))
  (value (name mouse) (c-name GTK_WIN_POS_MOUSE))
  (value (name center-always) (c-name GTK_WIN_POS_CENTER_ALWAYS))
  (value (name center-on-parent) (c-name GTK_WIN_POS_CENTER_ON_PARENT))
)

(enum WindowType
  (in-module Gtk)
  (c-name GtkWindowType)
  (value (name toplevel) (c-name GTK_WINDOW_TOPLEVEL))
  (value (name popup) (c-name GTK_WINDOW_POPUP))
)

(enum SortType
  (in-module Gtk)
  (c-name GtkSortType)
  (value (name ascending) (c-name GTK_SORT_ASCENDING))
  (value (name descending) (c-name GTK_SORT_DESCENDING))
)

(enum ImageType
  (in-module Gtk)
  (c-name GtkImageType)
  (value (name empty) (c-name GTK_IMAGE_EMPTY))
  (value (name pixmap) (c-name GTK_IMAGE_PIXMAP))
  (value (name image) (c-name GTK_IMAGE_IMAGE))
  (value (name pixbuf) (c-name GTK_IMAGE_PIXBUF))
  (value (name stock) (c-name GTK_IMAGE_STOCK))
  (value (name icon-set) (c-name GTK_IMAGE_ICON_SET))
)

(enum MessageType
  (in-module Gtk)
  (c-name GtkMessageType)
  (value (name info) (c-name GTK_MESSAGE_INFO))
  (value (name warning) (c-name GTK_MESSAGE_WARNING))
  (value (name question) (c-name GTK_MESSAGE_QUESTION))
  (value (name error) (c-name GTK_MESSAGE_ERROR))
)

(enum ButtonsType
  (in-module Gtk)
  (c-name GtkButtonsType)
  (value (name none) (c-name GTK_BUTTONS_NONE))
  (value (name ok) (c-name GTK_BUTTONS_OK))
  (value (name close) (c-name GTK_BUTTONS_CLOSE))
  (value (name cancel) (c-name GTK_BUTTONS_CANCEL))
  (value (name yes-no) (c-name GTK_BUTTONS_YES_NO))
  (value (name ok-cancel) (c-name GTK_BUTTONS_OK_CANCEL))
)

(flags ObjectFlags
  (in-module Gtk)
  (c-name GtkObjectFlags)
  (value (name destroyed) (c-name GTK_DESTROYED))
  (value (name floating) (c-name GTK_FLOATING))
  (value (name reserved-1) (c-name GTK_RESERVED_1))
  (value (name reserved-2) (c-name GTK_RESERVED_2))
)

(flags ArgFlags
  (in-module Gtk)
  (c-name GtkArgFlags)
  (value (name readable) (c-name GTK_ARG_READABLE))
  (value (name writable) (c-name GTK_ARG_WRITABLE))
  (value (name construct) (c-name GTK_ARG_CONSTRUCT))
  (value (name construct-only) (c-name GTK_ARG_CONSTRUCT_ONLY))
  (value (name child-arg) (c-name GTK_ARG_CHILD_ARG))
)

(enum SideType
  (in-module Gtk)
  (c-name GtkSideType)
  (value (name top) (c-name GTK_SIDE_TOP))
  (value (name bottom) (c-name GTK_SIDE_BOTTOM))
  (value (name left) (c-name GTK_SIDE_LEFT))
  (value (name right) (c-name GTK_SIDE_RIGHT))
)

(enum AnchorType
  (in-module Gtk)
  (c-name GtkAnchorType)
  (value (name center) (c-name GTK_ANCHOR_CENTER))
  (value (name north) (c-name GTK_ANCHOR_NORTH))
  (value (name north-west) (c-name GTK_ANCHOR_NORTH_WEST))
  (value (name north-east) (c-name GTK_ANCHOR_NORTH_EAST))
  (value (name south) (c-name GTK_ANCHOR_SOUTH))
  (value (name south-west) (c-name GTK_ANCHOR_SOUTH_WEST))
  (value (name south-east) (c-name GTK_ANCHOR_SOUTH_EAST))
  (value (name west) (c-name GTK_ANCHOR_WEST))
  (value (name east) (c-name GTK_ANCHOR_EAST))
  (value (name n) (c-name GTK_ANCHOR_N))
  (value (name nw) (c-name GTK_ANCHOR_NW))
  (value (name ne) (c-name GTK_ANCHOR_NE))
  (value (name s) (c-name GTK_ANCHOR_S))
  (value (name sw) (c-name GTK_ANCHOR_SW))
  (value (name se) (c-name GTK_ANCHOR_SE))
  (value (name w) (c-name GTK_ANCHOR_W))
  (value (name e) (c-name GTK_ANCHOR_E))
)

(flags PrivateFlags
  (in-module Gtk)
  (c-name GtkPrivateFlags)
  (value (name user-style) (c-name PRIVATE_GTK_USER_STYLE))
  (value (name resize-pending) (c-name PRIVATE_GTK_RESIZE_PENDING))
  (value (name resize-needed) (c-name PRIVATE_GTK_RESIZE_NEEDED))
  (value (name leave-pending) (c-name PRIVATE_GTK_LEAVE_PENDING))
  (value (name has-shape-mask) (c-name PRIVATE_GTK_HAS_SHAPE_MASK))
  (value (name in-reparent) (c-name PRIVATE_GTK_IN_REPARENT))
  (value (name direction-set) (c-name PRIVATE_GTK_DIRECTION_SET))
  (value (name direction-ltr) (c-name PRIVATE_GTK_DIRECTION_LTR))
  (value (name anchored) (c-name PRIVATE_GTK_ANCHORED))
)

(enum ProgressBarStyle
  (in-module Gtk)
  (c-name GtkProgressBarStyle)
  (value (name continuous) (c-name GTK_PROGRESS_CONTINUOUS))
  (value (name discrete) (c-name GTK_PROGRESS_DISCRETE))
)

(enum ProgressBarOrientation
  (in-module Gtk)
  (c-name GtkProgressBarOrientation)
  (value (name left-to-right) (c-name GTK_PROGRESS_LEFT_TO_RIGHT))
  (value (name right-to-left) (c-name GTK_PROGRESS_RIGHT_TO_LEFT))
  (value (name bottom-to-top) (c-name GTK_PROGRESS_BOTTOM_TO_TOP))
  (value (name top-to-bottom) (c-name GTK_PROGRESS_TOP_TO_BOTTOM))
)

(flags RcFlags
  (in-module Gtk)
  (c-name GtkRcFlags)
  (value (name fg) (c-name GTK_RC_FG))
  (value (name bg) (c-name GTK_RC_BG))
  (value (name text) (c-name GTK_RC_TEXT))
  (value (name base) (c-name GTK_RC_BASE))
)

(enum RcTokenType
  (in-module Gtk)
  (c-name GtkRcTokenType)
  (value (name invalid) (c-name GTK_RC_TOKEN_INVALID))
  (value (name include) (c-name GTK_RC_TOKEN_INCLUDE))
  (value (name normal) (c-name GTK_RC_TOKEN_NORMAL))
  (value (name active) (c-name GTK_RC_TOKEN_ACTIVE))
  (value (name prelight) (c-name GTK_RC_TOKEN_PRELIGHT))
  (value (name selected) (c-name GTK_RC_TOKEN_SELECTED))
  (value (name insensitive) (c-name GTK_RC_TOKEN_INSENSITIVE))
  (value (name fg) (c-name GTK_RC_TOKEN_FG))
  (value (name bg) (c-name GTK_RC_TOKEN_BG))
  (value (name text) (c-name GTK_RC_TOKEN_TEXT))
  (value (name base) (c-name GTK_RC_TOKEN_BASE))
  (value (name xthickness) (c-name GTK_RC_TOKEN_XTHICKNESS))
  (value (name ythickness) (c-name GTK_RC_TOKEN_YTHICKNESS))
  (value (name font) (c-name GTK_RC_TOKEN_FONT))
  (value (name fontset) (c-name GTK_RC_TOKEN_FONTSET))
  (value (name font-name) (c-name GTK_RC_TOKEN_FONT_NAME))
  (value (name bg-pixmap) (c-name GTK_RC_TOKEN_BG_PIXMAP))
  (value (name pixmap-path) (c-name GTK_RC_TOKEN_PIXMAP_PATH))
  (value (name style) (c-name GTK_RC_TOKEN_STYLE))
  (value (name binding) (c-name GTK_RC_TOKEN_BINDING))
  (value (name bind) (c-name GTK_RC_TOKEN_BIND))
  (value (name widget) (c-name GTK_RC_TOKEN_WIDGET))
  (value (name widget-class) (c-name GTK_RC_TOKEN_WIDGET_CLASS))
  (value (name class) (c-name GTK_RC_TOKEN_CLASS))
  (value (name lowest) (c-name GTK_RC_TOKEN_LOWEST))
  (value (name gtk) (c-name GTK_RC_TOKEN_GTK))
  (value (name application) (c-name GTK_RC_TOKEN_APPLICATION))
  (value (name rc) (c-name GTK_RC_TOKEN_RC))
  (value (name highest) (c-name GTK_RC_TOKEN_HIGHEST))
  (value (name engine) (c-name GTK_RC_TOKEN_ENGINE))
  (value (name module-path) (c-name GTK_RC_TOKEN_MODULE_PATH))
  (value (name im-module-path) (c-name GTK_RC_TOKEN_IM_MODULE_PATH))
  (value (name im-module-file) (c-name GTK_RC_TOKEN_IM_MODULE_FILE))
  (value (name stock) (c-name GTK_RC_TOKEN_STOCK))
  (value (name ltr) (c-name GTK_RC_TOKEN_LTR))
  (value (name rtl) (c-name GTK_RC_TOKEN_RTL))
  (value (name last) (c-name GTK_RC_TOKEN_LAST))
)

(enum SpinButtonUpdatePolicy
  (in-module Gtk)
  (c-name GtkSpinButtonUpdatePolicy)
  (value (name always) (c-name GTK_UPDATE_ALWAYS))
  (value (name if-valid) (c-name GTK_UPDATE_IF_VALID))
)

(enum SpinType
  (in-module Gtk)
  (c-name GtkSpinType)
  (value (name step-forward) (c-name GTK_SPIN_STEP_FORWARD))
  (value (name step-backward) (c-name GTK_SPIN_STEP_BACKWARD))
  (value (name page-forward) (c-name GTK_SPIN_PAGE_FORWARD))
  (value (name page-backward) (c-name GTK_SPIN_PAGE_BACKWARD))
  (value (name home) (c-name GTK_SPIN_HOME))
  (value (name end) (c-name GTK_SPIN_END))
  (value (name user-defined) (c-name GTK_SPIN_USER_DEFINED))
)

(enum WrapMode
  (in-module Gtk)
  (c-name GtkWrapMode)
  (value (name none) (c-name GTK_WRAP_NONE))
  (value (name char) (c-name GTK_WRAP_CHAR))
  (value (name word) (c-name GTK_WRAP_WORD))
)

(enum TextWindowType
  (in-module Gtk)
  (c-name GtkTextWindowType)
  (value (name private) (c-name GTK_TEXT_WINDOW_PRIVATE))
  (value (name widget) (c-name GTK_TEXT_WINDOW_WIDGET))
  (value (name text) (c-name GTK_TEXT_WINDOW_TEXT))
  (value (name left) (c-name GTK_TEXT_WINDOW_LEFT))
  (value (name right) (c-name GTK_TEXT_WINDOW_RIGHT))
  (value (name top) (c-name GTK_TEXT_WINDOW_TOP))
  (value (name bottom) (c-name GTK_TEXT_WINDOW_BOTTOM))
)

(enum ToolbarChildType
  (in-module Gtk)
  (c-name GtkToolbarChildType)
  (value (name space) (c-name GTK_TOOLBAR_CHILD_SPACE))
  (value (name button) (c-name GTK_TOOLBAR_CHILD_BUTTON))
  (value (name togglebutton) (c-name GTK_TOOLBAR_CHILD_TOGGLEBUTTON))
  (value (name radiobutton) (c-name GTK_TOOLBAR_CHILD_RADIOBUTTON))
  (value (name widget) (c-name GTK_TOOLBAR_CHILD_WIDGET))
)

(enum ToolbarSpaceStyle
  (in-module Gtk)
  (c-name GtkToolbarSpaceStyle)
  (value (name empty) (c-name GTK_TOOLBAR_SPACE_EMPTY))
  (value (name line) (c-name GTK_TOOLBAR_SPACE_LINE))
)

(enum TreeViewMode
  (in-module Gtk)
  (c-name GtkTreeViewMode)
  (value (name line) (c-name GTK_TREE_VIEW_LINE))
  (value (name item) (c-name GTK_TREE_VIEW_ITEM))
)

(flags TreeModelFlags
  (in-module Gtk)
  (c-name GtkTreeModelFlags)
  (value (name t) (c-name GTK_TREE_MODEL_ITERS_PERSIST))
)

(enum TreeSelectionMode
  (in-module Gtk)
  (c-name GtkTreeSelectionMode)
  (value (name single) (c-name GTK_TREE_SELECTION_SINGLE))
  (value (name multi) (c-name GTK_TREE_SELECTION_MULTI))
)

(enum TreeSortOrder
  (in-module Gtk)
  (c-name GtkTreeSortOrder)
  (value (name ascending) (c-name GTK_TREE_SORT_ASCENDING))
  (value (name descending) (c-name GTK_TREE_SORT_DESCENDING))
)

(enum TreeViewDropPosition
  (in-module Gtk)
  (c-name GtkTreeViewDropPosition)
  (value (name before) (c-name GTK_TREE_VIEW_DROP_BEFORE))
  (value (name after) (c-name GTK_TREE_VIEW_DROP_AFTER))
  (value (name into-or-before) (c-name GTK_TREE_VIEW_DROP_INTO_OR_BEFORE))
  (value (name into-or-after) (c-name GTK_TREE_VIEW_DROP_INTO_OR_AFTER))
)

(enum TreeViewColumnSizing
  (in-module Gtk)
  (c-name GtkTreeViewColumnSizing)
  (value (name resizeable) (c-name GTK_TREE_VIEW_COLUMN_RESIZEABLE))
  (value (name autosize) (c-name GTK_TREE_VIEW_COLUMN_AUTOSIZE))
  (value (name fixed) (c-name GTK_TREE_VIEW_COLUMN_FIXED))
)

(enum FundamentalType
  (in-module Gtk)
  (c-name GtkFundamentalType)
  (value (name invalid) (c-name GTK_TYPE_INVALID))
  (value (name none) (c-name GTK_TYPE_NONE))
  (value (name enum) (c-name GTK_TYPE_ENUM))
  (value (name flags) (c-name GTK_TYPE_FLAGS))
  (value (name char) (c-name GTK_TYPE_CHAR))
  (value (name uchar) (c-name GTK_TYPE_UCHAR))
  (value (name bool) (c-name GTK_TYPE_BOOL))
  (value (name int) (c-name GTK_TYPE_INT))
  (value (name uint) (c-name GTK_TYPE_UINT))
  (value (name long) (c-name GTK_TYPE_LONG))
  (value (name ulong) (c-name GTK_TYPE_ULONG))
  (value (name float) (c-name GTK_TYPE_FLOAT))
  (value (name double) (c-name GTK_TYPE_DOUBLE))
  (value (name string) (c-name GTK_TYPE_STRING))
  (value (name boxed) (c-name GTK_TYPE_BOXED))
  (value (name pointer) (c-name GTK_TYPE_POINTER))
)

(flags WidgetFlags
  (in-module Gtk)
  (c-name GtkWidgetFlags)
  (value (name toplevel) (c-name GTK_TOPLEVEL))
  (value (name no-window) (c-name GTK_NO_WINDOW))
  (value (name realized) (c-name GTK_REALIZED))
  (value (name mapped) (c-name GTK_MAPPED))
  (value (name visible) (c-name GTK_VISIBLE))
  (value (name sensitive) (c-name GTK_SENSITIVE))
  (value (name parent-sensitive) (c-name GTK_PARENT_SENSITIVE))
  (value (name can-focus) (c-name GTK_CAN_FOCUS))
  (value (name has-focus) (c-name GTK_HAS_FOCUS))
  (value (name can-default) (c-name GTK_CAN_DEFAULT))
  (value (name has-default) (c-name GTK_HAS_DEFAULT))
  (value (name has-grab) (c-name GTK_HAS_GRAB))
  (value (name rc-style) (c-name GTK_RC_STYLE))
  (value (name composite-child) (c-name GTK_COMPOSITE_CHILD))
  (value (name no-reparent) (c-name GTK_NO_REPARENT))
  (value (name app-paintable) (c-name GTK_APP_PAINTABLE))
  (value (name receives-default) (c-name GTK_RECEIVES_DEFAULT))
  (value (name double-buffered) (c-name GTK_DOUBLE_BUFFERED))
)

(enum SizeGroupMode
  (in-module Gtk)
  (c-name GtkSizeGroupMode)
  (value (name none) (c-name GTK_SIZE_GROUP_NONE))
  (value (name horizontal) (c-name GTK_SIZE_GROUP_HORIZONTAL))
  (value (name vertical) (c-name GTK_SIZE_GROUP_VERTICAL))
  (value (name both) (c-name GTK_SIZE_GROUP_BOTH))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtk.h



;; From /opt/pango/include/gtk-2.0/gtk/gtkaccelgroup.h

(function gtk_accelerator_valid
  (c-name gtk_accelerator_valid)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_accelerator_parse
  (c-name gtk_accelerator_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* accelerator))
  (parameter (type-and-name guint* accelerator_key))
  (parameter (type-and-name GdkModifierType* accelerator_mods))
)

(function gtk_accelerator_name
  (c-name gtk_accelerator_name)
  (return-type gchar*)
  (parameter (type-and-name guint accelerator_key))
  (parameter (type-and-name GdkModifierType accelerator_mods))
)

(function gtk_accelerator_set_default_mod_mask
  (c-name gtk_accelerator_set_default_mod_mask)
  (return-type none)
  (parameter (type-and-name GdkModifierType default_mod_mask))
)

(function gtk_accelerator_get_default_mod_mask
  (c-name gtk_accelerator_get_default_mod_mask)
  (return-type guint)
)

(function gtk_accel_group_new
  (is-constructor-of GtkAccelGroup)
  (c-name gtk_accel_group_new)
  (return-type GtkAccelGroup*)
)

(function accel_group_get_default
  (c-name gtk_accel_group_get_default)
  (return-type GtkAccelGroup*)
)

(method ref
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_ref)
  (return-type GtkAccelGroup*)
)

(method unref
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unref)
  (return-type none)
)

(method lock
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_lock)
  (return-type none)
)

(method unlock
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unlock)
  (return-type none)
)

(function accel_groups_activate
  (c-name gtk_accel_groups_activate)
  (return-type gboolean)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method activate
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_activate)
  (return-type gboolean)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method attach
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_attach)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
)

(method detach
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_detach)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
)

(method get_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_get_entry)
  (return-type GtkAccelEntry*)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method lock_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_lock_entry)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method unlock_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unlock_entry)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method add
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_add)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* accel_signal))
)

(method remove
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_remove)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkObject* object))
)

(function gtk_accel_group_handle_add
  (c-name gtk_accel_group_handle_add)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint accel_signal_id))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
)

(function gtk_accel_group_handle_remove
  (c-name gtk_accel_group_handle_remove)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(function gtk_accel_group_create_add
  (c-name gtk_accel_group_create_add)
  (return-type guint)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name guint handler_offset))
)

(function gtk_accel_group_create_remove
  (c-name gtk_accel_group_create_remove)
  (return-type guint)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name guint handler_offset))
)

(function gtk_accel_groups_from_object
  (c-name gtk_accel_groups_from_object)
  (return-type GSList*)
  (parameter (type-and-name GtkObject* object))
)

(function gtk_accel_group_entries_from_object
  (c-name gtk_accel_group_entries_from_object)
  (return-type GSList*)
  (parameter (type-and-name GtkObject* object))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkaccellabel.h

(function gtk_accel_label_get_type
  (c-name gtk_accel_label_get_type)
  (return-type GtkType)
)

(function gtk_accel_label_new
  (c-name gtk_accel_label_new)
  (is-constructor-of GtkAccelLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* string))
)

(method get_accel_width
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_get_accel_width)
  (return-type guint)
)

(method set_accel_widget
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_set_accel_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
)

(method refetch
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_refetch)
  (return-type gboolean)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkadjustment.h

(function gtk_adjustment_get_type
  (c-name gtk_adjustment_get_type)
  (return-type GtkType)
)

(function gtk_adjustment_new
  (c-name gtk_adjustment_new)
  (is-constructor-of GtkAdjustment)
  (return-type GtkObject*)
  (parameter (type-and-name gfloat value))
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
  (parameter (type-and-name gfloat step_increment))
  (parameter (type-and-name gfloat page_increment))
  (parameter (type-and-name gfloat page_size))
)

(method changed
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_changed)
  (return-type none)
)

(method value_changed
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_value_changed)
  (return-type none)
)

(method clamp_page
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_clamp_page)
  (return-type none)
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
)

(method set_value
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkalignment.h

(function gtk_alignment_get_type
  (c-name gtk_alignment_get_type)
  (return-type GtkType)
)

(function gtk_alignment_new
  (c-name gtk_alignment_new)
  (is-constructor-of GtkAlignment)
  (return-type GtkWidget*)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)

(method set
  (of-object Alignment (Gtk))
  (c-name gtk_alignment_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkarrow.h

(function gtk_arrow_get_type
  (c-name gtk_arrow_get_type)
  (return-type GtkType)
)

(function gtk_arrow_new
  (c-name gtk_arrow_new)
  (is-constructor-of GtkArrow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)

(method set
  (of-object Arrow (Gtk))
  (c-name gtk_arrow_set)
  (return-type none)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkaspectframe.h

(function gtk_aspect_frame_get_type
  (c-name gtk_aspect_frame_get_type)
  (return-type GtkType)
)

(function gtk_aspect_frame_new
  (c-name gtk_aspect_frame_new)
  (is-constructor-of GtkAspectFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label) (null-ok) (default "NULL"))
  (parameter (type-and-name gfloat xalign) (default "0.5"))
  (parameter (type-and-name gfloat yalign) (default "0.5"))
  (parameter (type-and-name gfloat ratio) (default "1"))
  (parameter (type-and-name gboolean obey_child) (default "TRUE"))
)

(method set
  (of-object AspectFrame (Gtk))
  (c-name gtk_aspect_frame_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat ratio))
  (parameter (type-and-name gboolean obey_child))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkbbox.h

(function gtk_button_box_get_type
  (c-name gtk_button_box_get_type)
  (return-type GtkType)
)

(method get_layout
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_layout)
  (return-type GtkButtonBoxStyle)
)

(method set_layout
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_layout)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout_style))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkbin.h

(function gtk_bin_get_type
  (c-name gtk_bin_get_type)
  (return-type GtkType)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkbindings.h

(method init
  (of-object PatternSpec (Gtk))
  (c-name gtk_pattern_spec_init)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method free_segs
  (of-object PatternSpec (Gtk))
  (c-name gtk_pattern_spec_free_segs)
  (return-type none)
)

(function gtk_pattern_match
  (c-name gtk_pattern_match)
  (return-type gboolean)
  (parameter (type-and-name GtkPatternSpec* pspec))
  (parameter (type-and-name guint string_length))
  (parameter (type-and-name const-gchar* string))
  (parameter (type-and-name const-gchar* string_reversed))
)

(function gtk_pattern_match_string
  (c-name gtk_pattern_match_string)
  (return-type gboolean)
  (parameter (type-and-name GtkPatternSpec* pspec))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_pattern_match_simple
  (c-name gtk_pattern_match_simple)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* pattern))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_binding_set_new
  (c-name gtk_binding_set_new)
  (return-type GtkBindingSet*)
  (parameter (type-and-name const-gchar* set_name))
)

(function gtk_binding_set_by_class
  (c-name gtk_binding_set_by_class)
  (return-type GtkBindingSet*)
  (parameter (type-and-name gpointer object_class))
)

(function gtk_binding_set_find
  (c-name gtk_binding_set_find)
  (return-type GtkBindingSet*)
  (parameter (type-and-name const-gchar* set_name))
)

(function gtk_bindings_activate
  (c-name gtk_bindings_activate)
  (return-type gboolean)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name guint modifiers))
)

(method activate
  (of-object BindingSet (Gtk))
  (c-name gtk_binding_set_activate)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name guint modifiers))
  (parameter (type-and-name GtkObject* object))
)

(function gtk_binding_entry_clear
  (c-name gtk_binding_entry_clear)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name guint modifiers))
)

(function binding_entry_add_signal
  (c-name gtk_binding_entry_add_signal)
  (return-type none)
  (parameter (type-and-name GtkBindingSet* binding_set))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name guint modifiers))
  (parameter (type-and-name const-gchar* signal_name))
  (parameter (type-and-name guint n_args))
  (varargs t)
)

(method add_path
  (of-object BindingSet (Gtk))
  (c-name gtk_binding_set_add_path)
  (return-type none)
  (parameter (type-and-name GtkPathType path_type))
  (parameter (type-and-name const-gchar* path_pattern))
  (parameter (type-and-name GtkPathPriorityType priority))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkbox.h

(function gtk_box_get_type
  (c-name gtk_box_get_type)
  (return-type GtkType)
)

(method pack_start
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand) (default "TRUE"))
  (parameter (type-and-name gboolean fill) (default "TRUE"))
  (parameter (type-and-name guint padding) (default "0"))
)

(method pack_end
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand) (default "TRUE"))
  (parameter (type-and-name gboolean fill) (default "TRUE"))
  (parameter (type-and-name guint padding) (default "0"))
)

(method pack_start_defaults
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method pack_end_defaults
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_homogeneous
  (of-object Box (Gtk))
  (c-name gtk_box_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method set_spacing
  (of-object Box (Gtk))
  (c-name gtk_box_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method get_spacing
  (of-object Box (Gtk))
  (c-name gtk_box_get_spacing)
  (return-type gint)
)

(method reorder_child
  (of-object Box (Gtk))
  (c-name gtk_box_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method query_child_packing
  (of-object Box (Gtk))
  (c-name gtk_box_query_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name guint* padding))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_child_packing
  (of-object Box (Gtk))
  (c-name gtk_box_set_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name guint padding))
  (parameter (type-and-name GtkPackType pack_type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkbutton.h

(function gtk_button_get_type
  (c-name gtk_button_get_type)
  (return-type GtkType)
)

(function gtk_button_new
  (c-name gtk_button_new)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
)

(function gtk_button_new_with_label
  (c-name gtk_button_new_with_label)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_button_new_from_stock
  (c-name gtk_button_new_from_stock)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
)

(function gtk_button_new_with_mnemonic
  (c-name gtk_button_new_with_mnemonic)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method pressed
  (of-object Button (Gtk))
  (c-name gtk_button_pressed)
  (return-type none)
)

(method released
  (of-object Button (Gtk))
  (c-name gtk_button_released)
  (return-type none)
)

(method clicked
  (of-object Button (Gtk))
  (c-name gtk_button_clicked)
  (return-type none)
)

(method enter
  (of-object Button (Gtk))
  (c-name gtk_button_enter)
  (return-type none)
)

(method leave
  (of-object Button (Gtk))
  (c-name gtk_button_leave)
  (return-type none)
)

(method set_relief
  (of-object Button (Gtk))
  (c-name gtk_button_set_relief)
  (return-type none)
  (parameter (type-and-name GtkReliefStyle newstyle))
)

(method get_relief
  (of-object Button (Gtk))
  (c-name gtk_button_get_relief)
  (return-type GtkReliefStyle)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcalendar.h

(function gtk_calendar_get_type
  (c-name gtk_calendar_get_type)
  (return-type GtkType)
)

(function gtk_calendar_new
  (c-name gtk_calendar_new)
  (is-constructor-of GtkCalendar)
  (return-type GtkWidget*)
)

(method select_month
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_month)
  (return-type gint)
  (parameter (type-and-name guint month))
  (parameter (type-and-name guint year))
)

(method select_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_day)
  (return-type none)
  (parameter (type-and-name guint day))
)

(method mark_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_mark_day)
  (return-type gint)
  (parameter (type-and-name guint day))
)

(method unmark_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_unmark_day)
  (return-type gint)
  (parameter (type-and-name guint day))
)

(method clear_marks
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_clear_marks)
  (return-type none)
)

(method display_options
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_display_options)
  (return-type none)
  (parameter (type-and-name GtkCalendarDisplayOptions flags))
)

(method get_date
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_get_date)
  (return-type none)
  (parameter (type-and-name guint* year))
  (parameter (type-and-name guint* month))
  (parameter (type-and-name guint* day))
)

(method freeze
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_freeze)
  (return-type none)
)

(method thaw
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_thaw)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcellrenderer.h

(function gtk_cell_renderer_get_type
  (c-name gtk_cell_renderer_get_type)
  (return-type GtkType)
)

(method get_size
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_get_size)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(method render
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_render)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkRectangle* background_area))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name GdkRectangle* expose_area))
  (parameter (type-and-name guint flags))
)

(method event
  (of-object CellRenderer (Gtk))
  (c-name gtk_cell_renderer_event)
  (return-type gint)
  (parameter (type-and-name GdkEvent* event))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* path))
  (parameter (type-and-name GdkRectangle* background_area))
  (parameter (type-and-name GdkRectangle* cell_area))
  (parameter (type-and-name guint flags))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h

(function gtk_cell_renderer_pixbuf_get_type
  (c-name gtk_cell_renderer_pixbuf_get_type)
  (return-type GtkType)
)

(function gtk_cell_renderer_pixbuf_new
  (c-name gtk_cell_renderer_pixbuf_new)
  (is-constructor-of GtkCellRendererPixbuf)
  (return-type GtkCellRenderer*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcellrenderertext.h

(function gtk_cell_renderer_text_get_type
  (c-name gtk_cell_renderer_text_get_type)
  (return-type GtkType)
)

(function gtk_cell_renderer_text_new
  (c-name gtk_cell_renderer_text_new)
  (is-constructor-of GtkCellRendererText)
  (return-type GtkCellRenderer*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcellrenderertextpixbuf.h

(function gtk_cell_renderer_text_pixbuf_get_type
  (c-name gtk_cell_renderer_text_pixbuf_get_type)
  (return-type GtkType)
)

(function gtk_cell_renderer_text_pixbuf_new
  (c-name gtk_cell_renderer_text_pixbuf_new)
  (is-constructor-of GtkCellRendererTextPixbuf)
  (return-type GtkCellRenderer*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcellrenderertoggle.h

(function gtk_cell_renderer_toggle_get_type
  (c-name gtk_cell_renderer_toggle_get_type)
  (return-type GtkType)
)

(function gtk_cell_renderer_toggle_new
  (c-name gtk_cell_renderer_toggle_new)
  (is-constructor-of GtkCellRendererToggle)
  (return-type GtkCellRenderer*)
)

(method set_radio
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_set_radio)
  (return-type none)
  (parameter (type-and-name gboolean radio))
)

(method get_active
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_get_active)
  (return-type gboolean)
)

(method set_active
  (of-object CellRendererToggle (Gtk))
  (c-name gtk_cell_renderer_toggle_set_active)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkcheckbutton.h

(function gtk_check_button_get_type
  (c-name gtk_check_button_get_type)
  (return-type GtkType)
)

(function gtk_check_button_new
  (c-name gtk_check_button_new)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
)

(function gtk_check_button_new_with_label
  (c-name gtk_check_button_new_with_label)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_check_button_new_with_mnemonic
  (c-name gtk_check_button_new_with_mnemonic)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkcheckmenuitem.h

(function gtk_check_menu_item_get_type
  (c-name gtk_check_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_check_menu_item_new
  (c-name gtk_check_menu_item_new)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
)

(function gtk_check_menu_item_new_with_label
  (c-name gtk_check_menu_item_new_with_label)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_check_menu_item_new_with_mnemonic
  (c-name gtk_check_menu_item_new_with_mnemonic)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_active
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method toggled
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_toggled)
  (return-type none)
)

(method set_inconsistent
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_inconsistent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_inconsistent
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_get_inconsistent)
  (return-type gboolean)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkclipboard.h

(method set_with_data
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_set_with_data)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint n_targets))
  (parameter (type-and-name GtkClipboardGetFunc get_func))
  (parameter (type-and-name GtkClipboardClearFunc clear_func))
  (parameter (type-and-name gpointer user_data))
)

(method set_with_owner
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_set_with_owner)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint n_targets))
  (parameter (type-and-name GtkClipboardGetFunc get_func))
  (parameter (type-and-name GtkClipboardClearFunc clear_func))
  (parameter (type-and-name GObject* owner))
)

(method get_owner
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_get_owner)
  (return-type GObject*)
)

(method clear
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_clear)
  (return-type none)
)

(method set_text
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method request_contents
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_request_contents)
  (return-type none)
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name GtkClipboardReceivedFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method request_text
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_request_text)
  (return-type none)
  (parameter (type-and-name GtkClipboardTextReceivedFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method wait_for_contents
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_wait_for_contents)
  (return-type GtkSelectionData*)
  (parameter (type-and-name GdkAtom target))
)

(method wait_for_text
  (of-object Clipboard (Gtk))
  (c-name gtk_clipboard_wait_for_text)
  (return-type gchar*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkclist.h

(function gtk_clist_get_type
  (c-name gtk_clist_get_type)
  (return-type GtkType)
)

(method construct
  (of-object CList (Gtk))
  (c-name gtk_clist_construct)
  (return-type none)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_clist_new
  (c-name gtk_clist_new)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
)

(function gtk_clist_new_with_titles
  (c-name gtk_clist_new_with_titles)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gchar*[] titles))
)

(method set_hadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_hadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_shadow_type
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method set_selection_mode
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method set_reorderable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method set_use_drag_icons
  (of-object CList (Gtk))
  (c-name gtk_clist_set_use_drag_icons)
  (return-type none)
  (parameter (type-and-name gboolean use_icons))
)

(method set_button_actions
  (of-object CList (Gtk))
  (c-name gtk_clist_set_button_actions)
  (return-type none)
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint8 button_actions))
)

(method freeze
  (of-object CList (Gtk))
  (c-name gtk_clist_freeze)
  (return-type none)
)

(method thaw
  (of-object CList (Gtk))
  (c-name gtk_clist_thaw)
  (return-type none)
)

(method column_titles_show
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_show)
  (return-type none)
)

(method column_titles_hide
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_hide)
  (return-type none)
)

(method column_title_active
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_active)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_title_passive
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_passive)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_titles_active
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_active)
  (return-type none)
)

(method column_titles_passive
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_passive)
  (return-type none)
)

(method set_column_title
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_title)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* title))
)

(method get_column_title
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_title)
  (return-type gchar*)
  (parameter (type-and-name gint column))
)

(method set_column_widget
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_widget)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkWidget* widget))
)

(method get_column_widget
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name gint column))
)

(method set_column_justification
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_justification)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkJustification justification))
)

(method set_column_visibility
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_visibility)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean visible))
)

(method set_column_resizeable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_resizeable)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean resizeable))
)

(method set_column_auto_resize
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_auto_resize)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean auto_resize))
)

(method columns_autosize
  (of-object CList (Gtk))
  (c-name gtk_clist_columns_autosize)
  (return-type gint)
)

(method optimal_column_width
  (of-object CList (Gtk))
  (c-name gtk_clist_optimal_column_width)
  (return-type gint)
  (parameter (type-and-name gint column))
)

(method set_column_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint width))
)

(method set_column_min_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_min_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint min_width))
)

(method set_column_max_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_max_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint max_width))
)

(method set_row_height
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_height)
  (return-type none)
  (parameter (type-and-name guint height))
)

(method moveto
  (of-object CList (Gtk))
  (c-name gtk_clist_moveto)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method row_is_visible
  (of-object CList (Gtk))
  (c-name gtk_clist_row_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name gint row))
)

(method get_cell_type
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_text
  (of-object CList (Gtk))
  (c-name gtk_clist_set_text)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method get_text
  (of-object CList (Gtk))
  (c-name gtk_clist_get_text)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method set_pixmap
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixmap)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixmap
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixmap)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_pixtext
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixtext)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixtext
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixtext)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_foreground
  (of-object CList (Gtk))
  (c-name gtk_clist_set_foreground)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_background
  (of-object CList (Gtk))
  (c-name gtk_clist_set_background)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_cell_style
  (of-object CList (Gtk))
  (c-name gtk_clist_set_cell_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method get_cell_style
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_row_style
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GtkStyle* style))
)

(method get_row_style
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
)

(method set_shift
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shift)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method set_selectable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selectable)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gboolean selectable))
)

(method get_selectable
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name gint row))
)

(method prepend
  (of-object CList (Gtk))
  (c-name gtk_clist_prepend)
  (return-type gint)
  (parameter (type-and-name gchar*[] text))
)

(method append
  (of-object CList (Gtk))
  (c-name gtk_clist_append)
  (return-type gint)
  (parameter (type-and-name gchar*[] text))
)

(method insert
  (of-object CList (Gtk))
  (c-name gtk_clist_insert)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gchar*[] text))
)

(method remove
  (of-object CList (Gtk))
  (c-name gtk_clist_remove)
  (return-type none)
  (parameter (type-and-name gint row))
)

(method set_row_data
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
)

(method set_row_data_full
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data_full)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_row_data
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name gint row))
)

(method find_row_from_data
  (of-object CList (Gtk))
  (c-name gtk_clist_find_row_from_data)
  (return-type gint)
  (parameter (type-and-name gpointer data))
)

(method select_row
  (of-object CList (Gtk))
  (c-name gtk_clist_select_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method unselect_row
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method undo_selection
  (of-object CList (Gtk))
  (c-name gtk_clist_undo_selection)
  (return-type none)
)

(method clear
  (of-object CList (Gtk))
  (c-name gtk_clist_clear)
  (return-type none)
)

(method get_selection_info
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selection_info)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* row))
  (parameter (type-and-name gint* column))
)

(method select_all
  (of-object CList (Gtk))
  (c-name gtk_clist_select_all)
  (return-type none)
)

(method unselect_all
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_all)
  (return-type none)
)

(method swap_rows
  (of-object CList (Gtk))
  (c-name gtk_clist_swap_rows)
  (return-type none)
  (parameter (type-and-name gint row1))
  (parameter (type-and-name gint row2))
)

(method row_move
  (of-object CList (Gtk))
  (c-name gtk_clist_row_move)
  (return-type none)
  (parameter (type-and-name gint source_row))
  (parameter (type-and-name gint dest_row))
)

(method set_compare_func
  (of-object CList (Gtk))
  (c-name gtk_clist_set_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCListCompareFunc cmp_func))
)

(method set_sort_column
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_column)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method set_sort_type
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_type)
  (return-type none)
  (parameter (type-and-name GtkSortType sort_type))
)

(method sort
  (of-object CList (Gtk))
  (c-name gtk_clist_sort)
  (return-type none)
)

(method set_auto_sort
  (of-object CList (Gtk))
  (c-name gtk_clist_set_auto_sort)
  (return-type none)
  (parameter (type-and-name gboolean auto_sort))
)

(method _create_cell_layout
  (of-object CList (Gtk))
  (c-name _gtk_clist_create_cell_layout)
  (return-type PangoLayout*)
  (parameter (type-and-name GtkCListRow* clist_row))
  (parameter (type-and-name gint column))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcolorsel.h

(function gtk_color_selection_get_type
  (c-name gtk_color_selection_get_type)
  (return-type GtkType)
)

(function gtk_color_selection_new
  (c-name gtk_color_selection_new)
  (is-constructor-of GtkColorSelection)
  (return-type GtkWidget*)
)

(method set_update_policy
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(method get_has_opacity_control
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_has_opacity_control)
  (return-type gboolean)
)

(method set_has_opacity_control
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_has_opacity_control)
  (return-type none)
  (parameter (type-and-name gboolean use_opacity))
)

(method get_has_palette
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_has_palette)
  (return-type gboolean)
)

(method set_has_palette
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_has_palette)
  (return-type none)
  (parameter (type-and-name gboolean use_palette))
)

(method set_current_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_current_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method set_current_alpha
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_current_alpha)
  (return-type none)
  (parameter (type-and-name guint16 alpha))
)

(method get_current_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_current_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method get_current_alpha
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_current_alpha)
  (return-type guint16)
)

(method set_previous_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_previous_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method set_previous_alpha
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_previous_alpha)
  (return-type none)
  (parameter (type-and-name guint16 alpha))
)

(method get_previous_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_previous_color)
  (return-type none)
  (parameter (type-and-name GdkColor* color))
)

(method get_previous_alpha
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_previous_alpha)
  (return-type guint16)
)

(method is_adjusting
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_is_adjusting)
  (return-type gboolean)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcolorseldialog.h

(function gtk_color_selection_dialog_get_type
  (c-name gtk_color_selection_dialog_get_type)
  (return-type GtkType)
)

(function gtk_color_selection_dialog_new
  (c-name gtk_color_selection_dialog_new)
  (is-constructor-of GtkColorSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcombo.h

(function gtk_combo_get_type
  (c-name gtk_combo_get_type)
  (return-type GtkType)
)

(function gtk_combo_new
  (c-name gtk_combo_new)
  (is-constructor-of GtkCombo)
  (return-type GtkWidget*)
)

(method set_value_in_list
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_value_in_list)
  (return-type none)
  (parameter (type-and-name gint val))
  (parameter (type-and-name gint ok_if_empty))
)

(method set_use_arrows
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_use_arrows_always
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows_always)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_case_sensitive
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_case_sensitive)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_item_string
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_item_string)
  (return-type none)
  (parameter (type-and-name GtkItem* item))
  (parameter (type-and-name const-gchar* item_value))
)

(method set_popdown_strings
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_popdown_strings)
  (return-type none)
  (parameter (type-and-name GList* strings))
)

(method disable_activate
  (of-object Combo (Gtk))
  (c-name gtk_combo_disable_activate)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcompat.h



;; From /opt/pango/include/gtk-2.0/gtk/gtkcontainer.h

(function gtk_container_get_type
  (c-name gtk_container_get_type)
  (return-type GtkType)
)

(method set_border_width
  (of-object Container (Gtk))
  (c-name gtk_container_set_border_width)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method add
  (of-object Container (Gtk))
  (c-name gtk_container_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method remove
  (of-object Container (Gtk))
  (c-name gtk_container_remove)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_resize_mode
  (of-object Container (Gtk))
  (c-name gtk_container_set_resize_mode)
  (return-type none)
  (parameter (type-and-name GtkResizeMode resize_mode))
)

(method check_resize
  (of-object Container (Gtk))
  (c-name gtk_container_check_resize)
  (return-type none)
)

(method foreach
  (of-object Container (Gtk))
  (c-name gtk_container_foreach)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(method foreach_full
  (of-object Container (Gtk))
  (c-name gtk_container_foreach_full)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(method children
  (of-object Container (Gtk))
  (c-name gtk_container_children)
  (return-type GList*)
)

(method propagate_expose
  (of-object Container (Gtk))
  (c-name gtk_container_propagate_expose)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GdkEventExpose* event))
)

(method set_focus_chain
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_chain)
  (return-type none)
  (parameter (type-and-name GList* focusable_widgets))
)

(method unset_focus_chain
  (of-object Container (Gtk))
  (c-name gtk_container_unset_focus_chain)
  (return-type none)
)

(method set_reallocate_redraws
  (of-object Container (Gtk))
  (c-name gtk_container_set_reallocate_redraws)
  (return-type none)
  (parameter (type-and-name gboolean needs_redraws))
)

(method set_focus_child
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method set_focus_vadjustment
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_focus_hadjustment
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method resize_children
  (of-object Container (Gtk))
  (c-name gtk_container_resize_children)
  (return-type none)
)

(method child_type
  (of-object Container (Gtk))
  (c-name gtk_container_child_type)
  (return-type GtkType)
)

(function gtk_container_add_child_arg_type
  (c-name gtk_container_add_child_arg_type)
  (return-type none)
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkType arg_type))
  (parameter (type-and-name guint arg_flags))
  (parameter (type-and-name guint arg_id))
)

(function gtk_container_query_child_args
  (c-name gtk_container_query_child_args)
  (return-type GtkArg*)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name guint32** arg_flags))
  (parameter (type-and-name guint* nargs))
)

(method child_getv
  (of-object Container (Gtk))
  (c-name gtk_container_child_getv)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method child_setv
  (of-object Container (Gtk))
  (c-name gtk_container_child_setv)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method add_with_args
  (of-object Container (Gtk))
  (c-name gtk_container_add_with_args)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method addv
  (of-object Container (Gtk))
  (c-name gtk_container_addv)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method child_set
  (of-object Container (Gtk))
  (c-name gtk_container_child_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method queue_resize
  (of-object Container (Gtk))
  (c-name gtk_container_queue_resize)
  (return-type none)
)

(method clear_resize_widgets
  (of-object Container (Gtk))
  (c-name gtk_container_clear_resize_widgets)
  (return-type none)
)

(method arg_set
  (of-object Container (Gtk))
  (c-name gtk_container_arg_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(method arg_get
  (of-object Container (Gtk))
  (c-name gtk_container_arg_get)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(function gtk_container_child_args_collect
  (c-name gtk_container_child_args_collect)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name GSList** arg_list_p))
  (parameter (type-and-name GSList** info_list_p))
  (parameter (type-and-name const-gchar* first_arg_name))
  (parameter (type-and-name va_list args))
)

(function gtk_container_child_arg_get_info
  (c-name gtk_container_child_arg_get_info)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkArgInfo** info_p))
)

(method forall
  (of-object Container (Gtk))
  (c-name gtk_container_forall)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(method child_composite_name
  (of-object Container (Gtk))
  (c-name gtk_container_child_composite_name)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* child))
)

(method dequeue_resize_handler
  (of-object Container (Gtk))
  (c-name gtk_container_dequeue_resize_handler)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkctree.h

(function gtk_ctree_get_type
  (c-name gtk_ctree_get_type)
  (return-type GtkType)
)

(method construct
  (of-object CTree (Gtk))
  (c-name gtk_ctree_construct)
  (return-type none)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_ctree_new_with_titles
  (c-name gtk_ctree_new_with_titles)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_ctree_new
  (c-name gtk_ctree_new)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
)

(method insert_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_node)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name gchar*[] text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed))
  (parameter (type-and-name GdkBitmap* mask_closed))
  (parameter (type-and-name GdkPixmap* pixmap_opened))
  (parameter (type-and-name GdkBitmap* mask_opened))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method remove_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_remove_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method insert_gnode
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_gnode)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name GNode* gnode))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method export_to_gnode
  (of-object CTree (Gtk))
  (c-name gtk_ctree_export_to_gnode)
  (return-type GNode*)
  (parameter (type-and-name GNode* parent))
  (parameter (type-and-name GNode* sibling))
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method is_viewable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_viewable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method last
  (of-object CTree (Gtk))
  (c-name gtk_ctree_last)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method find_node_ptr
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_node_ptr)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeRow* ctree_row))
)

(method node_nth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_nth)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name guint row))
)

(method find
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method is_ancestor
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method find_by_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_all_by_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_by_row_data_custom
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data_custom)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method find_all_by_row_data_custom
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data_custom)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method is_hot_spot
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_hot_spot)
  (return-type gboolean)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move
  (of-object CTree (Gtk))
  (c-name gtk_ctree_move)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* new_parent) (null-ok))
  (parameter (type-and-name GtkCTreeNode* new_sibling) (null-ok))
)

(method expand
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method expand_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method expand_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method collapse
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method collapse_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method collapse_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method toggle_expansion
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method toggle_expansion_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method unselect
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method unselect_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method real_select_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_real_select_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint state))
)

(method node_set_text
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_text)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method node_set_pixmap
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixmap)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method node_set_pixtext
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixtext)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method set_node_info
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_node_info)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed) (null-ok))
  (parameter (type-and-name GdkBitmap* mask_closed) (null-ok))
  (parameter (type-and-name GdkPixmap* pixmap_opened) (null-ok))
  (parameter (type-and-name GdkBitmap* mask_opened) (null-ok))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method node_set_shift
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_shift)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method node_set_selectable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_selectable)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gboolean selectable))
)

(method node_get_selectable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_get_cell_type
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_get_text
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_text)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method node_get_pixmap
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixmap)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method node_get_pixtext
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixtext)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_node_info
  (of-object CTree (Gtk))
  (c-name gtk_ctree_get_node_info)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap_closed))
  (parameter (type-and-name GdkBitmap** mask_closed))
  (parameter (type-and-name GdkPixmap** pixmap_opened))
  (parameter (type-and-name GdkBitmap** mask_opened))
  (parameter (type-and-name gboolean* is_leaf))
  (parameter (type-and-name gboolean* expanded))
)

(method node_set_row_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkStyle* style))
)

(method node_get_row_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_set_cell_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_cell_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method node_get_cell_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_set_foreground
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_foreground)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_background
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_background)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method node_set_row_data_full
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data_full)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method node_get_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_moveto
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_moveto)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method node_is_visible
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method set_indent
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_indent)
  (return-type none)
  (parameter (type-and-name gint indent))
)

(method set_spacing
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method set_show_stub
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_show_stub)
  (return-type none)
  (parameter (type-and-name gboolean show_stub))
)

(method set_line_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_line_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeLineStyle line_style))
)

(method set_expander_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_expander_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeExpanderStyle expander_style))
)

(method set_drag_compare_func
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_drag_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCTreeCompareDragFunc cmp_func))
)

(method sort_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method sort_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkcurve.h

(function gtk_curve_get_type
  (c-name gtk_curve_get_type)
  (return-type GtkType)
)

(function gtk_curve_new
  (c-name gtk_curve_new)
  (is-constructor-of GtkCurve)
  (return-type GtkWidget*)
)

(method reset
  (of-object Curve (Gtk))
  (c-name gtk_curve_reset)
  (return-type none)
)

(method set_gamma
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_gamma)
  (return-type none)
  (parameter (type-and-name gfloat gamma))
)

(method set_range
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_range)
  (return-type none)
  (parameter (type-and-name gfloat min_x))
  (parameter (type-and-name gfloat max_x))
  (parameter (type-and-name gfloat min_y))
  (parameter (type-and-name gfloat max_y))
)

(method get_vector
  (of-object Curve (Gtk))
  (c-name gtk_curve_get_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat[] vector))
)

(method set_vector
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat[] vector))
)

(method set_curve_type
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_curve_type)
  (return-type none)
  (parameter (type-and-name GtkCurveType type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkdebug.h



;; From /opt/pango/include/gtk-2.0/gtk/gtkdialog.h

(function gtk_dialog_get_type
  (c-name gtk_dialog_get_type)
  (return-type GtkType)
)

(function gtk_dialog_new
  (c-name gtk_dialog_new)
  (is-constructor-of GtkDialog)
  (return-type GtkWidget*)
)

(function gtk_dialog_new_with_buttons
  (c-name gtk_dialog_new_with_buttons)
  (is-constructor-of GtkDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
  (parameter (type-and-name GtkWindow* parent))
  (parameter (type-and-name GtkDialogFlags flags))
  (parameter (type-and-name const-gchar* first_button_text))
  (varargs t)
)

(method add_action_widget
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_action_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint response_id))
)

(method add_button
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_button)
  (return-type none)
  (parameter (type-and-name const-gchar* button_text))
  (parameter (type-and-name gint response_id))
)

(method add_buttons
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_add_buttons)
  (return-type none)
  (parameter (type-and-name const-gchar* first_button_text))
  (varargs t)
)

(method set_response_sensitive
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_response_sensitive)
  (return-type none)
  (parameter (type-and-name gint response_id))
  (parameter (type-and-name gboolean setting))
)

(method set_default_response
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_default_response)
  (return-type none)
  (parameter (type-and-name gint response_id))
)

(method set_has_separator
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_set_has_separator)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_separator
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_get_has_separator)
  (return-type gboolean)
)

(method response
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_response)
  (return-type none)
  (parameter (type-and-name gint response_id))
)

(method run
  (of-object Dialog (Gtk))
  (c-name gtk_dialog_run)
  (return-type gint)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkdnd.h

(method drag_get_data
  (of-object Widget (Gtk))
  (c-name gtk_drag_get_data)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method finish
  (of-object DragContext (Gdk))
  (c-name gtk_drag_finish)
  (return-type none)
  (parameter (type-and-name gboolean success))
  (parameter (type-and-name gboolean del))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method get_source_widget
  (of-object DragContext (Gdk))
  (c-name gtk_drag_get_source_widget)
  (return-type GtkWidget*)
)

(method drag_highlight
  (of-object Widget (Gtk))
  (c-name gtk_drag_highlight)
  (return-type none)
)

(method drag_unhighlight
  (of-object Widget (Gtk))
  (c-name gtk_drag_unhighlight)
  (return-type none)
)

(method drag_dest_set
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_set)
  (return-type none)
  (parameter (type-and-name GtkDestDefaults flags))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method drag_dest_set_proxy
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_set_proxy)
  (return-type none)
  (parameter (type-and-name GdkWindow* proxy_window))
  (parameter (type-and-name GdkDragProtocol protocol))
  (parameter (type-and-name gboolean use_coordinates))
)

(method drag_dest_unset
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_unset)
  (return-type none)
)

(method drag_dest_find_target
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_find_target)
  (return-type GdkAtom)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GtkTargetList* target_list))
)

(method drag_dest_get_target_list
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_get_target_list)
  (return-type GtkTargetList*)
)

(method drag_dest_set_target_list
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_set_target_list)
  (return-type none)
  (parameter (type-and-name GtkTargetList* target_list))
)

(method drag_source_set
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_set)
  (return-type none)
  (parameter (type-and-name GdkModifierType start_button_mask))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method drag_source_unset
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_unset)
  (return-type none)
)

(method drag_source_set_icon
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_set_icon)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method drag_begin
  (of-object Widget (Gtk))
  (c-name gtk_drag_begin)
  (return-type GdkDragContext*)
  (parameter (type-and-name GtkTargetList* targets))
  (parameter (type-and-name GdkDragAction actions))
  (parameter (type-and-name gint button))
  (parameter (type-and-name GdkEvent* event))
)

(method set_icon_widget
  (of-object DragContext (Gdk))
  (c-name gtk_drag_set_icon_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(method set_icon_pixmap
  (of-object DragContext (Gdk))
  (c-name gtk_drag_set_icon_pixmap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(method set_icon_default
  (of-object DragContext (Gdk))
  (c-name gtk_drag_set_icon_default)
  (return-type none)
)

(function drag_set_default_icon
  (c-name gtk_drag_set_default_icon)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(method drag_source_handle_event
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_handle_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)

(method drag_dest_handle_event
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_handle_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkdrawingarea.h

(function gtk_drawing_area_get_type
  (c-name gtk_drawing_area_get_type)
  (return-type GtkType)
)

(function gtk_drawing_area_new
  (c-name gtk_drawing_area_new)
  (is-constructor-of GtkDrawingArea)
  (return-type GtkWidget*)
)

(method size
  (of-object DrawingArea (Gtk))
  (c-name gtk_drawing_area_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkeditable.h

(function gtk_editable_get_type
  (c-name gtk_editable_get_type)
  (return-type GtkType)
)

(method select_region
  (of-object Editable (Gtk))
  (c-name gtk_editable_select_region)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method get_selection_bounds
  (of-object Editable (Gtk))
  (c-name gtk_editable_get_selection_bounds)
  (return-type gboolean)
  (parameter (type-and-name gint* start))
  (parameter (type-and-name gint* end))
)

(method insert_text
  (of-object Editable (Gtk))
  (c-name gtk_editable_insert_text)
  (return-type none)
  (parameter (type-and-name const-gchar* new_text))
  (parameter (type-and-name gint new_text_length))
  (parameter (type-and-name gint* position))
)

(method delete_text
  (of-object Editable (Gtk))
  (c-name gtk_editable_delete_text)
  (return-type none)
  (parameter (type-and-name gint start_pos))
  (parameter (type-and-name gint end_pos))
)

(method get_chars
  (of-object Editable (Gtk))
  (c-name gtk_editable_get_chars)
  (return-type gchar*)
  (parameter (type-and-name gint start_pos))
  (parameter (type-and-name gint end_pos))
)

(method cut_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_cut_clipboard)
  (return-type none)
)

(method copy_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_copy_clipboard)
  (return-type none)
)

(method paste_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_paste_clipboard)
  (return-type none)
)

(method delete_selection
  (of-object Editable (Gtk))
  (c-name gtk_editable_delete_selection)
  (return-type none)
)

(method set_position
  (of-object Editable (Gtk))
  (c-name gtk_editable_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method get_position
  (of-object Editable (Gtk))
  (c-name gtk_editable_get_position)
  (return-type gint)
)

(method set_editable
  (of-object Editable (Gtk))
  (c-name gtk_editable_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean is_editable))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkoldeditable.h

(function gtk_old_editable_get_type
  (c-name gtk_old_editable_get_type)
  (return-type none)
)

(method claim_selection
  (of-object OldEditable (Gtk))
  (c-name gtk_old_editable_claim_selection)
  (return-type none)
  (parameter (type-and-name gboolean claim))
  (parameter (type-and-name guint time) (default "GDK_CURRENT_TIME"))
)

(method changed
  (of-object OldEditable (Gtk))
  (c-name gtk_old_editable_changed)
  (return-type none)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkentry.h

(function gtk_entry_get_type
  (c-name gtk_entry_get_type)
  (return-type GtkType)
)

(function gtk_entry_new
  (c-name gtk_entry_new)
  (is-constructor-of GtkEntry)
  (return-type GtkWidget*)
)

(method set_visibility
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_visibility)
  (return-type none)
  (parameter (type-and-name gboolean visible))
)

(method set_invisible_char
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_invisible_char)
  (return-type none)
  (parameter (type-and-name gunichar ch))
)

(method set_editable
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean editable))
)

(method set_has_frame
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_has_frame)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_has_frame
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_has_frame)
  (return-type gboolean)
)

(method set_max_length
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_max_length)
  (return-type none)
  (parameter (type-and-name guint16 max))
)

(method set_activates_default
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_activates_default)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_activates_default
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_activates_default)
  (return-type gboolean)
)

(method set_width_chars
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_width_chars)
  (return-type none)
  (parameter (type-and-name gint n_chars))
)

(method get_width_chars
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_width_chars)
  (return-type gint)
)

(method set_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method get_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_text)
  (return-type const-gchar*)
)

(method get_layout
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_layout)
  (return-type PangoLayout*)
)

(method get_layout_offsets
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_layout_offsets)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkenums.h



;; From /opt/pango/include/gtk-2.0/gtk/gtkeventbox.h

(function gtk_event_box_get_type
  (c-name gtk_event_box_get_type)
  (return-type GtkType)
)

(function gtk_event_box_new
  (c-name gtk_event_box_new)
  (is-constructor-of GtkEventBox)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkfilesel.h

(function gtk_file_selection_get_type
  (c-name gtk_file_selection_get_type)
  (return-type GtkType)
)

(function gtk_file_selection_new
  (c-name gtk_file_selection_new)
  (is-constructor-of GtkFileSelection)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title) (null-ok) (default "NULL"))
)

(method set_filename
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_set_filename)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method get_filename
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_get_filename)
  (return-type const-gchar*)
)

(method complete
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_complete)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method show_fileop_buttons
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_show_fileop_buttons)
  (return-type none)
)

(method hide_fileop_buttons
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_hide_fileop_buttons)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkfixed.h

(function gtk_fixed_get_type
  (c-name gtk_fixed_get_type)
  (return-type GtkType)
)

(function gtk_fixed_new
  (c-name gtk_fixed_new)
  (is-constructor-of GtkFixed)
  (return-type GtkWidget*)
)

(method put
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint16 x))
  (parameter (type-and-name gint16 y))
)

(method move
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint16 x))
  (parameter (type-and-name gint16 y))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkfontsel.h

(function gtk_font_selection_get_type
  (c-name gtk_font_selection_get_type)
  (return-type GtkType)
)

(function gtk_font_selection_new
  (c-name gtk_font_selection_new)
  (is-constructor-of GtkFontSelection)
  (return-type GtkWidget*)
)

(method get_font_name
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font_name)
  (return-type gchar*)
)

(method get_font
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font)
  (return-type GdkFont*)
)

(method set_font_name
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method get_preview_text
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_preview_text)
  (return-type gchar*)
)

(method set_preview_text
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(function gtk_font_selection_dialog_get_type
  (c-name gtk_font_selection_dialog_get_type)
  (return-type GtkType)
)

(function gtk_font_selection_dialog_new
  (c-name gtk_font_selection_dialog_new)
  (is-constructor-of GtkFontSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)

(method get_font_name
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font_name)
  (return-type gchar*)
)

(method get_font
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font)
  (return-type GdkFont*)
)

(method set_font_name
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method get_preview_text
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_preview_text)
  (return-type gchar*)
)

(method set_preview_text
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkframe.h

(function gtk_frame_get_type
  (c-name gtk_frame_get_type)
  (return-type GtkType)
)

(function gtk_frame_new
  (c-name gtk_frame_new)
  (is-constructor-of GtkFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label) (null-ok) (default "NULL"))
)

(method set_label
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label)
  (return-type none)
  (parameter (type-and-name const-gchar* label) (null-ok))
)

(method get_label
  (of-object Frame (Gtk))
  (c-name gtk_frame_get_label)
  (return-type none)
)

(method set_label_widget
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* label_widget))
)

(method set_label_align
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label_align)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method set_shadow_type
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkgamma.h

(function gtk_gamma_curve_get_type
  (c-name gtk_gamma_curve_get_type)
  (return-type GtkType)
)

(function gtk_gamma_curve_new
  (c-name gtk_gamma_curve_new)
  (is-constructor-of GtkGammaCurve)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkgc.h

(function gtk_gc_release
  (c-name gtk_gc_release)
  (return-type none)
  (parameter (type-and-name GdkGC* gc))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhandlebox.h

(function gtk_handle_box_get_type
  (c-name gtk_handle_box_get_type)
  (return-type GtkType)
)

(function gtk_handle_box_new
  (c-name gtk_handle_box_new)
  (is-constructor-of GtkHandleBox)
  (return-type GtkWidget*)
)

(method set_shadow_type
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method set_handle_position
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_handle_position)
  (return-type none)
  (parameter (type-and-name GtkPositionType position))
)

(method set_snap_edge
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_snap_edge)
  (return-type none)
  (parameter (type-and-name GtkPositionType edge))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhbbox.h

(function gtk_hbutton_box_get_type
  (c-name gtk_hbutton_box_get_type)
  (return-type GtkType)
)

(function gtk_hbutton_box_new
  (c-name gtk_hbutton_box_new)
  (is-constructor-of GtkHButtonBox)
  (return-type GtkWidget*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkhbox.h

(function gtk_hbox_get_type
  (c-name gtk_hbox_get_type)
  (return-type GtkType)
)

(function gtk_hbox_new
  (c-name gtk_hbox_new)
  (is-constructor-of GtkHBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
  (parameter (type-and-name gint spacing) (default "0"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhpaned.h

(function gtk_hpaned_get_type
  (c-name gtk_hpaned_get_type)
  (return-type GtkType)
)

(function gtk_hpaned_new
  (c-name gtk_hpaned_new)
  (is-constructor-of GtkHPaned)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhruler.h

(function gtk_hruler_get_type
  (c-name gtk_hruler_get_type)
  (return-type GtkType)
)

(function gtk_hruler_new
  (c-name gtk_hruler_new)
  (is-constructor-of GtkHRuler)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhscale.h

(function gtk_hscale_get_type
  (c-name gtk_hscale_get_type)
  (return-type GtkType)
)

(function gtk_hscale_new
  (c-name gtk_hscale_new)
  (is-constructor-of GtkHScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhscrollbar.h

(function gtk_hscrollbar_get_type
  (c-name gtk_hscrollbar_get_type)
  (return-type GtkType)
)

(function gtk_hscrollbar_new
  (c-name gtk_hscrollbar_new)
  (is-constructor-of GtkHScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkhseparator.h

(function gtk_hseparator_get_type
  (c-name gtk_hseparator_get_type)
  (return-type GtkType)
)

(function gtk_hseparator_new
  (c-name gtk_hseparator_new)
  (is-constructor-of GtkHSeparator)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkiconfactory.h

(function gtk_icon_factory_get_type
  (c-name gtk_icon_factory_get_type)
  (return-type GType)
)

(function gtk_icon_factory_new
  (c-name gtk_icon_factory_new)
  (is-constructor-of GtkIconFactory)
  (return-type GtkIconFactory*)
)

(method add
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_add)
  (return-type none)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSet* icon_set))
)

(method lookup
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_lookup)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(method add_default
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_add_default)
  (return-type none)
)

(method remove_default
  (of-object IconFactory (Gtk))
  (c-name gtk_icon_factory_remove_default)
  (return-type none)
)

(function icon_factory_lookup_default
  (c-name gtk_icon_factory_lookup_default)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(function icon_size_lookup
  (c-name gtk_icon_size_lookup)
  (return-type gboolean)
  (parameter (type-and-name GtkIconSize size))
  (parameter (type-and-name gint* width))
  (parameter (type-and-name gint* height))
)

(function icon_size_register
  (c-name gtk_icon_size_register)
  (return-type GtkIconSize)
  (parameter (type-and-name const-gchar* alias))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function icon_size_register_alias
  (c-name gtk_icon_size_register_alias)
  (return-type none)
  (parameter (type-and-name const-gchar* alias))
  (parameter (type-and-name GtkIconSize target))
)

(function icon_size_from_name
  (c-name gtk_icon_size_from_name)
  (return-type GtkIconSize)
  (parameter (type-and-name const-gchar* name))
)

(function icon_size_get_name
  (c-name gtk_icon_size_get_name)
  (return-type const-gchar*)
  (parameter (type-and-name GtkIconSize size))
)

(function icon_set_new
  (c-name gtk_icon_set_new)
  (return-type GtkIconSet*)
)

(function icon_set_new_from_pixbuf
  (c-name gtk_icon_set_new_from_pixbuf)
  (return-type GtkIconSet*)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method ref
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_ref)
  (return-type GtkIconSet*)
)

(method unref
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_unref)
  (return-type none)
)

(method copy
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_copy)
  (return-type GtkIconSet*)
)

(method render_icon
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_render_icon)
  (return-type GdkPixbuf*)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GtkTextDirection direction))
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name const-gchar* size))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* detail))
)

(method add_source
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_add_source)
  (return-type none)
  (parameter (type-and-name const-GtkIconSource* source))
)

(method get_sizes
  (of-object IconSet (Gtk))
  (c-name gtk_icon_set_get_sizes)
  (return-type none)
  (parameter (type-and-name GtkIconSize** sizes))
  (parameter (type-and-name gint* n_sizes))
)

(function icon_source_new
  (c-name gtk_icon_source_new)
  (return-type GtkIconSource*)
)

(method copy
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_copy)
  (return-type GtkIconSource*)
)

(method free
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_free)
  (return-type none)
)

(method set_filename
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_filename)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method set_pixbuf
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_pixbuf)
  (return-type none)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method get_filename
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_filename)
  (return-type const-gchar*)
)

(method get_pixbuf
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_pixbuf)
  (return-type GdkPixbuf*)
)

(method set_direction_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_direction_wildcarded)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_state_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_state_wildcarded)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_size_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_size_wildcarded)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_size_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_size_wildcarded)
  (return-type gboolean)
)

(method get_state_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_state_wildcarded)
  (return-type gboolean)
)

(method get_direction_wildcarded
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_direction_wildcarded)
  (return-type gboolean)
)

(method set_direction
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection direction))
)

(method set_state
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_state)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
)

(method set_size
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_set_size)
  (return-type none)
  (parameter (type-and-name GtkIconSize size))
)

(method get_direction
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_direction)
  (return-type GtkTextDirection)
)

(method get_state
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_state)
  (return-type GtkStateType)
)

(method get_size
  (of-object IconSource (Gtk))
  (c-name gtk_icon_source_get_size)
  (return-type GtkIconSize)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkimage.h

(function gtk_image_get_type
  (c-name gtk_image_get_type)
  (return-type GtkType)
)

(function gtk_image_new_from_pixmap
  (c-name gtk_image_new_from_pixmap)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(function gtk_image_new_from_image
  (c-name gtk_image_new_from_image)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkImage* image))
  (parameter (type-and-name GdkBitmap* mask))
)

(function gtk_image_new_from_file
  (c-name gtk_image_new_from_file)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* filename))
)

(function gtk_image_new_from_pixbuf
  (c-name gtk_image_new_from_pixbuf)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(function gtk_image_new_from_stock
  (c-name gtk_image_new_from_stock)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name const-gchar* size))
)

(function gtk_image_new_from_icon_set
  (c-name gtk_image_new_from_icon_set)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkIconSet* icon_set))
  (parameter (type-and-name const-gchar* size))
)

(function gtk_image_new_from_animation
  (c-name gtk_image_new_from_animation)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixbufAnimation* animation))
)

(method set_from_pixmap
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_pixmap)
  (return-type none)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set_from_image
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_image)
  (return-type none)
  (parameter (type-and-name GdkImage* gdk_image))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set_from_file
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_file)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method set_from_pixbuf
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_pixbuf)
  (return-type none)
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method set_from_stock
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_stock)
  (return-type none)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSize size))
)

(method set_from_icon_set
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_icon_set)
  (return-type none)
  (parameter (type-and-name GtkIconSet* icon_set))
  (parameter (type-and-name const-gchar* size))
)

(method set_from_animation
  (of-object Image (Gtk))
  (c-name gtk_image_set_from_animation)
  (return-type none)
  (parameter (type-and-name GdkPixbufAnimation* animation))
)

(method get_storage_type
  (of-object Image (Gtk))
  (c-name gtk_image_get_storage_type)
  (return-type GtkImageType)
)

(method get_pixmap
  (of-object Image (Gtk))
  (c-name gtk_image_get_pixmap)
  (return-type none)
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_image
  (of-object Image (Gtk))
  (c-name gtk_image_get_image)
  (return-type none)
  (parameter (type-and-name GdkImage** gdk_image))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_pixbuf
  (of-object Image (Gtk))
  (c-name gtk_image_get_pixbuf)
  (return-type GdkPixbuf*)
)

(method get_stock
  (of-object Image (Gtk))
  (c-name gtk_image_get_stock)
  (return-type none)
  (parameter (type-and-name gchar** stock_id))
  (parameter (type-and-name gchar** size))
)

(method get_icon_set
  (of-object Image (Gtk))
  (c-name gtk_image_get_icon_set)
  (return-type none)
  (parameter (type-and-name GtkIconSet** icon_set))
  (parameter (type-and-name gchar** size))
)

(method get_animation
  (of-object Image (Gtk))
  (c-name gtk_image_get_animation)
  (return-type GdkPixbufAnimation*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkimagemenuitem.h

(function gtk_image_menu_item_get_type
  (c-name gtk_image_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_image_menu_item_new
  (c-name gtk_image_menu_item_new)
  (return-type GtkWidget*)
)

(function gtk_image_menu_item_new_with_label
  (c-name gtk_image_menu_item_new_with_label)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_image_menu_item_new_with_mnemonic
  (c-name gtk_image_menu_item_new_with_mnemonic)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_image_menu_item_new_from_stock
  (c-name gtk_image_menu_item_new_from_stock)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method set_image
  (of-object ImageMenuItem (Gtk))
  (c-name gtk_image_menu_item_set_image)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method get_image
  (of-object ImageMenuItem (Gtk))
  (c-name gtk_image_menu_item_get_image)
  (return-type GtkWidget*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkimcontext.h

(function gtk_im_context_get_type
  (c-name gtk_im_context_get_type)
  (return-type GtkType)
)

(method set_client_window
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_client_window)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
)

(method get_preedit_string
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_get_preedit_string)
  (return-type none)
  (parameter (type-and-name char** str))
  (parameter (type-and-name PangoAttrList** attrs))
)

(method filter_keypress
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_filter_keypress)
  (return-type gboolean)
  (parameter (type-and-name GdkEventKey* event))
)

(method focus_in
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_focus_in)
  (return-type none)
)

(method focus_out
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_focus_out)
  (return-type none)
)

(method reset
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_reset)
  (return-type none)
)

(method set_cursor_location
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_cursor_location)
  (return-type none)
  (parameter (type-and-name GdkRectangle* area))
)

(method set_use_preedit
  (of-object IMContext (Gtk))
  (c-name gtk_im_context_set_use_preedit)
  (return-type none)
  (parameter (type-and-name gboolean use_preedit))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkimmulticontext.h

(function gtk_im_multicontext_get_type
  (c-name gtk_im_multicontext_get_type)
  (return-type GtkType)
)

(function gtk_im_multicontext_new
  (c-name gtk_im_multicontext_new)
  (is-constructor-of GtkIMMulticontext)
  (return-type GtkIMContext*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkinputdialog.h

(function gtk_input_dialog_get_type
  (c-name gtk_input_dialog_get_type)
  (return-type GtkType)
)

(function gtk_input_dialog_new
  (c-name gtk_input_dialog_new)
  (is-constructor-of GtkInputDialog)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkinvisible.h

(function gtk_invisible_get_type
  (c-name gtk_invisible_get_type)
  (return-type GtkType)
)

(function gtk_invisible_new
  (c-name gtk_invisible_new)
  (is-constructor-of GtkInvisible)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkitem.h

(function gtk_item_get_type
  (c-name gtk_item_get_type)
  (return-type GtkType)
)

(method select
  (of-object Item (Gtk))
  (c-name gtk_item_select)
  (return-type none)
)

(method deselect
  (of-object Item (Gtk))
  (c-name gtk_item_deselect)
  (return-type none)
)

(method toggle
  (of-object Item (Gtk))
  (c-name gtk_item_toggle)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkitemfactory.h

(function gtk_item_factory_get_type
  (c-name gtk_item_factory_get_type)
  (return-type GtkType)
)

(function gtk_item_factory_new
  (c-name gtk_item_factory_new)
  (is-constructor-of GtkItemFactory)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GtkType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group) (null-ok) (default "NULL"))
)

(method construct
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_construct)
  (return-type none)
  (parameter (type-and-name GtkType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(function item_factory_parse_rc
  (c-name gtk_item_factory_parse_rc)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
)

(function item_factory_parse_rc_string
  (c-name gtk_item_factory_parse_rc_string)
  (return-type none)
  (parameter (type-and-name const-gchar* rc_string))
)

(function item_factory_parse_rc_scanner
  (c-name gtk_item_factory_parse_rc_scanner)
  (return-type none)
  (parameter (type-and-name GScanner* scanner))
)

(function item_factory_add_foreign
  (c-name gtk_item_factory_add_foreign)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
  (parameter (type-and-name const-gchar* full_path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function item_factory_from_widget
  (c-name gtk_item_factory_from_widget)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GtkWidget* widget))
)

(function item_factory_path_from_widget
  (c-name gtk_item_factory_path_from_widget)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* widget))
)

(method get_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget_by_action
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(method get_item_by_action
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(function item_factory_dump_items
  (c-name gtk_item_factory_dump_items)
  (return-type none)
  (parameter (type-and-name GtkPatternSpec* path_pspec))
  (parameter (type-and-name gboolean modified_only))
  (parameter (type-and-name GtkPrintFunc print_func))
  (parameter (type-and-name gpointer func_data))
)

(function item_factory_dump_rc
  (c-name gtk_item_factory_dump_rc)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
  (parameter (type-and-name GtkPatternSpec* path_pspec))
  (parameter (type-and-name gboolean modified_only))
)

(function item_factory_print_func
  (c-name gtk_item_factory_print_func)
  (return-type none)
  (parameter (type-and-name gpointer FILE_pointer))
  (parameter (type-and-name const-gchar* string))
)

(method create_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_item)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)

(method create_items
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
)

(method delete_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_item)
  (return-type none)
  (parameter (type-and-name const-gchar* path))
)

(method delete_entry
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entry)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
)

(method delete_entries
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
)

(method popup
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup)
  (return-type none)
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method popup_with_data
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_with_data)
  (return-type none)
  (parameter (type-and-name gpointer popup_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method popup_data
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_data)
  (return-type gpointer)
)

(function item_factory_popup_data_from_widget
  (c-name gtk_item_factory_popup_data_from_widget)
  (return-type gpointer)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_translate_func
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_set_translate_func)
  (return-type none)
  (parameter (type-and-name GtkTranslateFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(function item_factory_from_path
  (c-name gtk_item_factory_from_path)
  (return-type GtkItemFactory*)
  (parameter (type-and-name const-gchar* path))
)

(function item_factory_create_menu_entries
  (c-name gtk_item_factory_create_menu_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkMenuEntry* entries))
)

(function item_factories_path_delete
  (c-name gtk_item_factories_path_delete)
  (return-type none)
  (parameter (type-and-name const-gchar* ifactory_path))
  (parameter (type-and-name const-gchar* path))
)

(method create_items_ac
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items_ac)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtklabel.h

(function gtk_label_get_type
  (c-name gtk_label_get_type)
  (return-type GtkType)
)

(function gtk_label_new
  (c-name gtk_label_new)
  (is-constructor-of GtkLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* str))
)

(function gtk_label_new_with_mnemonic
  (c-name gtk_label_new_with_mnemonic)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* str))
)

(method set_text
  (of-object Label (Gtk))
  (c-name gtk_label_set_text)
  (return-type none)
  (parameter (type-and-name const-char* str))
)

(method get_text
  (of-object Label (Gtk))
  (c-name gtk_label_get_text)
  (return-type const-gchar*)
)

(method set_attributes
  (of-object Label (Gtk))
  (c-name gtk_label_set_attributes)
  (return-type none)
  (parameter (type-and-name PangoAttrList* attrs))
)

(method set_markup
  (of-object Label (Gtk))
  (c-name gtk_label_set_markup)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method set_markup_with_mnemonic
  (of-object Label (Gtk))
  (c-name gtk_label_set_markup_with_mnemonic)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method get_mnemonic_keyval
  (of-object Label (Gtk))
  (c-name gtk_label_get_mnemonic_keyval)
  (return-type guint)
)

(method set_mnemonic_widget
  (of-object Label (Gtk))
  (c-name gtk_label_set_mnemonic_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_text_with_mnemonic
  (of-object Label (Gtk))
  (c-name gtk_label_set_text_with_mnemonic)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method set_justify
  (of-object Label (Gtk))
  (c-name gtk_label_set_justify)
  (return-type none)
  (parameter (type-and-name GtkJustification jtype))
)

(method set_pattern
  (of-object Label (Gtk))
  (c-name gtk_label_set_pattern)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method set_line_wrap
  (of-object Label (Gtk))
  (c-name gtk_label_set_line_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method set_selectable
  (of-object Label (Gtk))
  (c-name gtk_label_set_selectable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_selectable
  (of-object Label (Gtk))
  (c-name gtk_label_get_selectable)
  (return-type gboolean)
)

(method select_region
  (of-object Label (Gtk))
  (c-name gtk_label_select_region)
  (return-type none)
  (parameter (type-and-name gint start_offset))
  (parameter (type-and-name gint end_offset))
)

(method get_selection_bounds
  (of-object Label (Gtk))
  (c-name gtk_label_get_selection_bounds)
  (return-type gboolean)
  (parameter (type-and-name gint* start))
  (parameter (type-and-name gint* end))
)

(method get_layout
  (of-object Label (Gtk))
  (c-name gtk_label_get_layout)
  (return-type PangoLayout*)
)

(method get_layout_offsets
  (of-object Label (Gtk))
  (c-name gtk_label_get_layout_offsets)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(method get
  (of-object Label (Gtk))
  (c-name gtk_label_get)
  (return-type none)
  (parameter (type-and-name char** str))
)

(method parse_uline
  (of-object Label (Gtk))
  (c-name gtk_label_parse_uline)
  (return-type guint)
  (parameter (type-and-name const-gchar* string))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtklayout.h

(function gtk_layout_get_type
  (c-name gtk_layout_get_type)
  (return-type GtkType)
)

(function gtk_layout_new
  (c-name gtk_layout_new)
  (is-constructor-of GtkLayout)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok) (default "NULL"))
)

(method put
  (of-object Layout (Gtk))
  (c-name gtk_layout_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move
  (of-object Layout (Gtk))
  (c-name gtk_layout_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_size
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_size)
  (return-type none)
  (parameter (type-and-name guint width))
  (parameter (type-and-name guint height))
)

(method get_hadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)

(method set_vadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)

(method freeze
  (of-object Layout (Gtk))
  (c-name gtk_layout_freeze)
  (return-type none)
)

(method thaw
  (of-object Layout (Gtk))
  (c-name gtk_layout_thaw)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtklist.h

(function gtk_list_get_type
  (c-name gtk_list_get_type)
  (return-type GtkType)
)

(function gtk_list_new
  (c-name gtk_list_new)
  (is-constructor-of GtkList)
  (return-type GtkWidget*)
)

(method insert_items
  (of-object List (Gtk))
  (c-name gtk_list_insert_items)
  (return-type none)
  (parameter (type-and-name GList* items))
  (parameter (type-and-name gint position))
)

(method append_items
  (of-object List (Gtk))
  (c-name gtk_list_append_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method prepend_items
  (of-object List (Gtk))
  (c-name gtk_list_prepend_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items
  (of-object List (Gtk))
  (c-name gtk_list_remove_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items_no_unref
  (of-object List (Gtk))
  (c-name gtk_list_remove_items_no_unref)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method clear_items
  (of-object List (Gtk))
  (c-name gtk_list_clear_items)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method select_item
  (of-object List (Gtk))
  (c-name gtk_list_select_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method unselect_item
  (of-object List (Gtk))
  (c-name gtk_list_unselect_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method select_child
  (of-object List (Gtk))
  (c-name gtk_list_select_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method unselect_child
  (of-object List (Gtk))
  (c-name gtk_list_unselect_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method child_position
  (of-object List (Gtk))
  (c-name gtk_list_child_position)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_selection_mode
  (of-object List (Gtk))
  (c-name gtk_list_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method extend_selection
  (of-object List (Gtk))
  (c-name gtk_list_extend_selection)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
  (parameter (type-and-name gboolean auto_start_selection))
)

(method start_selection
  (of-object List (Gtk))
  (c-name gtk_list_start_selection)
  (return-type none)
)

(method end_selection
  (of-object List (Gtk))
  (c-name gtk_list_end_selection)
  (return-type none)
)

(method select_all
  (of-object List (Gtk))
  (c-name gtk_list_select_all)
  (return-type none)
)

(method unselect_all
  (of-object List (Gtk))
  (c-name gtk_list_unselect_all)
  (return-type none)
)

(method scroll_horizontal
  (of-object List (Gtk))
  (c-name gtk_list_scroll_horizontal)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method scroll_vertical
  (of-object List (Gtk))
  (c-name gtk_list_scroll_vertical)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method toggle_add_mode
  (of-object List (Gtk))
  (c-name gtk_list_toggle_add_mode)
  (return-type none)
)

(method toggle_focus_row
  (of-object List (Gtk))
  (c-name gtk_list_toggle_focus_row)
  (return-type none)
)

(method toggle_row
  (of-object List (Gtk))
  (c-name gtk_list_toggle_row)
  (return-type none)
  (parameter (type-and-name GtkWidget* item))
)

(method undo_selection
  (of-object List (Gtk))
  (c-name gtk_list_undo_selection)
  (return-type none)
)

(method end_drag_selection
  (of-object List (Gtk))
  (c-name gtk_list_end_drag_selection)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtklistitem.h

(function gtk_list_item_get_type
  (c-name gtk_list_item_get_type)
  (return-type GtkType)
)

(function gtk_list_item_new
  (c-name gtk_list_item_new)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
)

(function gtk_list_item_new_with_label
  (c-name gtk_list_item_new_with_label)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method select
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_select)
  (return-type none)
)

(method deselect
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_deselect)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkliststore.h

(function gtk_list_store_get_type
  (c-name gtk_list_store_get_type)
  (return-type GtkType)
)

(function gtk_list_store_new
  (c-name gtk_list_store_new)
  (is-constructor-of GtkListStore)
  (return-type GtkListStore*)
)

(function gtk_list_store_new_with_types
  (c-name gtk_list_store_new_with_types)
  (is-constructor-of GtkListStore)
  (return-type GtkListStore*)
  (parameter (type-and-name gint n_columns))
  (varargs t)
)

(method set_n_columns
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_n_columns)
  (return-type none)
  (parameter (type-and-name gint n_columns))
)

(method set_column_type
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_column_type)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GType type))
)

(method set_value
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_set_value)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GValue* value))
)

(method remove
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_remove)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method insert
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint position))
)

(method insert_before
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method insert_after
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_insert_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method prepend
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_prepend)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method append
  (of-object ListStore (Gtk))
  (c-name gtk_list_store_append)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmain.h

(function check_version
  (c-name gtk_check_version)
  (return-type gchar*)
  (parameter (type-and-name guint required_major))
  (parameter (type-and-name guint required_minor))
  (parameter (type-and-name guint required_micro))
)

(function init
  (c-name gtk_init)
  (return-type none)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function init_check
  (c-name gtk_init_check)
  (return-type gboolean)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function init_abi_check
  (c-name gtk_init_abi_check)
  (return-type none)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
  (parameter (type-and-name int num_checks))
  (parameter (type-and-name size_t sizeof_GtkWindow))
)

(function init_check_abi_check
  (c-name gtk_init_check_abi_check)
  (return-type gboolean)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
  (parameter (type-and-name int num_checks))
  (parameter (type-and-name size_t sizeof_GtkWindow))
)

(function exit
  (c-name gtk_exit)
  (return-type none)
  (parameter (type-and-name gint error_code))
)

(function set_locale
  (c-name gtk_set_locale)
  (return-type gchar*)
)

(function get_default_language
  (c-name gtk_get_default_language)
  (return-type PangoLanguage*)
)

(function events_pending
  (c-name gtk_events_pending)
  (return-type gint)
)

(function main_do_event
  (c-name gtk_main_do_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)

(function main
  (c-name gtk_main)
  (return-type none)
)

(function main_level
  (c-name gtk_main_level)
  (return-type guint)
)

(function main_quit
  (c-name gtk_main_quit)
  (return-type none)
)

(function main_iteration
  (c-name gtk_main_iteration)
  (return-type gint)
)

(function main_iteration_do
  (c-name gtk_main_iteration_do)
  (return-type gint)
  (parameter (type-and-name gboolean blocking) (default "TRUE"))
)

(function true
  (c-name gtk_true)
  (return-type gint)
)

(function false
  (c-name gtk_false)
  (return-type gint)
)

(method grab_add
  (of-object Widget (Gtk))
  (c-name gtk_grab_add)
  (return-type none)
)

(function grab_get_current
  (c-name gtk_grab_get_current)
  (return-type GtkWidget*)
)

(method grab_remove
  (of-object Widget (Gtk))
  (c-name gtk_grab_remove)
  (return-type none)
)

(function init_add
  (c-name gtk_init_add)
  (return-type none)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function quit_add_destroy
  (c-name gtk_quit_add_destroy)
  (return-type none)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkObject* object))
)

(function quit_add
  (c-name gtk_quit_add)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function quit_add_full
  (c-name gtk_quit_add_full)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function quit_remove
  (c-name gtk_quit_remove)
  (return-type none)
  (parameter (type-and-name guint quit_handler_id))
)

(function quit_remove_by_data
  (c-name gtk_quit_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function timeout_add
  (c-name gtk_timeout_add)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function timeout_add_full
  (c-name gtk_timeout_add_full)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function timeout_remove
  (c-name gtk_timeout_remove)
  (return-type none)
  (parameter (type-and-name guint timeout_handler_id))
)

(function idle_add
  (c-name gtk_idle_add)
  (return-type guint)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function idle_add_priority
  (c-name gtk_idle_add_priority)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function idle_add_full
  (c-name gtk_idle_add_full)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function idle_remove
  (c-name gtk_idle_remove)
  (return-type none)
  (parameter (type-and-name guint idle_handler_id))
)

(function idle_remove_by_data
  (c-name gtk_idle_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function input_add_full
  (c-name gtk_input_add_full)
  (return-type guint)
  (parameter (type-and-name gint source))
  (parameter (type-and-name GdkInputCondition condition))
  (parameter (type-and-name GdkInputFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function input_remove
  (c-name gtk_input_remove)
  (return-type none)
  (parameter (type-and-name guint input_handler_id))
)

(function key_snooper_install
  (c-name gtk_key_snooper_install)
  (return-type guint)
  (parameter (type-and-name GtkKeySnoopFunc snooper))
  (parameter (type-and-name gpointer func_data))
)

(function key_snooper_remove
  (c-name gtk_key_snooper_remove)
  (return-type none)
  (parameter (type-and-name guint snooper_handler_id))
)

(function get_current_event
  (c-name gtk_get_current_event)
  (return-type GdkEvent*)
)

(function get_current_event_time
  (c-name gtk_get_current_event_time)
  (return-type guint32)
)

(function get_event_widget
  (c-name gtk_get_event_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkEvent* event))
)

(method propagate_event
  (of-object Widget (Gtk))
  (c-name gtk_propagate_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmenu.h

(function gtk_menu_get_type
  (c-name gtk_menu_get_type)
  (return-type GtkType)
)

(function gtk_menu_new
  (c-name gtk_menu_new)
  (is-constructor-of GtkMenu)
  (return-type GtkWidget*)
)

(method popup
  (of-object Menu (Gtk))
  (c-name gtk_menu_popup)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent_menu_shell))
  (parameter (type-and-name GtkWidget* parent_menu_item))
  (parameter (type-and-name GtkMenuPositionFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint32 activate_time))
)

(method reposition
  (of-object Menu (Gtk))
  (c-name gtk_menu_reposition)
  (return-type none)
)

(method popdown
  (of-object Menu (Gtk))
  (c-name gtk_menu_popdown)
  (return-type none)
)

(method get_active
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_active)
  (return-type GtkWidget*)
)

(method set_active
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_active)
  (return-type none)
  (parameter (type-and-name guint index))
)

(method set_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method get_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_accel_group)
  (return-type GtkAccelGroup*)
)

(method attach_to_widget
  (of-object Menu (Gtk))
  (c-name gtk_menu_attach_to_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* attach_widget))
  (parameter (type-and-name GtkMenuDetachFunc detacher))
)

(method detach
  (of-object Menu (Gtk))
  (c-name gtk_menu_detach)
  (return-type none)
)

(method get_attach_widget
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_attach_widget)
  (return-type GtkWidget*)
)

(method set_tearoff_state
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_tearoff_state)
  (return-type none)
  (parameter (type-and-name gboolean torn_off))
)

(method set_title
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method reorder_child
  (of-object Menu (Gtk))
  (c-name gtk_menu_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmenubar.h

(function gtk_menu_bar_get_type
  (c-name gtk_menu_bar_get_type)
  (return-type GtkType)
)

(function gtk_menu_bar_new
  (c-name gtk_menu_bar_new)
  (is-constructor-of GtkMenuBar)
  (return-type GtkWidget*)
)

(method append
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmenuitem.h

(function gtk_menu_item_get_type
  (c-name gtk_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_menu_item_new
  (c-name gtk_menu_item_new)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
)

(function gtk_menu_item_new_with_label
  (c-name gtk_menu_item_new_with_label)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_menu_item_new_with_mnemonic
  (c-name gtk_menu_item_new_with_mnemonic)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_submenu
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_submenu)
  (return-type none)
  (parameter (type-and-name GtkWidget* submenu))
)

(method remove_submenu
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_remove_submenu)
  (return-type none)
)

(method set_placement
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_placement)
  (return-type none)
  (parameter (type-and-name GtkSubmenuPlacement placement))
)

(method configure
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_configure)
  (return-type none)
  (parameter (type-and-name gint show_toggle_indicator))
  (parameter (type-and-name gint show_submenu_indicator))
)

(method select
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_select)
  (return-type none)
)

(method deselect
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_deselect)
  (return-type none)
)

(method activate
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_activate)
  (return-type none)
)

(method toggle_size_request
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_toggle_size_request)
  (return-type none)
  (parameter (type-and-name gint* requisition))
)

(method toggle_size_allocate
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_toggle_size_allocate)
  (return-type none)
  (parameter (type-and-name gint allocation))
)

(method right_justify
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_right_justify)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmenushell.h

(function gtk_menu_shell_get_type
  (c-name gtk_menu_shell_get_type)
  (return-type GtkType)
)

(method append
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method deactivate
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deactivate)
  (return-type none)
)

(method select_item
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_select_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
)

(method deselect
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deselect)
  (return-type none)
)

(method activate_item
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_activate_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
  (parameter (type-and-name gboolean force_deactivate))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmessagedialog.h

(function gtk_message_dialog_get_type
  (c-name gtk_message_dialog_get_type)
  (return-type GtkType)
)

(function gtk_message_dialog_new
  (c-name gtk_message_dialog_new)
  (is-constructor-of GtkMessageDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWindow* parent))
  (parameter (type-and-name GtkDialogFlags flags))
  (parameter (type-and-name GtkMessageType type))
  (parameter (type-and-name GtkButtonsType buttons))
  (parameter (type-and-name const-gchar* message_format))
  (varargs t)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkmisc.h

(function gtk_misc_get_type
  (c-name gtk_misc_get_type)
  (return-type GtkType)
)

(method set_alignment
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_alignment)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method set_padding
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_padding)
  (return-type none)
  (parameter (type-and-name gint xpad))
  (parameter (type-and-name gint ypad))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtknotebook.h

(function gtk_notebook_get_type
  (c-name gtk_notebook_get_type)
  (return-type GtkType)
)

(function gtk_notebook_new
  (c-name gtk_notebook_new)
  (is-constructor-of GtkNotebook)
  (return-type GtkWidget*)
)

(method append_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method append_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method prepend_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method prepend_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method insert_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name gint position))
)

(method insert_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
  (parameter (type-and-name gint position))
)

(method remove_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_remove_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method get_current_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_current_page)
  (return-type gint)
)

(method get_nth_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_nth_page)
  (return-type GtkWidget*)
  (parameter (type-and-name gint page_num))
)

(method page_num
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_page_num)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method next_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_next_page)
  (return-type none)
)

(method prev_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prev_page)
  (return-type none)
)

(method set_show_border
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_border)
  (return-type none)
  (parameter (type-and-name gboolean show_border))
)

(method set_show_tabs
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_tabs)
  (return-type none)
  (parameter (type-and-name gboolean show_tabs))
)

(method set_tab_pos
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method set_homogeneous_tabs
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_homogeneous_tabs)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method set_tab_border
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_border)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method set_tab_hborder
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_hborder)
  (return-type none)
  (parameter (type-and-name guint tab_hborder))
)

(method set_tab_vborder
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_vborder)
  (return-type none)
  (parameter (type-and-name guint tab_vborder))
)

(method set_scrollable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_scrollable)
  (return-type none)
  (parameter (type-and-name gboolean scrollable))
)

(method popup_enable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_enable)
  (return-type none)
)

(method popup_disable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_disable)
  (return-type none)
)

(method get_tab_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_tab_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_tab_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method set_tab_label_text
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* tab_text))
)

(method get_menu_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_menu_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_menu_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method set_menu_label_text
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* menu_text))
)

(method query_tab_label_packing
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_query_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_tab_label_packing
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name GtkPackType pack_type))
)

(method reorder_child
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkobject.h

(function gtk_object_get_type
  (c-name gtk_object_get_type)
  (return-type GtkType)
)

(function object_new
  (c-name gtk_object_new)
  (return-type GtkObject*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(function object_newv
  (c-name gtk_object_newv)
  (return-type GtkObject*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method ref
  (of-object Object (Gtk))
  (c-name gtk_object_ref)
  (return-type GtkObject*)
)

(method unref
  (of-object Object (Gtk))
  (c-name gtk_object_unref)
  (return-type none)
)

(method sink
  (of-object Object (Gtk))
  (c-name gtk_object_sink)
  (return-type none)
)

(method weakref
  (of-object Object (Gtk))
  (c-name gtk_object_weakref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method weakunref
  (of-object Object (Gtk))
  (c-name gtk_object_weakunref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method destroy
  (of-object Object (Gtk))
  (c-name gtk_object_destroy)
  (return-type none)
)

(method set_data
  (of-object Object (Gtk))
  (c-name gtk_object_set_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
)

(method set_data_full
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_full)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method remove_data
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method get_data
  (of-object Object (Gtk))
  (c-name gtk_object_get_data)
  (return-type gpointer)
  (parameter (type-and-name const-gchar* key))
)

(method remove_no_notify
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method set_user_data
  (of-object Object (Gtk))
  (c-name gtk_object_set_user_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(method get_user_data
  (of-object Object (Gtk))
  (c-name gtk_object_get_user_data)
  (return-type gpointer)
)

(method set_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
)

(method set_data_by_id_full
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id_full)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_get_data_by_id)
  (return-type gpointer)
  (parameter (type-and-name GQuark data_id))
)

(method remove_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
)

(method remove_no_notify_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify_by_id)
  (return-type none)
  (parameter (type-and-name GQuark key_id))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkoptionmenu.h

(function gtk_option_menu_get_type
  (c-name gtk_option_menu_get_type)
  (return-type GtkType)
)

(function gtk_option_menu_new
  (c-name gtk_option_menu_new)
  (is-constructor-of GtkOptionMenu)
  (return-type GtkWidget*)
)

(method get_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_get_menu)
  (return-type GtkWidget*)
)

(method set_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu))
)

(method remove_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_remove_menu)
  (return-type none)
)

(method get_history
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_get_history)
  (return-type gint)
)

(method set_history
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_history)
  (return-type none)
  (parameter (type-and-name guint index))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkpaned.h

(function gtk_paned_get_type
  (c-name gtk_paned_get_type)
  (return-type GtkType)
)

(method add1
  (of-object Paned (Gtk))
  (c-name gtk_paned_add1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method add2
  (of-object Paned (Gtk))
  (c-name gtk_paned_add2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method pack1
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize) (default "FALSE"))
  (parameter (type-and-name gboolean shrink) (default "TRUE"))
)

(method pack2
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize) (default "TRUE"))
  (parameter (type-and-name gboolean shrink) (default "TRUE"))
)

(method get_position
  (of-object Paned (Gtk))
  (c-name gtk_paned_get_position)
  (return-type gint)
)

(method set_position
  (of-object Paned (Gtk))
  (c-name gtk_paned_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkpixmap.h

(function gtk_pixmap_get_type
  (c-name gtk_pixmap_get_type)
  (return-type GtkType)
)

(function gtk_pixmap_new
  (c-name gtk_pixmap_new)
  (is-constructor-of GtkPixmap)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method set
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set)
  (return-type none)
  (parameter (type-and-name GdkPixmap* val))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method get
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_get)
  (return-type none)
  (parameter (type-and-name GdkPixmap** val))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_build_insensitive
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set_build_insensitive)
  (return-type none)
  (parameter (type-and-name guint build))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkplug.h

(function gtk_plug_get_type
  (c-name gtk_plug_get_type)
  (return-type GtkType)
)

(method construct
  (of-object Plug (Gtk))
  (c-name gtk_plug_construct)
  (return-type none)
  (parameter (type-and-name GdkNativeWindow socket_id))
)

(function gtk_plug_new
  (c-name gtk_plug_new)
  (is-constructor-of GtkPlug)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkNativeWindow socket_id))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkpreview.h

(function gtk_preview_get_type
  (c-name gtk_preview_get_type)
  (return-type GtkType)
)

(function preview_uninit
  (c-name gtk_preview_uninit)
  (return-type none)
)

(function gtk_preview_new
  (c-name gtk_preview_new)
  (is-constructor-of GtkPreview)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkPreviewType type))
)

(method size
  (of-object Preview (Gtk))
  (c-name gtk_preview_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method put
  (of-object Preview (Gtk))
  (c-name gtk_preview_put)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkGC* gc))
  (parameter (type-and-name gint srcx))
  (parameter (type-and-name gint srcy))
  (parameter (type-and-name gint destx))
  (parameter (type-and-name gint desty))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_row
  (of-object Preview (Gtk))
  (c-name gtk_preview_draw_row)
  (return-type none)
  (parameter (type-and-name guchar* data))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint w))
)

(method set_expand
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_expand)
  (return-type none)
  (parameter (type-and-name gboolean expand))
)

(function preview_set_gamma
  (c-name gtk_preview_set_gamma)
  (return-type none)
  (parameter (type-and-name double gamma))
)

(function preview_set_color_cube
  (c-name gtk_preview_set_color_cube)
  (return-type none)
  (parameter (type-and-name guint nred_shades))
  (parameter (type-and-name guint ngreen_shades))
  (parameter (type-and-name guint nblue_shades))
  (parameter (type-and-name guint ngray_shades))
)

(function preview_set_install_cmap
  (c-name gtk_preview_set_install_cmap)
  (return-type none)
  (parameter (type-and-name gint install_cmap))
)

(function preview_set_reserved
  (c-name gtk_preview_set_reserved)
  (return-type none)
  (parameter (type-and-name gint nreserved))
)

(method set_dither
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_dither)
  (return-type none)
  (parameter (type-and-name GdkRgbDither dither))
)

(function preview_get_visual
  (c-name gtk_preview_get_visual)
  (return-type GdkVisual*)
)

(function preview_get_cmap
  (c-name gtk_preview_get_cmap)
  (return-type GdkColormap*)
)

(function gtk_preview_get_info
  (c-name gtk_preview_get_info)
  (return-type GtkPreviewInfo*)
)

(function preview_reset
  (c-name gtk_preview_reset)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkprivate.h



;; From /opt/pango/include/gtk-2.0/gtk/gtkprogress.h

(function gtk_progress_get_type
  (c-name gtk_progress_get_type)
  (return-type GtkType)
)

(method set_show_text
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_show_text)
  (return-type none)
  (parameter (type-and-name gint show_text))
)

(method set_text_alignment
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_text_alignment)
  (return-type none)
  (parameter (type-and-name gfloat x_align))
  (parameter (type-and-name gfloat y_align))
)

(method set_format_string
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_format_string)
  (return-type none)
  (parameter (type-and-name const-gchar* format))
)

(method set_adjustment
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method configure
  (of-object Progress (Gtk))
  (c-name gtk_progress_configure)
  (return-type none)
  (parameter (type-and-name gfloat value))
  (parameter (type-and-name gfloat min))
  (parameter (type-and-name gfloat max))
)

(method set_percentage
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_percentage)
  (return-type none)
  (parameter (type-and-name gfloat percentage))
)

(method set_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)

(method get_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_value)
  (return-type gfloat)
)

(method set_activity_mode
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_activity_mode)
  (return-type none)
  (parameter (type-and-name guint activity_mode))
)

(method get_current_text
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_text)
  (return-type gchar*)
)

(method get_text_from_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_text_from_value)
  (return-type gchar*)
  (parameter (type-and-name gfloat value))
)

(method get_current_percentage
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_percentage)
  (return-type gfloat)
)

(method get_percentage_from_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_percentage_from_value)
  (return-type gfloat)
  (parameter (type-and-name gfloat value))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkprogressbar.h

(function gtk_progress_bar_get_type
  (c-name gtk_progress_bar_get_type)
  (return-type GtkType)
)

(function gtk_progress_bar_new
  (c-name gtk_progress_bar_new)
  (is-constructor-of GtkProgressBar)
  (return-type GtkWidget*)
)

(method pulse
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_pulse)
  (return-type none)
)

(method set_text
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method set_fraction
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_fraction)
  (return-type none)
  (parameter (type-and-name gfloat fraction))
)

(method set_pulse_step
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_pulse_step)
  (return-type none)
  (parameter (type-and-name gfloat fraction))
)

(method set_orientation
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkProgressBarOrientation orientation))
)

(method get_text
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_text)
  (return-type const-gchar*)
)

(method get_fraction
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_fraction)
  (return-type gdouble)
)

(method get_pulse_step
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_pulse_step)
  (return-type gdouble)
)

(method get_orientation
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_get_orientation)
  (return-type GtkProgressBarOrientation)
)

(function gtk_progress_bar_new_with_adjustment
  (c-name gtk_progress_bar_new_with_adjustment)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)

(method set_bar_style
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_bar_style)
  (return-type none)
  (parameter (type-and-name GtkProgressBarStyle style))
)

(method set_discrete_blocks
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_discrete_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method set_activity_step
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_step)
  (return-type none)
  (parameter (type-and-name guint step))
)

(method set_activity_blocks
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method update
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_update)
  (return-type none)
  (parameter (type-and-name gfloat percentage))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkradiobutton.h

(function gtk_radio_button_get_type
  (c-name gtk_radio_button_get_type)
  (return-type GtkType)
)

(function gtk_radio_button_new
  (c-name gtk_radio_button_new)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function radio_button_new_from_widget
  (is-constructor-of GtkRadioButton)
  (c-name gtk_radio_button_new_from_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton* group))
)

(function radio_button_new_with_label
  (c-name gtk_radio_button_new_with_label)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function radio_button_new_with_label_from_widget
  (of-object RadioButton (Gtk))
  (is-constructor-of GtkRadioButton)
  (c-name gtk_radio_button_new_with_label_from_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton *group))
  (parameter (type-and-name const-gchar* label))
)

(function radio_button_new_with_mnemonic
  (c-name gtk_radio_button_new_with_mnemonic)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function radio_button_new_with_mnemonic_from_widget
  (of-object RadioButton (Gtk))
  (is-constructor-of GtkRadioButton)
  (c-name gtk_radio_button_new_with_mnemonic_from_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkRadioButton *group))
  (parameter (type-and-name const-gchar* label))
)

(method group
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_group)
  (return-type GSList*)
)

(method set_group
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkradiomenuitem.h

(function gtk_radio_menu_item_get_type
  (c-name gtk_radio_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_radio_menu_item_new
  (c-name gtk_radio_menu_item_new)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_menu_item_new_with_label
  (c-name gtk_radio_menu_item_new_with_label)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_menu_item_new_with_mnemonic
  (c-name gtk_radio_menu_item_new_with_mnemonic)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(method group
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_group)
  (return-type GSList*)
)

(method set_group
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkrange.h

(function gtk_range_get_type
  (c-name gtk_range_get_type)
  (return-type GtkType)
)

(method set_update_policy
  (of-object Range (Gtk))
  (c-name gtk_range_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(method set_adjustment
  (of-object Range (Gtk))
  (c-name gtk_range_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_adjustment
  (of-object Range (Gtk))
  (c-name gtk_range_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_inverted
  (of-object Range (Gtk))
  (c-name gtk_range_set_inverted)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_inverted
  (of-object Range (Gtk))
  (c-name gtk_range_get_inverted)
  (return-type gboolean)
)

(method set_increments
  (of-object Range (Gtk))
  (c-name gtk_range_set_increments)
  (return-type none)
  (parameter (type-and-name gdouble step))
  (parameter (type-and-name gdouble page))
)

(method set_range
  (of-object Range (Gtk))
  (c-name gtk_range_set_range)
  (return-type none)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
)

(method set_value
  (of-object Range (Gtk))
  (c-name gtk_range_set_value)
  (return-type none)
  (parameter (type-and-name gdouble value))
)

(method get_value
  (of-object Range (Gtk))
  (c-name gtk_range_get_value)
  (return-type gdouble)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkrc.h

(function rc_add_default_file
  (c-name gtk_rc_add_default_file)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function rc_set_default_files
  (c-name gtk_rc_set_default_files)
  (return-type none)
  (parameter (type-and-name gchar** filenames))
)

(function rc_get_default_files
  (c-name gtk_rc_get_default_files)
  (return-type gchar**)
)

(function rc_parse
  (c-name gtk_rc_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function rc_parse_string
  (c-name gtk_rc_parse_string)
  (return-type none)
  (parameter (type-and-name const-gchar* rc_string))
)

(function rc_reparse_all
  (c-name gtk_rc_reparse_all)
  (return-type gboolean)
)

(method rc_get_style
  (of-object Widget (Gtk))
  (c-name gtk_rc_get_style)
  (return-type GtkStyle*)
)

(function rc_add_widget_name_style
  (c-name gtk_rc_add_widget_name_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_add_widget_class_style
  (c-name gtk_rc_add_widget_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_add_class_style
  (c-name gtk_rc_add_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_style_get_type
  (c-name gtk_rc_style_get_type)
  (return-type GType)
)

(function gtk_rc_style_new
  (c-name gtk_rc_style_new)
  (is-constructor-of GtkRCStyle)
  (return-type GtkRcStyle*)
)

(method copy
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_copy)
  (return-type GtkRcStyle*)
)

(method ref
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_ref)
  (return-type none)
)

(method unref
  (of-object RcStyle (Gtk))
  (c-name gtk_rc_style_unref)
  (return-type none)
)

(function rc_set_image_loader
  (c-name gtk_rc_set_image_loader)
  (return-type none)
  (parameter (type-and-name GtkImageLoader loader))
)

(function rc_find_pixmap_in_path
  (c-name gtk_rc_find_pixmap_in_path)
  (return-type gchar*)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name const-gchar* pixmap_file))
)

(function rc_find_module_in_path
  (c-name gtk_rc_find_module_in_path)
  (return-type gchar*)
  (parameter (type-and-name const-gchar* module_file))
)

(function rc_get_theme_dir
  (c-name gtk_rc_get_theme_dir)
  (return-type gchar*)
)

(function rc_get_module_dir
  (c-name gtk_rc_get_module_dir)
  (return-type gchar*)
)

(function rc_parse_color
  (c-name gtk_rc_parse_color)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GdkColor* color))
)

(function rc_parse_state
  (c-name gtk_rc_parse_state)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkStateType* state))
)

(function rc_parse_priority
  (c-name gtk_rc_parse_priority)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkPathPriorityType* priority))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkruler.h

(function gtk_ruler_get_type
  (c-name gtk_ruler_get_type)
  (return-type GtkType)
)

(method set_metric
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_metric)
  (return-type none)
  (parameter (type-and-name GtkMetricType metric))
)

(method set_range
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_range)
  (return-type none)
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
  (parameter (type-and-name gfloat position))
  (parameter (type-and-name gfloat max_size))
)

(method draw_ticks
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_ticks)
  (return-type none)
)

(method draw_pos
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_pos)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkscale.h

(function gtk_scale_get_type
  (c-name gtk_scale_get_type)
  (return-type GtkType)
)

(method set_digits
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_digits)
  (return-type none)
  (parameter (type-and-name gint digits))
)

(method get_digits
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_digits)
  (return-type gint)
)

(method set_draw_value
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_draw_value)
  (return-type none)
  (parameter (type-and-name gboolean draw_value))
)

(method get_draw_value
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_draw_value)
  (return-type gboolean)
)

(method set_value_pos
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_value_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method get_value_pos
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_value_pos)
  (return-type GtkPositionType)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkscrollbar.h

(function gtk_scrollbar_get_type
  (c-name gtk_scrollbar_get_type)
  (return-type GtkType)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkscrolledwindow.h

(function gtk_scrolled_window_get_type
  (c-name gtk_scrolled_window_get_type)
  (return-type GtkType)
)

(function gtk_scrolled_window_new
  (c-name gtk_scrolled_window_new)
  (is-constructor-of GtkScrolledWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok) (default "NULL"))
)

(method set_hadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method set_vadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method get_hadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_policy
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_policy)
  (return-type none)
  (parameter (type-and-name GtkPolicyType hscrollbar_policy))
  (parameter (type-and-name GtkPolicyType vscrollbar_policy))
)

(method set_placement
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_placement)
  (return-type none)
  (parameter (type-and-name GtkCornerType window_placement))
)

(method set_shadow_type
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method add_with_viewport
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_add_with_viewport)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkselection.h

(function gtk_target_list_new
  (c-name gtk_target_list_new)
  (return-type GtkTargetList*)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method ref
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_ref)
  (return-type none)
)

(method unref
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_unref)
  (return-type none)
)

(method add
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_add)
  (return-type none)
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint flags))
  (parameter (type-and-name guint info))
)

(method add_table
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_add_table)
  (return-type none)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method remove
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_remove)
  (return-type none)
  (parameter (type-and-name GdkAtom target))
)

(method find
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_find)
  (return-type gboolean)
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint* info))
)

(method selection_owner_set
  (of-object Widget (Gtk))
  (c-name gtk_selection_owner_set)
  (return-type gboolean)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method selection_add_target
  (of-object Widget (Gtk))
  (c-name gtk_selection_add_target)
  (return-type none)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint info))
)

(method selection_add_targets
  (of-object Widget (Gtk))
  (c-name gtk_selection_add_targets)
  (return-type none)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method selection_clear_targets
  (of-object Widget (Gtk))
  (c-name gtk_selection_clear_targets)
  (return-type none)
  (parameter (type-and-name GdkAtom selection))
)

(method selection_convert
  (of-object Widget (Gtk))
  (c-name gtk_selection_convert)
  (return-type gint)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint32 time) (default "GDK_CURRENT_TIME"))
)

(method set
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_set)
  (return-type none)
  (parameter (type-and-name GdkAtom type))
  (parameter (type-and-name gint format))
  (parameter (type-and-name const-guchar* data))
  (parameter (type-and-name gint length))
)

(method set_text
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_set_text)
  (return-type gboolean)
  (parameter (type-and-name const-guchar* str))
)

(method get_text
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_get_text)
  (return-type guchar*)
)

(method selection_remove_all
  (of-object Widget (Gtk))
  (c-name gtk_selection_remove_all)
  (return-type none)
)

(method selection_clear
  (of-object Widget (Gtk))
  (c-name gtk_selection_clear)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(method selection_request
  (of-object Widget (Gtk))
  (c-name gtk_selection_request)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(function gtk_selection_incr_event
  (c-name gtk_selection_incr_event)
  (return-type gint)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkEventProperty* event))
)

(method selection_notify
  (of-object Widget (Gtk))
  (c-name gtk_selection_notify)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(method selection_property_notify
  (of-object Widget (Gtk))
  (c-name gtk_selection_property_notify)
  (return-type gint)
  (parameter (type-and-name GdkEventProperty* event))
)

(method copy
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_copy)
  (return-type GtkSelectioData*)
)

(method free
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_free)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkseparator.h

(function gtk_separator_get_type
  (c-name gtk_separator_get_type)
  (return-type GtkType)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkseparatormenuitem.h

(function gtk_separator_menu_item_get_type
  (c-name gtk_separator_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_separator_menu_item_new
  (c-name gtk_separator_menu_item_new)
  (return-type GtkWidget*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtksettings.h

(function gtk_settings_get_type
  (c-name gtk_settings_get_type)
  (return-type GType)
)

(function gtk_settings_get_global
  (c-name gtk_settings_get_global)
  (return-type GtkSettings*)
)

(method install_property
  (of-object Settings (Gtk))
  (c-name gtk_settings_install_property)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
)

(method install_property_parser
  (of-object Settings (Gtk))
  (c-name gtk_settings_install_property_parser)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
  (parameter (type-and-name GtkRcPropertyParser parser))
)

(function gtk_rc_property_parse_color
  (c-name gtk_rc_property_parse_color)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_enum
  (c-name gtk_rc_property_parse_enum)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_flags
  (c-name gtk_rc_property_parse_flags)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_requisition
  (c-name gtk_rc_property_parse_requisition)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(function gtk_rc_property_parse_border
  (c-name gtk_rc_property_parse_border)
  (return-type gboolean)
  (parameter (type-and-name const-GParamSpec* pspec))
  (parameter (type-and-name const-GString* gstring))
  (parameter (type-and-name GValue* property_value))
)

(method set_property_value
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_property_value)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkSettingsValue* svalue))
)

(method set_string_property
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_string_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-gchar* v_string))
  (parameter (type-and-name const-gchar* origin))
)

(method set_long_property
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_long_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name glong v_long))
  (parameter (type-and-name const-gchar* origin))
)

(method set_double_property
  (of-object Settings (Gtk))
  (c-name gtk_settings_set_double_property)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name gdouble v_double))
  (parameter (type-and-name const-gchar* origin))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtksizegroup.h

(function gtk_size_group_get_type
  (c-name gtk_size_group_get_type)
  (return-type GType)
)

(function size_group_new
  (c-name gtk_size_group_new)
  (is-constructor-of GtkSizeGroup)
  (return-type GtkSizeGroup*)
  (parameter (type-and-name GtkSizeGroupMode mode))
)

(method set_mode
  (of-object SizeGroup Gtk)
  (c-name gtk_size_group_set_mode)
  (return-type none)
  (parameter (type-and-name GtkSizeGroupMode mode))
)

(method get_mode
  (of-object SizeGroup Gtk)
  (c-name gtk_size_group_get_mode)
  (return-type GtkSizeGroupMode)
)

(method add_widget
  (of-object SizeGroup Gtk)
  (c-name gtk_size_group_add_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method remove_widget
  (of-object SizeGroup Gtk)
  (c-name gtk_size_group_remove_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtksocket.h

(function gtk_socket_new
  (c-name gtk_socket_new)
  (is-constructor-of GtkSocket)
  (return-type GtkWidget*)
)

(function gtk_socket_get_type
  (c-name gtk_socket_get_type)
  (return-type GtkType)
)

(method steal
  (of-object Socket (Gtk))
  (c-name gtk_socket_steal)
  (return-type none)
  (parameter (type-and-name GdkNativeWindow wid))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkspinbutton.h

(function gtk_spin_button_get_type
  (c-name gtk_spin_button_get_type)
  (return-type GtkType)
)

(method configure
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_configure)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
  (parameter (type-and-name gfloat climb_rate))
  (parameter (type-and-name guint digits))
)

(function gtk_spin_button_new
  (c-name gtk_spin_button_new)
  (is-constructor-of GtkSpinButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name gfloat climb_rate) (default "0.0"))
  (parameter (type-and-name guint digits) (default "0"))
)

(function gtk_spin_button_new_with_range
  (c-name gtk_spin_button_new_with_range)
  (return-type GtkWidget*)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
  (parameter (type-and-name gdouble step))
)

(method set_adjustment
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_adjustment
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_digits
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_digits)
  (return-type none)
  (parameter (type-and-name guint digits))
)

(method set_increments
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_increments)
  (return-type none)
  (parameter (type-and-name gdouble step))
  (parameter (type-and-name gdouble page))
)

(method set_range
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_range)
  (return-type none)
  (parameter (type-and-name gdouble min))
  (parameter (type-and-name gdouble max))
)

(method get_value
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value)
  (return-type gdouble)
)

(method get_value_as_int
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value_as_int)
  (return-type gint)
)

(method set_value
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)

(method set_update_policy
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkSpinButtonUpdatePolicy policy))
)

(method set_numeric
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_numeric)
  (return-type none)
  (parameter (type-and-name gboolean numeric))
)

(method spin
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_spin)
  (return-type none)
  (parameter (type-and-name GtkSpinType direction))
  (parameter (type-and-name gfloat increment))
)

(method set_wrap
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method set_snap_to_ticks
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_snap_to_ticks)
  (return-type none)
  (parameter (type-and-name gboolean snap_to_ticks))
)

(method update
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_update)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkstatusbar.h

(function gtk_statusbar_get_type
  (c-name gtk_statusbar_get_type)
  (return-type GtkType)
)

(function gtk_statusbar_new
  (c-name gtk_statusbar_new)
  (is-constructor-of GtkStatusbar)
  (return-type GtkWidget*)
)

(method get_context_id
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_get_context_id)
  (return-type guint)
  (parameter (type-and-name const-gchar* context_description))
)

(method push
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_push)
  (return-type guint)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name const-gchar* text))
)

(method pop
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_pop)
  (return-type none)
  (parameter (type-and-name guint context_id))
)

(method remove
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_remove)
  (return-type none)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name guint message_id))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkstock.h

(function stock_add
  (c-name gtk_stock_add)
  (return-type none)
  (parameter (type-and-name const-GtkStockItem* item))
  (parameter (type-and-name guint n_items))
)

(function stock_add_static
  (c-name gtk_stock_add_static)
  (return-type none)
  (parameter (type-and-name const-GtkStockItem* item))
  (parameter (type-and-name guint n_items))
)

(function stock_lookup
  (c-name gtk_stock_lookup)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkStockItem* item))
)

(function stock_list_ids
  (c-name gtk_stock_list_ids)
  (return-type GSList*)
)

(method copy
  (of-object StockItem (Gtk))
  (c-name gtk_stock_item_copy)
  (return-type GtkStockItem*)
)

(method free
  (of-object StockItem (Gtk))
  (c-name gtk_stock_item_free)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkstyle.h

(function gtk_style_get_type
  (c-name gtk_style_get_type)
  (return-type GType)
)

(function gtk_style_new
  (c-name gtk_style_new)
  (is-constructor-of GtkStyle)
  (return-type GtkStyle*)
)

(method copy
  (of-object Style (Gtk))
  (c-name gtk_style_copy)
  (return-type GtkStyle*)
)

(method attach
  (of-object Style (Gtk))
  (c-name gtk_style_attach)
  (return-type GtkStyle*)
  (parameter (type-and-name GdkWindow* window))
)

(method detach
  (of-object Style (Gtk))
  (c-name gtk_style_detach)
  (return-type none)
)

(method ref
  (of-object Style (Gtk))
  (c-name gtk_style_ref)
  (return-type GtkStyle*)
)

(method unref
  (of-object Style (Gtk))
  (c-name gtk_style_unref)
  (return-type none)
)

(method set_background
  (of-object Style (Gtk))
  (c-name gtk_style_set_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
)

(method apply_default_background
  (of-object Style (Gtk))
  (c-name gtk_style_apply_default_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gboolean set_bg))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method lookup_icon_set
  (of-object Style (Gtk))
  (c-name gtk_style_lookup_icon_set)
  (return-type GtkIconSet*)
  (parameter (type-and-name const-gchar* stock_id))
)

(method render_icon
  (of-object Style (Gtk))
  (c-name gtk_style_render_icon)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-GtkIconSource* source))
  (parameter (type-and-name GtkTextDirection direction))
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name const-gchar* size))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
)

(method draw_hline
  (of-object Style (Gtk))
  (c-name gtk_draw_hline)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(method draw_vline
  (of-object Style (Gtk))
  (c-name gtk_draw_vline)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint y1))
  (parameter (type-and-name gint y2))
  (parameter (type-and-name gint x))
)

(method draw_shadow
  (of-object Style (Gtk))
  (c-name gtk_draw_shadow)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_polygon
  (of-object Style (Gtk))
  (c-name gtk_draw_polygon)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(method draw_arrow
  (of-object Style (Gtk))
  (c-name gtk_draw_arrow)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_diamond
  (of-object Style (Gtk))
  (c-name gtk_draw_diamond)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_oval
  (of-object Style (Gtk))
  (c-name gtk_draw_oval)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_string
  (of-object Style (Gtk))
  (c-name gtk_draw_string)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(method draw_box
  (of-object Style (Gtk))
  (c-name gtk_draw_box)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_flat_box
  (of-object Style (Gtk))
  (c-name gtk_draw_flat_box)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_check
  (of-object Style (Gtk))
  (c-name gtk_draw_check)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_option
  (of-object Style (Gtk))
  (c-name gtk_draw_option)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_cross
  (of-object Style (Gtk))
  (c-name gtk_draw_cross)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_ramp
  (of-object Style (Gtk))
  (c-name gtk_draw_ramp)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_tab
  (of-object Style (Gtk))
  (c-name gtk_draw_tab)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_shadow_gap
  (of-object Style (Gtk))
  (c-name gtk_draw_shadow_gap)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(method draw_box_gap
  (of-object Style (Gtk))
  (c-name gtk_draw_box_gap)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(method draw_extension
  (of-object Style (Gtk))
  (c-name gtk_draw_extension)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(method draw_focus
  (of-object Style (Gtk))
  (c-name gtk_draw_focus)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_slider
  (of-object Style (Gtk))
  (c-name gtk_draw_slider)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(method draw_handle
  (of-object Style (Gtk))
  (c-name gtk_draw_handle)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(method draw_expander
  (of-object Style (Gtk))
  (c-name gtk_draw_expander)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gboolean is_open))
)

(method draw_layout
  (of-object Style (Gtk))
  (c-name gtk_draw_layout)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gboolean use_text))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name PangoLayout* layout))
)

(method draw_resize_grip
  (of-object Style (Gtk))
  (c-name gtk_draw_resize_grip)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkWindowEdge edge))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_hline
  (of-object Style (Gtk))
  (c-name gtk_paint_hline)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(method paint_vline
  (of-object Style (Gtk))
  (c-name gtk_paint_vline)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint y1))
  (parameter (type-and-name gint y2))
  (parameter (type-and-name gint x))
)

(method paint_shadow
  (of-object Style (Gtk))
  (c-name gtk_paint_shadow)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_polygon
  (of-object Style (Gtk))
  (c-name gtk_paint_polygon)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(method paint_arrow
  (of-object Style (Gtk))
  (c-name gtk_paint_arrow)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_diamond
  (of-object Style (Gtk))
  (c-name gtk_paint_diamond)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_string
  (of-object Style (Gtk))
  (c-name gtk_paint_string)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(method paint_box
  (of-object Style (Gtk))
  (c-name gtk_paint_box)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_flat_box
  (of-object Style (Gtk))
  (c-name gtk_paint_flat_box)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_check
  (of-object Style (Gtk))
  (c-name gtk_paint_check)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_option
  (of-object Style (Gtk))
  (c-name gtk_paint_option)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_tab
  (of-object Style (Gtk))
  (c-name gtk_paint_tab)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_shadow_gap
  (of-object Style (Gtk))
  (c-name gtk_paint_shadow_gap)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(method paint_box_gap
  (of-object Style (Gtk))
  (c-name gtk_paint_box_gap)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(method paint_extension
  (of-object Style (Gtk))
  (c-name gtk_paint_extension)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(method paint_focus
  (of-object Style (Gtk))
  (c-name gtk_paint_focus)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method paint_slider
  (of-object Style (Gtk))
  (c-name gtk_paint_slider)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(method paint_handle
  (of-object Style (Gtk))
  (c-name gtk_paint_handle)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(method paint_expander
  (of-object Style (Gtk))
  (c-name gtk_paint_expander)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gboolean is_open))
)

(method paint_layout
  (of-object Style (Gtk))
  (c-name gtk_paint_layout)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gboolean use_text))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name PangoLayout* layout))
)

(method paint_resize_grip
  (of-object Style (Gtk))
  (c-name gtk_paint_resize_grip)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* detail))
  (parameter (type-and-name GtkWindowEdge edge))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)




;; From /opt/pango/include/gtk-2.0/gtk/gtktable.h

(function gtk_table_get_type
  (c-name gtk_table_get_type)
  (return-type GtkType)
)

(function gtk_table_new
  (c-name gtk_table_new)
  (is-constructor-of GtkTable)
  (return-type GtkWidget*)
  (parameter (type-and-name guint rows))
  (parameter (type-and-name guint columns))
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
)

(method resize
  (of-object Table (Gtk))
  (c-name gtk_table_resize)
  (return-type none)
  (parameter (type-and-name guint rows))
  (parameter (type-and-name guint columns))
)

(method attach
  (of-object Table (Gtk))
  (c-name gtk_table_attach)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
  (parameter (type-and-name GtkAttachOptions xoptions) (default "GTK_EXPAND|GTK_FILL"))
  (parameter (type-and-name GtkAttachOptions yoptions) (default "GTK_EXPAND|GTK_FILL"))
  (parameter (type-and-name guint xpadding) (default "0"))
  (parameter (type-and-name guint ypadding) (default "0"))
)

(method attach_defaults
  (of-object Table (Gtk))
  (c-name gtk_table_attach_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
)

(method set_row_spacing
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacing)
  (return-type none)
  (parameter (type-and-name guint row))
  (parameter (type-and-name guint spacing))
)

(method set_col_spacing
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacing)
  (return-type none)
  (parameter (type-and-name guint column))
  (parameter (type-and-name guint spacing))
)

(method set_row_spacings
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method set_col_spacings
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method set_homogeneous
  (of-object Table (Gtk))
  (c-name gtk_table_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktearoffmenuitem.h

(function gtk_tearoff_menu_item_get_type
  (c-name gtk_tearoff_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_tearoff_menu_item_new
  (c-name gtk_tearoff_menu_item_new)
  (is-constructor-of GtkTearoffMenuItem)
  (return-type GtkWidget*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktextbuffer.h

(function gtk_text_buffer_get_type
  (c-name gtk_text_buffer_get_type)
  (return-type GtkType)
)

(function gtk_text_buffer_new
  (c-name gtk_text_buffer_new)
  (is-constructor-of GtkTextBuffer)
  (return-type GtkTextBuffer*)
  (parameter (type-and-name GtkTextTagTable* table) (null-ok))
)

(method get_line_count
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_line_count)
  (return-type gint)
)

(method get_char_count
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_char_count)
  (return-type gint)
)

(method get_tag_table
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_tag_table)
  (return-type GtkTextTagTable*)
)

(method set_text
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method insert
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len) (default "-1"))
)

(method insert_at_cursor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_at_cursor)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
)

(method insert_interactive
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_interactive_at_cursor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_interactive_at_cursor)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_range
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_range)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method insert_range_interactive
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_range_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean default_editable))
)

(method insert_with_tags
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_with_tags)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name GtkTextTag* first_tag))
  (varargs t)
)

(method insert_with_tags_by_name
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_with_tags_by_name)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name gint len))
  (parameter (type-and-name const-gchar* first_tag_name))
  (varargs t)
)

(method delete
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete)
  (return-type none)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method delete_interactive
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_interactive)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* start_iter))
  (parameter (type-and-name GtkTextIter* end_iter))
  (parameter (type-and-name gboolean default_editable))
)

(method get_text
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean include_hidden_chars))
)

(method get_slice
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
  (parameter (type-and-name gboolean include_hidden_chars))
)

(method insert_pixbuf
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_pixbuf)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GdkPixbuf* pixbuf))
)

(method insert_child_anchor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_insert_child_anchor)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method create_child_anchor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_child_anchor)
  (return-type GtkTextChildAnchor*)
  (parameter (type-and-name GtkTextIter* iter))
)

(method create_mark
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_mark)
  (return-type GtkTextMark*)
  (parameter (type-and-name const-gchar* mark_name))
  (parameter (type-and-name const-GtkTextIter* where))
  (parameter (type-and-name gboolean left_gravity))
)

(method move_mark
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_move_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
  (parameter (type-and-name const-GtkTextIter* where))
)

(method delete_mark
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
)

(method get_mark
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_mark)
  (return-type GtkTextMark*)
  (parameter (type-and-name const-gchar* name))
)

(method move_mark_by_name
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_move_mark_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* where))
)

(method delete_mark_by_name
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_mark_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_insert
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_insert)
  (return-type GtkTextMark*)
)

(method get_selection_bound
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_selection_bound)
  (return-type GtkTextMark*)
)

(method place_cursor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_place_cursor)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* where))
)

(method apply_tag
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_apply_tag)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_tag
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_tag)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method apply_tag_by_name
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_apply_tag_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_tag_by_name
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_tag_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method remove_all_tags
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_remove_all_tags)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method create_tag
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_create_tag)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* tag_name))
  (parameter (type-and-name const-gchar* first_property_name))
  (varargs t)
)

(method get_iter_at_line_offset
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line_offset)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
  (parameter (type-and-name gint char_offset))
)

(method get_iter_at_line_index
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line_index)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
  (parameter (type-and-name gint byte_offset))
)

(method get_iter_at_offset
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_offset)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint char_offset))
)

(method get_iter_at_line
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_line)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint line_number))
)

(method get_start_iter
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_start_iter)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
)

(method get_end_iter
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_end_iter)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
)

(method get_bounds
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_bounds)
  (return-type none)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method get_iter_at_mark
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_mark)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextMark* mark))
)

(method get_iter_at_child_anchor
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_iter_at_child_anchor)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method get_modified
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_modified)
  (return-type gboolean)
)

(method set_modified
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_set_modified)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method paste_primary
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_paste_primary)
  (return-type none)
  (parameter (type-and-name GtkTextIter* override_location))
  (parameter (type-and-name gboolean default_editable))
)

(method cut_clipboard
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_cut_clipboard)
  (return-type none)
  (parameter (type-and-name gboolean default_editable))
)

(method copy_clipboard
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_copy_clipboard)
  (return-type none)
)

(method paste_clipboard
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_paste_clipboard)
  (return-type none)
  (parameter (type-and-name gboolean default_editable))
)

(method get_selection_bounds
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_get_selection_bounds)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* start))
  (parameter (type-and-name GtkTextIter* end))
)

(method delete_selection
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_delete_selection)
  (return-type gboolean)
  (parameter (type-and-name gboolean interactive))
  (parameter (type-and-name gboolean default_editable))
)

(method begin_user_action
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_begin_user_action)
  (return-type none)
)

(method end_user_action
  (of-object TextBuffer (Gtk))
  (c-name gtk_text_buffer_end_user_action)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktextchild.h

(function gtk_text_child_anchor_get_type
  (c-name gtk_text_child_anchor_get_type)
  (return-type GType)
)

(function gtk_text_child_anchor_new
  (c-name gtk_text_child_anchor_new)
  (return-type GtkTextChildAnchor*)
)

(method get_widgets
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_get_widgets)
  (return-type GList*)
)

(method get_deleted
  (of-object TextChildAnchor (Gtk))
  (c-name gtk_text_child_anchor_get_deleted)
  (return-type gboolean)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktextdisplay.h



;; From /opt/pango/include/gtk-2.0/gtk/gtktextiter.h

(method get_buffer
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_buffer)
  (return-type GtkTextBuffer*)
)

(method copy
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_copy)
  (return-type GtkTextIter*)
)

(method free
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_free)
  (return-type none)
)

(method get_offset
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_offset)
  (return-type gint)
)

(method get_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_line)
  (return-type gint)
)

(method get_line_offset
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_line_offset)
  (return-type gint)
)

(method get_line_index
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_line_index)
  (return-type gint)
)

(method get_char
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_char)
  (return-type gunichar)
)

(method get_slice
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* end))
)

(method get_text
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* end))
)

(method get_visible_slice
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_visible_slice)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* end))
)

(method get_visible_text
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_visible_text)
  (return-type gchar*)
  (parameter (type-and-name const-GtkTextIter* end))
)

(method get_pixbuf
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_pixbuf)
  (return-type GdkPixbuf*)
)

(method get_marks
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_marks)
  (return-type GSList*)
)

(method get_toggled_tags
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_toggled_tags)
  (return-type GSList*)
  (parameter (type-and-name gboolean toggled_on))
)

(method begins_tag
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_begins_tag)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method ends_tag
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_ends_tag)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method toggles_tag
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_toggles_tag)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method has_tag
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_has_tag)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method editable
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_editable)
  (return-type gboolean)
  (parameter (type-and-name gboolean default_setting))
)

(method starts_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_starts_line)
  (return-type gboolean)
)

(method ends_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_ends_line)
  (return-type gboolean)
)

(method get_chars_in_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_chars_in_line)
  (return-type gint)
)

(method get_attributes
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_get_attributes)
  (return-type gboolean)
  (parameter (type-and-name GtkTextAttributes* values))
)

(method is_last
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_is_last)
  (return-type gboolean)
)

(method is_first
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_is_first)
  (return-type gboolean)
)

(method next_char
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_next_char)
  (return-type gboolean)
)

(method prev_char
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_prev_char)
  (return-type gboolean)
)

(method forward_chars
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_chars)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method backward_chars
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_chars)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method forward_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_line)
  (return-type gboolean)
)

(method backward_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_line)
  (return-type gboolean)
)

(method forward_lines
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_lines)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method backward_lines
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_lines)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method forward_word_ends
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_word_ends)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method backward_word_starts
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_word_starts)
  (return-type gboolean)
  (parameter (type-and-name gint count))
)

(method forward_word_end
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_word_end)
  (return-type gboolean)
)

(method backward_word_start
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_word_start)
  (return-type gboolean)
)

(method set_offset
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_set_offset)
  (return-type none)
  (parameter (type-and-name gint char_offset))
)

(method set_line
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_set_line)
  (return-type none)
  (parameter (type-and-name gint line_number))
)

(method set_line_offset
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_set_line_offset)
  (return-type none)
  (parameter (type-and-name gint char_on_line))
)

(method forward_to_end
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_to_end)
  (return-type none)
)

(method forward_to_newline
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_to_newline)
  (return-type gboolean)
)

(method forward_to_tag_toggle
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_to_tag_toggle)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method backward_to_tag_toggle
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_to_tag_toggle)
  (return-type gboolean)
  (parameter (type-and-name GtkTextTag* tag))
)

(method forward_find_char
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_find_char)
  (return-type gboolean)
  (parameter (type-and-name GtkTextCharPredicate pred))
  (parameter (type-and-name gpointer user_data))
)

(method backward_find_char
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_find_char)
  (return-type gboolean)
  (parameter (type-and-name GtkTextCharPredicate pred))
  (parameter (type-and-name gpointer user_data))
)

(method forward_search
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_forward_search)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* str))
  (parameter (type-and-name gboolean visible_only))
  (parameter (type-and-name gboolean slice))
  (parameter (type-and-name GtkTextIter* match_start))
  (parameter (type-and-name GtkTextIter* match_end))
)

(method backward_search
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_backward_search)
  (return-type gboolean)
  (parameter (type-and-name const-char* str))
  (parameter (type-and-name gboolean visible_only))
  (parameter (type-and-name gboolean slice))
)

(method equal
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_equal)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* rhs))
)

(method compare
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_compare)
  (return-type gint)
  (parameter (type-and-name const-GtkTextIter* rhs))
)

(method in_range
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_in_range)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* start))
  (parameter (type-and-name const-GtkTextIter* end))
)

(method reorder
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_reorder)
  (return-type none)
  (parameter (type-and-name GtkTextIter* second))
)

(method spew
  (of-object TextIter (Gtk))
  (c-name gtk_text_iter_spew)
  (return-type none)
  (parameter (type-and-name const-gchar* desc))
)





;; From /opt/pango/include/gtk-2.0/gtk/gtktextmark.h

(function gtk_text_mark_get_type
  (c-name gtk_text_mark_get_type)
  (return-type GType)
)

(method set_visible
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_set_visible)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_visible
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_visible)
  (return-type gboolean)
)

(method get_name
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_name)
  (return-type const-gchar*)
)

(method get_deleted
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_deleted)
  (return-type gboolean)
)

(method get_buffer
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_buffer)
  (return-type GtkTextBuffer*)
)

(method get_left_gravity
  (of-object TextMark (Gtk))
  (c-name gtk_text_mark_get_left_gravity)
  (return-type gboolean)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktexttag.h

(function gtk_text_tag_get_type
  (c-name gtk_text_tag_get_type)
  (return-type GtkType)
)

(function gtk_text_tag_new
  (c-name gtk_text_tag_new)
  (is-constructor-of GtkTextTag)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* name))
)

(method get_priority
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_get_priority)
  (return-type gint)
)

(method set_priority
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_set_priority)
  (return-type none)
  (parameter (type-and-name gint priority))
)

(method event
  (of-object TextTag (Gtk))
  (c-name gtk_text_tag_event)
  (return-type gint)
  (parameter (type-and-name GObject* event_object))
  (parameter (type-and-name GdkEvent* event))
  (parameter (type-and-name const-GtkTextIter* iter))
)

(function gtk_text_attributes_new
  (c-name gtk_text_attributes_new)
  (return-type GtkTextAttributes*)
)

(method copy
  (of-object TextAttributes (Gtk))
  (c-name gtk_text_attributes_copy)
  (return-type none)
  (parameter (type-and-name GtkTextAttributes* dest))
)

(method copy_values
  (of-object TextAttributes (Gtk))
  (c-name gtk_text_attributes_copy_values)
  (return-type none)
  (parameter (type-and-name GtkTextAttributes* dest))
)

(method unref
  (of-object TextAttributes (Gtk))
  (c-name gtk_text_attributes_unref)
  (return-type none)
)

(method ref
  (of-object TextAttributes (Gtk))
  (c-name gtk_text_attributes_ref)
  (return-type none)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktexttagtable.h

(function gtk_text_tag_table_get_type
  (c-name gtk_text_tag_table_get_type)
  (return-type GtkType)
)

(function gtk_text_tag_table_new
  (c-name gtk_text_tag_table_new)
  (is-constructor-of GtkTextTagTable)
  (return-type GtkTextTagTable*)
)

(method add
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_add)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
)

(method remove
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_remove)
  (return-type none)
  (parameter (type-and-name GtkTextTag* tag))
)

(method lookup
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_lookup)
  (return-type GtkTextTag*)
  (parameter (type-and-name const-gchar* name))
)

(method foreach
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_foreach)
  (return-type none)
  (parameter (type-and-name GtkTextTagTableForeach func))
  (parameter (type-and-name gpointer data))
)

(method size
  (of-object TextTagTable (Gtk))
  (c-name gtk_text_tag_table_size)
  (return-type guint)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktextview.h

(function gtk_text_view_get_type
  (c-name gtk_text_view_get_type)
  (return-type GtkType)
)

(function gtk_text_view_new
  (c-name gtk_text_view_new)
  (is-constructor-of GtkTextView)
  (return-type GtkWidget*)
)

(function gtk_text_view_new_with_buffer
  (c-name gtk_text_view_new_with_buffer)
  (is-constructor-of GtkTextView)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkTextBuffer* buffer))
)

(method set_buffer
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_buffer)
  (return-type none)
  (parameter (type-and-name GtkTextBuffer* buffer))
)

(method get_buffer
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_buffer)
  (return-type GtkTextBuffer*)
)

(method scroll_to_iter
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_to_iter)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gdouble within_margin))
  (parameter (type-and-name gboolean use_align) (default "FALSE"))
  (parameter (type-and-name gdouble xalign) (default "0.5"))
  (parameter (type-and-name gdouble yalign) (default "0.5"))
)

(method scroll_to_mark
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_to_mark)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
  (parameter (type-and-name gdouble within_margin))
  (parameter (type-and-name gboolean use_align) (default "FALSE"))
  (parameter (type-and-name gdouble xalign) (default "0.5"))
  (parameter (type-and-name gdouble yalign) (default "0.5"))
)

(method scroll_mark_onscreen
  (of-object TextView (Gtk))
  (c-name gtk_text_view_scroll_mark_onscreen)
  (return-type none)
  (parameter (type-and-name GtkTextMark* mark))
)

(method move_mark_onscreen
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_mark_onscreen)
  (return-type gboolean)
  (parameter (type-and-name GtkTextMark* mark))
)

(method place_cursor_onscreen
  (of-object TextView (Gtk))
  (c-name gtk_text_view_place_cursor_onscreen)
  (return-type gboolean)
)

(method get_visible_rect
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_visible_rect)
  (return-type none)
  (parameter (type-and-name GdkRectangle* visible_rect))
)

(method set_cursor_visible
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_cursor_visible)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_cursor_visible
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_cursor_visible)
  (return-type gboolean)
)

(method get_iter_location
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_iter_location)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name GdkRectangle* location))
)

(method get_iter_at_location
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_iter_at_location)
  (return-type none)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method get_line_yrange
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_line_yrange)
  (return-type none)
  (parameter (type-and-name const-GtkTextIter* iter))
  (parameter (type-and-name gint* y))
  (parameter (type-and-name gint* height))
)

(method get_line_at_y
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_line_at_y)
  (return-type none)
  (parameter (type-and-name GtkTextIter* target_iter))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* line_top))
)

(method buffer_to_window_coords
  (of-object TextView (Gtk))
  (c-name gtk_text_view_buffer_to_window_coords)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType win))
  (parameter (type-and-name gint buffer_x))
  (parameter (type-and-name gint buffer_y))
  (parameter (type-and-name gint* window_x))
  (parameter (type-and-name gint* window_y))
)

(method window_to_buffer_coords
  (of-object TextView (Gtk))
  (c-name gtk_text_view_window_to_buffer_coords)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType win))
  (parameter (type-and-name gint window_x))
  (parameter (type-and-name gint window_y))
  (parameter (type-and-name gint* buffer_x))
  (parameter (type-and-name gint* buffer_y))
)

(method get_window
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_window)
  (return-type GdkWindow*)
  (parameter (type-and-name GtkTextWindowType win))
)

(method get_window_type
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_window_type)
  (return-type GtkTextWindowType)
  (parameter (type-and-name GdkWindow* window))
)

(method set_border_window_size
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_border_window_size)
  (return-type none)
  (parameter (type-and-name GtkTextWindowType type))
  (parameter (type-and-name gint size))
)

(method forward_display_line
  (of-object TextView (Gtk))
  (c-name gtk_text_view_forward_display_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method backward_display_line
  (of-object TextView (Gtk))
  (c-name gtk_text_view_backward_display_line)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method forward_display_line_end
  (of-object TextView (Gtk))
  (c-name gtk_text_view_forward_display_line_end)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method backward_display_line_start
  (of-object TextView (Gtk))
  (c-name gtk_text_view_backward_display_line_start)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
)

(method starts_display_line
  (of-object TextView (Gtk))
  (c-name gtk_text_view_starts_display_line)
  (return-type gboolean)
  (parameter (type-and-name const-GtkTextIter* iter))
)

(method move_visually
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_visually)
  (return-type gboolean)
  (parameter (type-and-name GtkTextIter* iter))
  (parameter (type-and-name gint count))
)

(method add_child_at_anchor
  (of-object TextView (Gtk))
  (c-name gtk_text_view_add_child_at_anchor)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextChildAnchor* anchor))
)

(method add_child_in_window
  (of-object TextView (Gtk))
  (c-name gtk_text_view_add_child_in_window)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkTextWindowType which_window))
  (parameter (type-and-name gint xpos))
  (parameter (type-and-name gint ypos))
)

(method move_child
  (of-object TextView (Gtk))
  (c-name gtk_text_view_move_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint xpos))
  (parameter (type-and-name gint ypos))
)

(method set_wrap_mode
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_wrap_mode)
  (return-type none)
  (parameter (type-and-name GtkWrapMode wrap_mode))
)

(method get_wrap_mode
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_wrap_mode)
  (return-type GtkWrapMode)
)

(method set_editable
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_editable
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_editable)
  (return-type gboolean)
)

(method set_pixels_above_lines
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_above_lines)
  (return-type none)
  (parameter (type-and-name gint pixels_above_lines))
)

(method get_pixels_above_lines
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_above_lines)
  (return-type gint)
)

(method set_pixels_below_lines
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_below_lines)
  (return-type none)
  (parameter (type-and-name gint pixels_below_lines))
)

(method get_pixels_below_lines
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_below_lines)
  (return-type gint)
)

(method set_pixels_inside_wrap
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_pixels_inside_wrap)
  (return-type none)
  (parameter (type-and-name gint pixels_inside_wrap))
)

(method get_pixels_inside_wrap
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_pixels_inside_wrap)
  (return-type gint)
)

(method set_justification
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_justification)
  (return-type none)
  (parameter (type-and-name GtkJustification justification))
)

(method get_justification
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_justification)
  (return-type GtkJustification)
)

(method set_left_margin
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_left_margin)
  (return-type none)
  (parameter (type-and-name gint left_margin))
)

(method get_left_margin
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_left_margin)
  (return-type gint)
)

(method set_right_margin
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_right_margin)
  (return-type none)
  (parameter (type-and-name gint right_margin))
)

(method get_right_margin
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_right_margin)
  (return-type gint)
)

(method set_indent
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_indent)
  (return-type none)
  (parameter (type-and-name gint indent))
)

(method get_indent
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_indent)
  (return-type gint)
)

(method set_tabs
  (of-object TextView (Gtk))
  (c-name gtk_text_view_set_tabs)
  (return-type none)
  (parameter (type-and-name PangoTabArray* tabs))
)

(method get_tabs
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_tabs)
  (return-type PangoTabArray*)
)

(method get_default_attributes
  (of-object TextView (Gtk))
  (c-name gtk_text_view_get_default_attributes)
  (return-type GtkTextAttributes*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktipsquery.h

(function gtk_tips_query_get_type
  (c-name gtk_tips_query_get_type)
  (return-type GtkType)
)

(function gtk_tips_query_new
  (c-name gtk_tips_query_new)
  (is-constructor-of GtkTipsQuery)
  (return-type GtkWidget*)
)

(method start_query
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_start_query)
  (return-type none)
)

(method stop_query
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_stop_query)
  (return-type none)
)

(method set_caller
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_set_caller)
  (return-type none)
  (parameter (type-and-name GtkWidget* caller))
)

(method set_labels
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_set_labels)
  (return-type none)
  (parameter (type-and-name const-gchar* label_inactive))
  (parameter (type-and-name const-gchar* label_no_tip))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktogglebutton.h

(function gtk_toggle_button_get_type
  (c-name gtk_toggle_button_get_type)
  (return-type GtkType)
)

(function gtk_toggle_button_new
  (c-name gtk_toggle_button_new)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
)

(function gtk_toggle_button_new_with_label
  (c-name gtk_toggle_button_new_with_label)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(function gtk_toggle_button_new_with_mnemonic
  (c-name gtk_toggle_button_new_with_mnemonic)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_mode
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_mode)
  (return-type none)
  (parameter (type-and-name gboolean draw_indicator))
)

(method set_active
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method get_active
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_active)
  (return-type gboolean)
)

(method toggled
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_toggled)
  (return-type none)
)

(method set_inconsistent
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_inconsistent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_inconsistent
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_inconsistent)
  (return-type gboolean)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktoolbar.h

(function gtk_toolbar_get_type
  (c-name gtk_toolbar_get_type)
  (return-type GtkType)
)

(function gtk_toolbar_new
  (c-name gtk_toolbar_new)
  (is-constructor-of GtkToolbar)
  (return-type GtkWidget*)
)

(method append_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_space)
  (return-type none)
)

(method prepend_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_space)
  (return-type none)
)

(method insert_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_space)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method remove_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_remove_space)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method append_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text) (null-ok))
  (parameter (type-and-name const-char* tooltip_private_text) (null-ok))
)

(method prepend_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text) (null-ok))
  (parameter (type-and-name const-char* tooltip_private_text) (null-ok))
)

(method insert_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text) (null-ok))
  (parameter (type-and-name const-char* tooltip_private_text) (null-ok))
  (parameter (type-and-name gint position))
)

(method set_orientation
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkOrientation orientation))
)

(method set_style
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_style)
  (return-type none)
  (parameter (type-and-name GtkToolbarStyle style))
)

(method set_tooltips
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_tooltips)
  (return-type none)
  (parameter (type-and-name gint enable))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktooltips.h

(function gtk_tooltips_get_type
  (c-name gtk_tooltips_get_type)
  (return-type GtkType)
)

(function gtk_tooltips_new
  (c-name gtk_tooltips_new)
  (is-constructor-of GtkTooltips)
  (return-type GtkTooltips*)
)

(method enable
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_enable)
  (return-type none)
)

(method disable
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_disable)
  (return-type none)
)

(method set_delay
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_delay)
  (return-type none)
  (parameter (type-and-name guint delay))
)

(method set_tip
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_tip)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* tip_text))
  (parameter (type-and-name const-gchar* tip_private))
)

(method set_colors
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_colors)
  (return-type none)
  (parameter (type-and-name GdkColor* background))
  (parameter (type-and-name GdkColor* foreground))
)

(function gtk_tooltips_data_get
  (c-name gtk_tooltips_data_get)
  (return-type GtkTooltipsData*)
  (parameter (type-and-name GtkWidget* widget))
)

(method force_window
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_force_window)
  (return-type none)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktreednd.h

(function gtk_tree_drag_source_get_type
  (c-name gtk_tree_drag_source_get_type)
  (return-type GType)
)

(method drag_data_delete
  (of-object TreeDragSource (Gtk))
  (c-name gtk_tree_drag_source_drag_data_delete)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
)

(method drag_data_get
  (of-object TreeDragSource (Gtk))
  (c-name gtk_tree_drag_source_drag_data_get)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkSelectionData* selection_data))
)

(function gtk_tree_drag_dest_get_type
  (c-name gtk_tree_drag_dest_get_type)
  (return-type GType)
)

(method drag_data_received
  (of-object TreeDragDest (Gtk))
  (c-name gtk_tree_drag_dest_drag_data_received)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* dest))
  (parameter (type-and-name GtkSelectionData* selection_data))
)

(method row_drop_possible
  (of-object TreeDragDest (Gtk))
  (c-name gtk_tree_drag_dest_row_drop_possible)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeModel* src_model))
  (parameter (type-and-name GtkTreePath* src_path))
  (parameter (type-and-name GtkTreePath* dest_path))
)

(method set_tree_row
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_set_tree_row)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeModel* tree_model))
  (parameter (type-and-name GtkTreePath* path))
)

(method get_tree_row
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_get_tree_row)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeModel** tree_model))
  (parameter (type-and-name GtkTreePath** path))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktreemodel.h

(function gtk_tree_model_get_type
  (c-name gtk_tree_model_get_type)
  (return-type GtkType)
)

(function gtk_tree_path_new
  (c-name gtk_tree_path_new)
  (return-type GtkTreePath*)
)

(function gtk_tree_path_new_from_string
  (c-name gtk_tree_path_new_from_string)
  (return-type GtkTreePath*)
  (parameter (type-and-name gchar* path))
)

(method to_string
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_to_string)
  (return-type gchar*)
)

(function gtk_tree_path_new_root
  (c-name gtk_tree_path_new_root)
  (return-type GtkTreePath*)
)

(method append_index
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_append_index)
  (return-type none)
  (parameter (type-and-name gint index))
)

(method prepend_index
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_prepend_index)
  (return-type none)
  (parameter (type-and-name gint index))
)

(method get_depth
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_get_depth)
  (return-type gint)
)

(method get_indices
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_get_indices)
  (return-type gint*)
)

(method free
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_free)
  (return-type none)
)

(method copy
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_copy)
  (return-type GtkTreePath*)
)

(method compare
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_compare)
  (return-type gint)
  (parameter (type-and-name const-GtkTreePath* b))
)

(method next
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_next)
  (return-type none)
)

(method prev
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_prev)
  (return-type gint)
)

(method up
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_up)
  (return-type gint)
)

(method down
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_down)
  (return-type none)
)

(method is_ancestor
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* descendant))
)

(method is_descendant
  (of-object TreePath (Gtk))
  (c-name gtk_tree_path_is_descendant)
  (return-type gboolean)
  (parameter (type-and-name GtkTreePath* ancestor))
)

(function gtk_tree_row_reference_new
  (c-name gtk_tree_row_reference_new)
  (return-type GtkTreeRowReference*)
  (parameter (type-and-name GtkTreeModel* model))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_new_proxy
  (c-name gtk_tree_row_reference_new_proxy)
  (return-type GtkTreeRowReference*)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreeModel* model))
  (parameter (type-and-name GtkTreePath* path))
)

(method get_path
  (of-object TreeRowReference (Gtk))
  (c-name gtk_tree_row_reference_get_path)
  (return-type GtkTreePath*)
)

(method free
  (of-object TreeRowReference (Gtk))
  (c-name gtk_tree_row_reference_free)
  (return-type none)
)

(function gtk_tree_row_reference_inserted
  (c-name gtk_tree_row_reference_inserted)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_deleted
  (c-name gtk_tree_row_reference_deleted)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
)

(function gtk_tree_row_reference_reordered
  (c-name gtk_tree_row_reference_reordered)
  (return-type none)
  (parameter (type-and-name GObject* proxy))
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint* new_order))
)

(function gtk_tree_model_get_type
  (c-name gtk_tree_model_get_type)
  (return-type GtkType)
)

(method get_flags
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_flags)
  (return-type GtkTreeModelFlags)
)

(method get_n_columns
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_n_columns)
  (return-type gint)
)

(method get_column_type
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_column_type)
  (return-type GType)
  (parameter (type-and-name gint index))
)

(method get_iter
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_iter)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreePath* path))
)

(method get_iter_root
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_iter_root)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method get_first
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_first)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method get_path
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_path)
  (return-type GtkTreePath*)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method get_value
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_value)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GValue* value))
)

(method iter_next
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_next)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method iter_children
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_children)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
)

(method iter_has_child
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_has_child)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method iter_n_children
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_n_children)
  (return-type gint)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method iter_nth_child
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_nth_child)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name gint n))
)

(method iter_parent
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_iter_parent)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* child))
)

(method ref_node
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_ref_node)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method unref_node
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_unref_node)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method get
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (varargs t)
)

(method get_valist
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_get_valist)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name va_list var_args))
)

(method range_changed
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_range_changed)
  (return-type none)
  (parameter (type-and-name GtkTreePath* start_path))
  (parameter (type-and-name GtkTreeIter* start_iter))
  (parameter (type-and-name GtkTreePath* end_path))
  (parameter (type-and-name GtkTreeIter* end_iter))
)

(method inserted
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_inserted)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeIter* iter))
)

(method has_child_toggled
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_has_child_toggled)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeIter* iter))
)

(method deleted
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_deleted)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method reordered
  (of-object TreeModel (Gtk))
  (c-name gtk_tree_model_reordered)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint* new_order))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktreemodelsort.h

(function gtk_tree_model_sort_get_type
  (c-name gtk_tree_model_sort_get_type)
  (return-type GtkType)
)

(function gtk_tree_model_sort_new
  (c-name gtk_tree_model_sort_new)
  (is-constructor-of GtkTreeModel)
  (return-type GtkTreeModel*)
)

(function gtk_tree_model_sort_new_with_model
  (c-name gtk_tree_model_sort_new_with_model)
  (is-constructor-of GtkTreeModel)
  (return-type GtkTreeModel*)
  (parameter (type-and-name GValueCompareFunc func))
  (parameter (type-and-name gint sort_col))
)

(method set_model
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_set_model)
  (return-type none)
  (parameter (type-and-name GtkTreeModel* child_model))
)

(method get_model
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_get_model)
  (return-type GtkTreeModel*)
)

(method convert_path
  (of-object TreeModelSort (Gtk))
  (c-name gtk_tree_model_sort_convert_path)
  (return-type GtkTreePath*)
  (parameter (type-and-name GtkTreePath* child_path))
)

; (method convert_iter
;   (of-object TreeModelSort (Gtk))
;   (c-name gtk_tree_model_sort_convert_iter)
;   (return-type none)
;   (parameter (type-and-name GtkTreeIter* sort_iter))
;   (parameter (type-and-name GtkTreeIter* child_iter))
; )


;; From /opt/pango/include/gtk-2.0/gtk/gtktreeselection.h

(function gtk_tree_selection_get_type
  (c-name gtk_tree_selection_get_type)
  (return-type GtkType)
)

(method set_mode
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_set_mode)
  (return-type none)
  (parameter (type-and-name GtkTreeSelectionMode type))
)

(method set_select_function
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_set_select_function)
  (return-type none)
  (parameter (type-and-name GtkTreeSelectionFunc func))
  (parameter (type-and-name gpointer data))
)

(method get_user_data
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_user_data)
  (return-type gpointer)
)

(method get_selected
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_get_selected)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeModel** model))
  (parameter (type-and-name GtkTreeIter* iter))
)

(method selected_foreach
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_selected_foreach)
  (return-type none)
  (parameter (type-and-name GtkTreeSelectionForeachFunc func))
  (parameter (type-and-name gpointer data))
)

(method select_path
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_path)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method unselect_path
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_path)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method select_iter
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method unselect_iter
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_iter)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method select_all
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_all)
  (return-type none)
)

(method unselect_all
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_unselect_all)
  (return-type none)
)

(method select_range
  (of-object TreeSelection (Gtk))
  (c-name gtk_tree_selection_select_range)
  (return-type none)
  (parameter (type-and-name GtkTreePath* start_path))
  (parameter (type-and-name GtkTreePath* end_path))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktreesortable.h

(function gtk_tree_sortable_get_type
  (c-name gtk_tree_sortable_get_type)
  (return-type GType)
)

(method sort_column_changed
  (of-object TreeSortable (Gtk))
  (c-name gtk_tree_sortable_sort_column_changed)
  (return-type none)
)

(method get_sort_column_id
  (of-object TreeSortable (Gtk))
  (c-name gtk_tree_sortable_get_sort_column_id)
  (return-type gboolean)
  (parameter (type-and-name gint* sort_column_id))
  (parameter (type-and-name GtkTreeSortOrder* order))
)

(method set_sort_column_id
  (of-object TreeSortable (Gtk))
  (c-name gtk_tree_sortable_set_sort_column_id)
  (return-type none)
  (parameter (type-and-name gint sort_column_id))
  (parameter (type-and-name GtkTreeSortOrder order))
)

(method sort_column_id_set_func
  (of-object TreeSortable (Gtk))
  (c-name gtk_tree_sortable_sort_column_id_set_func)
  (return-type none)
  (parameter (type-and-name gint sort_column_id))
  (parameter (type-and-name GtkTreeIterCompareFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktreestore.h

(function gtk_tree_store_get_type
  (c-name gtk_tree_store_get_type)
  (return-type GtkType)
)

(function gtk_tree_store_new
  (c-name gtk_tree_store_new)
  (is-constructor-of GtkTreeStore)
  (return-type GtkTreeStore*)
)

(function gtk_tree_store_new_with_types
  (c-name gtk_tree_store_new_with_types)
  (is-constructor-of GtkTreeStore)
  (return-type GtkTreeStore*)
  (parameter (type-and-name gint n_columns))
  (varargs t)
)

(method set_n_columns
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_n_columns)
  (return-type none)
  (parameter (type-and-name gint n_columns))
)

(method set_column_type
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_column_type)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GType type))
)

(method set_value
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set_value)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GValue* value))
)

(method set
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_set)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (varargs t)
)

(method set_valist
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_setv)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name va_list var_args))
)

(method remove
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_remove)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
)

(method insert
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name gint position))
)

(method insert_before
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert_before)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method insert_after
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_insert_after)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
  (parameter (type-and-name GtkTreeIter* sibling))
)

(method prepend
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_prepend)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
)

(method append
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_append)
  (return-type none)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* parent))
)

(method is_ancestor
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkTreeIter* iter))
  (parameter (type-and-name GtkTreeIter* descendant))
)

(method iter_depth
  (of-object TreeStore (Gtk))
  (c-name gtk_tree_store_iter_depth)
  (return-type gint)
  (parameter (type-and-name GtkTreeIter* iter))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktreeview.h

(function gtk_tree_view_get_type
  (c-name gtk_tree_view_get_type)
  (return-type GtkType)
)

(function gtk_tree_view_new
  (c-name gtk_tree_view_new)
  (is-constructor-of GtkTreeView)
  (return-type GtkWidget*)
)

(function gtk_tree_view_new_with_model
  (c-name gtk_tree_view_new_with_model)
  (is-constructor-of GtkTreeView)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkTreeModel* model) (null-ok) (default "NULL"))
)

(method get_model
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_model)
  (return-type GtkTreeModel*)
)

(method set_model
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_model)
  (return-type none)
  (parameter (type-and-name GtkTreeModel* model) (null-ok) (default "NULL"))
)

(method get_selection
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_selection)
  (return-type GtkTreeSelection*)
)

(method get_hadjustment
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_vadjustment
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_vadjustment
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_headers_visible
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_headers_visible)
  (return-type gboolean)
)

(method set_headers_visible
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_headers_visible)
  (return-type none)
  (parameter (type-and-name gboolean headers_visible))
)

(method columns_autosize
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_columns_autosize)
  (return-type none)
)

(method set_headers_clickable
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_headers_clickable)
  (return-type none)
  (parameter (type-and-name gboolean active))
)

(method set_rules_hint
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_rules_hint)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_rules_hint
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_rules_hint)
  (return-type gboolean)
)

(method append_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_append_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method remove_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_remove_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method insert_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column)
  (return-type gint)
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name gint position))
)

(method insert_column_with_attributes
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column_with_attributes)
  (return-type gint)
  (parameter (type-and-name gint position))
  (parameter (type-and-name gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
  (varargs t)
)

(method insert_column_with_data_func
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_insert_column_with_data_func)
  (return-type gint)
  (parameter (type-and-name gint position))
  (parameter (type-and-name gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
  (parameter (type-and-name GtkTreeCellDataFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GDestroyNotify dnotify))
)

(method get_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_column)
  (return-type GtkTreeViewColumn*)
  (parameter (type-and-name gint n))
)

(method set_expander_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_expander_column)
  (return-type none)
  (parameter (type-and-name gint col))
)

(method get_expander_column
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_expander_column)
  (return-type gint)
)

(method set_column_drag_function
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_column_drag_function)
  (return-type void)
  (parameter (type-and-name GtkTreeViewColumnDropFunc func))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name GDestroyNotify dnotify))
)

(method scroll_to_point
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_scroll_to_point)
  (return-type none)
  (parameter (type-and-name gint tree_x))
  (parameter (type-and-name gint tree_y))
)

(method scroll_to_cell
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_scroll_to_cell)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method row_activated
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_row_activated)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
)

(method expand_all
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_all)
  (return-type none)
)

(method collapse_all
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_collapse_all)
  (return-type none)
)

(method expand_row
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name gboolean open_all))
)

(method collapse_row
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_collapse_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method expand_rows
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_expand_rows)
  (return-type none)
  (parameter (type-and-name GtkTreeViewMappingFunc func))
  (parameter (type-and-name gpointer data))
)

(method set_reorderable
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method set_cursor
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_cursor)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
)

(method get_path_at_pos
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_path_at_pos)
  (return-type gboolean)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewColumn** column))
  (parameter (type-and-name gint* cell_x))
  (parameter (type-and-name gint* cell_y))
)

(method get_cell_area
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_cell_area)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name GdkRectangle* rect))
)

(method get_background_area
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_background_area)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewColumn* column))
  (parameter (type-and-name GdkRectangle* rect))
)

(method get_visible_rect
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_visible_rect)
  (return-type none)
  (parameter (type-and-name GdkRectangle* visible_rect))
)

(method widget_to_tree_coords
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_widget_to_tree_coords)
  (return-type none)
  (parameter (type-and-name gint wx))
  (parameter (type-and-name gint wy))
  (parameter (type-and-name gint* tx))
  (parameter (type-and-name gint* ty))
)

(method tree_to_widget_coords
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_tree_to_widget_coords)
  (return-type none)
  (parameter (type-and-name gint tx))
  (parameter (type-and-name gint ty))
  (parameter (type-and-name gint* wx))
  (parameter (type-and-name gint* wy))
)

(method set_rows_drag_source
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_rows_drag_source)
  (return-type none)
  (parameter (type-and-name GdkModifierType start_button_mask))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
  (parameter (type-and-name GtkTreeViewDraggableFunc row_draggable_func))
  (parameter (type-and-name gpointer user_data))
)

(method set_rows_drag_dest
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_rows_drag_dest)
  (return-type none)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
  (parameter (type-and-name GtkTreeViewDroppableFunc location_droppable_func))
  (parameter (type-and-name gpointer user_data))
)

(method unset_rows_drag_source
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_unset_rows_drag_source)
  (return-type none)
)

(method unset_rows_drag_dest
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_unset_rows_drag_dest)
  (return-type none)
)

(method set_drag_dest_row
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_set_drag_dest_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath* path))
  (parameter (type-and-name GtkTreeViewDropPosition pos))
)

(method get_drag_dest_row
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_drag_dest_row)
  (return-type none)
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewDropPosition* pos))
)

(method get_dest_row_at_pos
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_get_dest_row_at_pos)
  (return-type gboolean)
  (parameter (type-and-name gint drag_x))
  (parameter (type-and-name gint drag_y))
  (parameter (type-and-name GtkTreePath** path))
  (parameter (type-and-name GtkTreeViewDropPosition* pos))
)

(method create_row_drag_icon
  (of-object TreeView (Gtk))
  (c-name gtk_tree_view_create_row_drag_icon)
  (return-type GdkPixmap*)
  (parameter (type-and-name GtkTreePath* path))
)


;; From /opt/pango/include/gtk-2.0/gtk/gtktreeviewcolumn.h

(function gtk_tree_view_column_get_type
  (c-name gtk_tree_view_column_get_type)
  (return-type GtkType)
)

(function gtk_tree_view_column_new
  (c-name gtk_tree_view_column_new)
  (is-constructor-of GtkTreeViewColumn)
  (return-type GtkObject*)
)

(function gtk_tree_view_column_new_with_attributes
  (c-name gtk_tree_view_column_new_with_attributes)
  (is-constructor-of GtkTreeViewColumn)
  (return-type GtkObject*)
  (parameter (type-and-name gchar* title))
  (parameter (type-and-name GtkCellRenderer* cell))
  (varargs t)
)

(method set_cell_renderer
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_cell_renderer)
  (return-type none)
  (parameter (type-and-name GtkCellRenderer* cell))
)

(method get_cell_renderer
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_cell_renderer)
  (return-type GtkCellRenderer*)
)

(method add_attribute
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_add_attribute)
  (return-type none)
  (parameter (type-and-name gchar* attribute))
  (parameter (type-and-name gint column))
)

(method set_attributes
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_attributes)
  (return-type none)
  (varargs t)
)

(method set_cell_data_func
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_cell_data_func)
  (return-type none)
  (parameter (type-and-name GtkCellDataFunc func))
  (parameter (type-and-name gpointer func_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method clear_attributes
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_clear_attributes)
  (return-type none)
)

(method set_visible
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_visible)
  (return-type none)
  (parameter (type-and-name gboolean visible))
)

(method get_visible
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_visible)
  (return-type gboolean)
)

(method set_sizing
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sizing)
  (return-type none)
  (parameter (type-and-name GtkTreeViewColumnSizing type))
)

(method get_sizing
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sizing)
  (return-type gint)
)

(method get_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_width)
  (return-type gint)
)

(method set_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_width)
  (return-type none)
  (parameter (type-and-name gint size))
)

(method set_min_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_min_width)
  (return-type none)
  (parameter (type-and-name gint min_width))
)

(method get_min_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_min_width)
  (return-type gint)
)

(method set_max_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_max_width)
  (return-type none)
  (parameter (type-and-name gint max_width))
)

(method get_max_width
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_max_width)
  (return-type gint)
)

(method clicked
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_clicked)
  (return-type none)
)

(method set_title
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_title)
  (return-type none)
  (parameter (type-and-name gchar* title))
)

(method get_title
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_title)
  (return-type const-gchar*)
)

(method set_clickable
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_clickable)
  (return-type none)
  (parameter (type-and-name gboolean active))
)

(method set_widget
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method get_widget
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_widget)
  (return-type GtkWidget*)
)

(method set_alignment
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_alignment)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
)

(method get_alignment
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_alignment)
  (return-type gfloat)
)

(method set_reorderable
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method get_reorderable
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_reorderable)
  (return-type gboolean)
)

(method set_sort_column_id
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_column_id)
  (return-type none)
  (parameter (type-and-name gint sort_column_id))
)

(method set_sort_indicator
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_indicator)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_sort_indicator
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sort_indicator)
  (return-type gboolean)
)

(method set_sort_order
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_set_sort_order)
  (return-type none)
  (parameter (type-and-name GtkTreeSortOrder order))
)

(method get_sort_order
  (of-object TreeViewColumn (Gtk))
  (c-name gtk_tree_view_column_get_sort_order)
  (return-type GtkTreeSortOrder)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtktypeutils.h

(method unique
  (of-object Type (Gtk))
  (c-name gtk_type_unique)
  (return-type GtkType)
  (parameter (type-and-name const-GtkTypeInfo* gtkinfo))
)

(function type_class
  (c-name gtk_type_class)
  (return-type gpointer)
  (parameter (type-and-name GtkType type))
)

(method new
  (of-object Type (Gtk))
  (c-name gtk_type_new)
  (return-type gpointer)
)

(method enum_get_values
  (of-object Type (Gtk))
  (c-name gtk_type_enum_get_values)
  (return-type GtkEnumValue*)
)

(method flags_get_values
  (of-object Type (Gtk))
  (c-name gtk_type_flags_get_values)
  (return-type GtkFlagValue*)
)

(method enum_find_value
  (of-object Type (Gtk))
  (c-name gtk_type_enum_find_value)
  (return-type GtkEnumValue*)
  (parameter (type-and-name const-gchar* value_name))
)

(method flags_find_value
  (of-object Type (Gtk))
  (c-name gtk_type_flags_find_value)
  (return-type GtkFlagValue*)
  (parameter (type-and-name const-gchar* value_name))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvbbox.h

(function gtk_vbutton_box_get_type
  (c-name gtk_vbutton_box_get_type)
  (return-type GtkType)
)

(function gtk_vbutton_box_new
  (c-name gtk_vbutton_box_new)
  (is-constructor-of GtkVButtonBox)
  (return-type GtkWidget*)
)


;; From /opt/pango/include/gtk-2.0/gtk/gtkvbox.h

(function gtk_vbox_get_type
  (c-name gtk_vbox_get_type)
  (return-type GtkType)
)

(function gtk_vbox_new
  (c-name gtk_vbox_new)
  (is-constructor-of GtkVBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
  (parameter (type-and-name gint spacing) (default "0"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkviewport.h

(function gtk_viewport_get_type
  (c-name gtk_viewport_get_type)
  (return-type GtkType)
)

(function gtk_viewport_new
  (c-name gtk_viewport_new)
  (is-constructor-of GtkViewport)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok) (default "NULL"))
)

(method get_hadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)

(method set_vadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)

(method set_shadow_type
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvpaned.h

(function gtk_vpaned_get_type
  (c-name gtk_vpaned_get_type)
  (return-type GtkType)
)

(function gtk_vpaned_new
  (c-name gtk_vpaned_new)
  (is-constructor-of GtkVPaned)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvruler.h

(function gtk_vruler_get_type
  (c-name gtk_vruler_get_type)
  (return-type GtkType)
)

(function gtk_vruler_new
  (c-name gtk_vruler_new)
  (is-constructor-of GtkVRuler)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvscale.h

(function gtk_vscale_get_type
  (c-name gtk_vscale_get_type)
  (return-type GtkType)
)

(function gtk_vscale_new
  (c-name gtk_vscale_new)
  (is-constructor-of GtkVScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvscrollbar.h

(function gtk_vscrollbar_get_type
  (c-name gtk_vscrollbar_get_type)
  (return-type GtkType)
)

(function gtk_vscrollbar_new
  (c-name gtk_vscrollbar_new)
  (is-constructor-of GtkVScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkvseparator.h

(function gtk_vseparator_get_type
  (c-name gtk_vseparator_get_type)
  (return-type GtkType)
)

(function gtk_vseparator_new
  (c-name gtk_vseparator_new)
  (is-constructor-of GtkVSeparator)
  (return-type GtkWidget*)
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkwidget.h

(function gtk_widget_get_type
  (c-name gtk_widget_get_type)
  (return-type GtkType)
)

(function gtk_widget_new
  (c-name gtk_widget_new)
  (is-constructor-of GtkWidget)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method ref
  (of-object Widget (Gtk))
  (c-name gtk_widget_ref)
  (return-type GtkWidget*)
)

(method unref
  (of-object Widget (Gtk))
  (c-name gtk_widget_unref)
  (return-type none)
)

(method destroy
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroy)
  (return-type none)
)

(method destroyed
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroyed)
  (return-type none)
  (parameter (type-and-name GtkWidget** widget_pointer))
)

(method set
  (of-object Widget (Gtk))
  (c-name gtk_widget_set)
  (return-type none)
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method unparent
  (of-object Widget (Gtk))
  (c-name gtk_widget_unparent)
  (return-type none)
)

(method show
  (of-object Widget (Gtk))
  (c-name gtk_widget_show)
  (return-type none)
)

(method show_now
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_now)
  (return-type none)
)

(method hide
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide)
  (return-type none)
)

(method show_all
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_all)
  (return-type none)
)

(method hide_all
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_all)
  (return-type none)
)

(method map
  (of-object Widget (Gtk))
  (c-name gtk_widget_map)
  (return-type none)
)

(method unmap
  (of-object Widget (Gtk))
  (c-name gtk_widget_unmap)
  (return-type none)
)

(method realize
  (of-object Widget (Gtk))
  (c-name gtk_widget_realize)
  (return-type none)
)

(method unrealize
  (of-object Widget (Gtk))
  (c-name gtk_widget_unrealize)
  (return-type none)
)

(method queue_draw
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw)
  (return-type none)
)

(method queue_draw_area
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_clear
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear)
  (return-type none)
)

(method queue_clear_area
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_resize
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_resize)
  (return-type none)
)

(method draw
  (of-object Widget (Gtk))
  (c-name gtk_widget_draw)
  (return-type none)
  (parameter (type-and-name GdkRectangle* area))
)

(method size_request
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_request)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method size_allocate
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_allocate)
  (return-type none)
  (parameter (type-and-name GtkAllocation* allocation))
)

(method get_child_requisition
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_child_requisition)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method add_accelerator
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_accelerator)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_signal))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
)

(method remove_accelerator
  (of-object Widget (Gtk))
  (c-name gtk_widget_remove_accelerator)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
)

(method remove_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_remove_accelerators)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_signal))
  (parameter (type-and-name gboolean visible_only))
)

(method accelerator_signal
  (of-object Widget (Gtk))
  (c-name gtk_widget_accelerator_signal)
  (return-type guint)
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
)

(method lock_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_lock_accelerators)
  (return-type none)
)

(method unlock_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_unlock_accelerators)
  (return-type none)
)

(method accelerators_locked
  (of-object Widget (Gtk))
  (c-name gtk_widget_accelerators_locked)
  (return-type gboolean)
)

(method mnemonic_activate
  (of-object Widget (Gtk))
  (c-name gtk_widget_mnemonic_activate)
  (return-type gboolean)
  (parameter (type-and-name gboolean group_cycling))
)

(method event
  (of-object Widget (Gtk))
  (c-name gtk_widget_event)
  (return-type gint)
  (parameter (type-and-name GdkEvent* event))
)

(method send_expose
  (of-object Widget (Gtk))
  (c-name gtk_widget_send_expose)
  (return-type gint)
  (parameter (type-and-name GdkEvent* event))
)

(method activate
  (of-object Widget (Gtk))
  (c-name gtk_widget_activate)
  (return-type gboolean)
)

(method set_scroll_adjustments
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_scroll_adjustments)
  (return-type gboolean)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok))
)

(method reparent
  (of-object Widget (Gtk))
  (c-name gtk_widget_reparent)
  (return-type none)
  (parameter (type-and-name GtkWidget* new_parent))
)

(method intersect
  (of-object Widget (Gtk))
  (c-name gtk_widget_intersect)
  (return-type gint)
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GdkRectangle* intersection))
)

(method region_intersect
  (of-object Widget (Gtk))
  (c-name gtk_widget_region_intersect)
  (return-type GdkRegion*)
  (parameter (type-and-name GdkRegion* region))
)

(method is_focus
  (of-object Widget (Gtk))
  (c-name gtk_widget_is_focus)
  (return-type gboolean)
)

(method grab_focus
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_focus)
  (return-type none)
)

(method grab_default
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_default)
  (return-type none)
)

(method set_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_name)
  (return-type const-gchar*)
)

(method set_state
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_state)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
)

(method set_sensitive
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_sensitive)
  (return-type none)
  (parameter (type-and-name gboolean sensitive))
)

(method set_app_paintable
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_app_paintable)
  (return-type none)
  (parameter (type-and-name gboolean app_paintable))
)

(method set_double_buffered
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_double_buffered)
  (return-type none)
  (parameter (type-and-name gboolean double_buffered))
)

(method set_parent
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent))
)

(method set_parent_window
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent_window)
  (return-type none)
  (parameter (type-and-name GdkWindow* parent_window))
)

(method get_parent_window
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_parent_window)
  (return-type GdkWindow*)
)

(method child_focus
  (of-object Widget (Gtk))
  (c-name gtk_widget_child_focus)
  (return-type gboolean)
  (parameter (type-and-name GtkDirectionType direction))
)

(method set_uposition
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_uposition)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_usize
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_usize)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method set_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method add_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method set_extension_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_extension_events)
  (return-type none)
  (parameter (type-and-name GdkExtensionMode mode))
)

(method get_extension_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_extension_events)
  (return-type GdkExtensionMode)
)

(method get_toplevel
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_toplevel)
  (return-type GtkWidget*)
)

(method get_ancestor
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_ancestor)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkType widget_type))
)

(method get_colormap
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_colormap)
  (return-type GdkColormap*)
)

(method get_visual
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_visual)
  (return-type GdkVisual*)
)

(method get_accessible
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_accessible)
  (return-type AtkObject*)
)

(method set_colormap
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(method get_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_events)
  (return-type gint)
)

(method get_pointer
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_pointer)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(method is_ancestor
  (of-object Widget (Gtk))
  (c-name gtk_widget_is_ancestor)
  (return-type gint)
  (parameter (type-and-name GtkWidget* ancestor))
)

(method hide_on_delete
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_on_delete)
  (return-type gint)
)

(method set_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(method set_rc_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_rc_style)
  (return-type none)
)

(method ensure_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_ensure_style)
  (return-type none)
)

(method get_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_style)
  (return-type GtkStyle*)
)

(method restore_default_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_restore_default_style)
  (return-type none)
)

(method modify_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* style))
)

(method get_modifier_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_modifier_style)
  (return-type GtkRcStyle*)
)

(method modify_fg
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_fg)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_bg
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_bg)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_text
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_text)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_base
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_base)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
  (parameter (type-and-name GdkColor* color))
)

(method modify_font
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_font)
  (return-type none)
  (parameter (type-and-name PangoFontDescription* font_desc))
)

(method create_pango_context
  (of-object Widget (Gtk))
  (c-name gtk_widget_create_pango_context)
  (return-type PangoContext*)
)

(method get_pango_context
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_pango_context)
  (return-type PangoContext*)
)

(method create_pango_layout
  (of-object Widget (Gtk))
  (c-name gtk_widget_create_pango_layout)
  (return-type PangoLayout*)
  (parameter (type-and-name const-gchar* text))
)

(method render_icon
  (of-object Widget (Gtk))
  (c-name gtk_widget_render_icon)
  (return-type GdkPixbuf*)
  (parameter (type-and-name const-gchar* stock_id))
  (parameter (type-and-name GtkIconSize size))
  (parameter (type-and-name const-gchar* detail))
)

(method set_composite_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_composite_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_composite_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_composite_name)
  (return-type gchar*)
)

(method reset_rc_styles
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_rc_styles)
  (return-type none)
)

(function widget_push_style
  (c-name gtk_widget_push_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(function widget_push_colormap
  (c-name gtk_widget_push_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* cmap))
)

(function widget_push_composite_child
  (c-name gtk_widget_push_composite_child)
  (return-type none)
)

(function widget_pop_composite_child
  (c-name gtk_widget_pop_composite_child)
  (return-type none)
)

(function widget_pop_style
  (c-name gtk_widget_pop_style)
  (return-type none)
)

(function widget_pop_colormap
  (c-name gtk_widget_pop_colormap)
  (return-type none)
)

(method install_style_property
  (of-object WidgetClass (Gtk))
  (c-name gtk_widget_class_install_style_property)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
)

(method install_style_property_parser
  (of-object WidgetClass (Gtk))
  (c-name gtk_widget_class_install_style_property_parser)
  (return-type none)
  (parameter (type-and-name GParamSpec* pspec))
  (parameter (type-and-name GtkRcPropertyParser parser))
)

(method style_get_property
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get_property)
  (return-type none)
  (parameter (type-and-name const-gchar* property_name))
  (parameter (type-and-name GValue* value))
)

(method style_get_valist
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get_valist)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
  (parameter (type-and-name va_list var_args))
)

(method style_get
  (of-object Widget (Gtk))
  (c-name gtk_widget_style_get)
  (return-type none)
  (parameter (type-and-name const-gchar* first_property_name))
  (varargs t)
)

(function widget_set_default_style
  (c-name gtk_widget_set_default_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(function widget_set_default_colormap
  (c-name gtk_widget_set_default_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(function widget_get_default_style
  (c-name gtk_widget_get_default_style)
  (return-type GtkStyle*)
)

(function widget_get_default_colormap
  (c-name gtk_widget_get_default_colormap)
  (return-type GdkColormap*)
)

(function widget_get_default_visual
  (c-name gtk_widget_get_default_visual)
  (return-type GdkVisual*)
)

(method set_direction
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection dir))
)

(method get_direction
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_direction)
  (return-type GtkTextDirection)
)

(function widget_set_default_direction
  (c-name gtk_widget_set_default_direction)
  (return-type none)
  (parameter (type-and-name GtkTextDirection dir))
)

(function widget_get_default_direction
  (c-name gtk_widget_get_default_direction)
  (return-type GtkTextDirection)
)

(method shape_combine_mask
  (of-object Widget (Gtk))
  (c-name gtk_widget_shape_combine_mask)
  (return-type none)
  (parameter (type-and-name GdkBitmap* shape_mask))
  (parameter (type-and-name gint offset_x))
  (parameter (type-and-name gint offset_y))
)

(method reset_shapes
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_shapes)
  (return-type none)
)

(method path
  (of-object Widget (Gtk))
  (c-name gtk_widget_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)

(method class_path
  (of-object Widget (Gtk))
  (c-name gtk_widget_class_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)



;; From /opt/pango/include/gtk-2.0/gtk/gtkwindow.h

(function gtk_window_get_type
  (c-name gtk_window_get_type)
  (return-type GtkType)
)

(function gtk_window_new
  (c-name gtk_window_new)
  (is-constructor-of GtkWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWindowType type) (default "GTK_WINDOW_TOPLEVEL"))
)

(method set_title
  (of-object Window (Gtk))
  (c-name gtk_window_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method set_wmclass
  (of-object Window (Gtk))
  (c-name gtk_window_set_wmclass)
  (return-type none)
  (parameter (type-and-name const-gchar* wmclass_name))
  (parameter (type-and-name const-gchar* wmclass_class))
)

(method set_role
  (of-object Window (Gtk))
  (c-name gtk_window_set_role)
  (return-type none)
  (parameter (type-and-name const-gchar* role))
)

(method add_accel_group
  (of-object Window (Gtk))
  (c-name gtk_window_add_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method remove_accel_group
  (of-object Window (Gtk))
  (c-name gtk_window_remove_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method set_position
  (of-object Window (Gtk))
  (c-name gtk_window_set_position)
  (return-type none)
  (parameter (type-and-name GtkWindowPosition position))
)

(method activate_focus
  (of-object Window (Gtk))
  (c-name gtk_window_activate_focus)
  (return-type gint)
)

(method activate_default
  (of-object Window (Gtk))
  (c-name gtk_window_activate_default)
  (return-type gint)
)

(method set_transient_for
  (of-object Window (Gtk))
  (c-name gtk_window_set_transient_for)
  (return-type none)
  (parameter (type-and-name GtkWindow* parent))
)

(method set_type_hint
  (of-object Window (Gtk))
  (c-name gtk_window_set_type_hint)
  (return-type none)
  (parameter (type-and-name GdkWindowTypeHint hint))
)

(method set_destroy_with_parent
  (of-object Window (Gtk))
  (c-name gtk_window_set_destroy_with_parent)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_resizeable
  (of-object Window (Gtk))
  (c-name gtk_window_set_resizeable)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method get_resizeable
  (of-object Window (Gtk))
  (c-name gtk_window_get_resizeable)
  (return-type gboolean)
)

(method set_gravity
  (of-object Window (Gtk))
  (c-name gtk_window_set_gravity)
  (return-type none)
  (parameter (type-and-name GdkGravity gravity))
)

(method get_gravity
  (of-object Window (Gtk))
  (c-name gtk_window_get_gravity)
  (return-type GdkGravity)
)

(method set_geometry_hints
  (of-object Window (Gtk))
  (c-name gtk_window_set_geometry_hints)
  (return-type none)
  (parameter (type-and-name GtkWidget* geometry_widget))
  (parameter (type-and-name GdkGeometry* geometry))
  (parameter (type-and-name GdkWindowHints geom_mask))
)

(method set_has_frame
  (of-object Window (Gtk))
  (c-name gtk_window_set_has_frame)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_frame_dimensions
  (of-object Window (Gtk))
  (c-name gtk_window_set_frame_dimensions)
  (return-type none)
  (parameter (type-and-name gint left))
  (parameter (type-and-name gint top))
  (parameter (type-and-name gint right))
  (parameter (type-and-name gint bottom))
)

(method set_decorated
  (of-object Window (Gtk))
  (c-name gtk_window_set_decorated)
  (return-type none)
  (parameter (type-and-name gboolean setting))
)

(method set_modal
  (of-object Window (Gtk))
  (c-name gtk_window_set_modal)
  (return-type none)
  (parameter (type-and-name gboolean modal))
)

(function window_list_toplevels
  (c-name gtk_window_list_toplevels)
  (return-type GList*)
)

(method add_mnemonic
  (of-object Window (Gtk))
  (c-name gtk_window_add_mnemonic)
  (return-type none)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GtkWidget* target))
)

(method remove_mnemonic
  (of-object Window (Gtk))
  (c-name gtk_window_remove_mnemonic)
  (return-type none)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GtkWidget* target))
)

(method mnemonic_activate
  (of-object Window (Gtk))
  (c-name gtk_window_mnemonic_activate)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifier))
)

(method set_mnemonic_modifier
  (of-object Window (Gtk))
  (c-name gtk_window_set_mnemonic_modifier)
  (return-type none)
  (parameter (type-and-name GdkModifierType modifier))
)

(method present
  (of-object Window (Gtk))
  (c-name gtk_window_present)
  (return-type none)
)

(method iconify
  (of-object Window (Gtk))
  (c-name gtk_window_iconify)
  (return-type none)
)

(method deiconify
  (of-object Window (Gtk))
  (c-name gtk_window_deiconify)
  (return-type none)
)

(method stick
  (of-object Window (Gtk))
  (c-name gtk_window_stick)
  (return-type none)
)

(method unstick
  (of-object Window (Gtk))
  (c-name gtk_window_unstick)
  (return-type none)
)

(method maximize
  (of-object Window (Gtk))
  (c-name gtk_window_maximize)
  (return-type none)
)

(method unmaximize
  (of-object Window (Gtk))
  (c-name gtk_window_unmaximize)
  (return-type none)
)

(method begin_resize_drag
  (of-object Window (Gtk))
  (c-name gtk_window_begin_resize_drag)
  (return-type none)
  (parameter (type-and-name GdkWindowEdge edge))
  (parameter (type-and-name gint button))
  (parameter (type-and-name gint root_x))
  (parameter (type-and-name gint root_y))
  (parameter (type-and-name guint32 timestamp))
)

(method begin_move_drag
  (of-object Window (Gtk))
  (c-name gtk_window_begin_move_drag)
  (return-type none)
  (parameter (type-and-name gint button))
  (parameter (type-and-name gint root_x))
  (parameter (type-and-name gint root_y))
  (parameter (type-and-name guint32 timestamp))
)

(method set_policy
  (of-object Window (Gtk))
  (c-name gtk_window_set_policy)
  (return-type none)
  (parameter (type-and-name gint allow_shrink))
  (parameter (type-and-name gint allow_grow))
  (parameter (type-and-name gint auto_shrink))
)

(method set_default_size
  (of-object Window (Gtk))
  (c-name gtk_window_set_default_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method set_focus
  (of-object Window (Gtk))
  (c-name gtk_window_set_focus)
  (return-type none)
  (parameter (type-and-name GtkWidget* focus))
)

(method set_default
  (of-object Window (Gtk))
  (c-name gtk_window_set_default)
  (return-type none)
  (parameter (type-and-name GtkWidget* defaultw))
)

(method remove_embedded_xid
  (of-object Window (Gtk))
  (c-name gtk_window_remove_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)

(method add_embedded_xid
  (of-object Window (Gtk))
  (c-name gtk_window_add_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)
